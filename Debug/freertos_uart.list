
freertos_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c04  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08004da4  08004da4  00005da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e24  08004e24  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004e24  08004e24  00005e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e2c  08004e2c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e2c  08004e2c  00005e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e30  08004e30  00005e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004e34  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c0  20000010  08004e44  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049d0  08004e44  000069d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e13  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002871  00000000  00000000  00016e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  000196c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af1  00000000  00000000  0001a508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000325a  00000000  00000000  0001aff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd34  00000000  00000000  0001e253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f33d  00000000  00000000  0002df87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd2c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003adc  00000000  00000000  000bd308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c0de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004d8c 	.word	0x08004d8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08004d8c 	.word	0x08004d8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b087      	sub	sp, #28
 80004e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fa4d 	bl	8000984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f855 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f8dd 	bl	80006ac <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f2:	f000 f8b1 	bl	8000658 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char hello[] = "UART Ready.\r\n";
 80004f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000570 <main+0x90>)
 80004f8:	463c      	mov	r4, r7
 80004fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004fc:	c407      	stmia	r4!, {r0, r1, r2}
 80004fe:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)hello, strlen(hello), 100);
 8000500:	463b      	mov	r3, r7
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff fe6c 	bl	80001e0 <strlen>
 8000508:	4603      	mov	r3, r0
 800050a:	b29a      	uxth	r2, r3
 800050c:	4639      	mov	r1, r7
 800050e:	2364      	movs	r3, #100	@ 0x64
 8000510:	4818      	ldr	r0, [pc, #96]	@ (8000574 <main+0x94>)
 8000512:	f001 f9bb 	bl	800188c <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000516:	f001 fe3f 	bl	8002198 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  uartQueue = xQueueCreate(QueueLength, sizeof(uint8_t));  // Create queue
 800051a:	2200      	movs	r2, #0
 800051c:	2101      	movs	r1, #1
 800051e:	2040      	movs	r0, #64	@ 0x40
 8000520:	f002 f901 	bl	8002726 <xQueueGenericCreate>
 8000524:	4603      	mov	r3, r0
 8000526:	4a14      	ldr	r2, [pc, #80]	@ (8000578 <main+0x98>)
 8000528:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800052a:	4a14      	ldr	r2, [pc, #80]	@ (800057c <main+0x9c>)
 800052c:	2100      	movs	r1, #0
 800052e:	4814      	ldr	r0, [pc, #80]	@ (8000580 <main+0xa0>)
 8000530:	f001 fe7c 	bl	800222c <osThreadNew>
 8000534:	4603      	mov	r3, r0
 8000536:	4a13      	ldr	r2, [pc, #76]	@ (8000584 <main+0xa4>)
 8000538:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(StartUartSend, "UART_TX", 256, NULL, 2, NULL);
 800053a:	2300      	movs	r3, #0
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	2302      	movs	r3, #2
 8000540:	9300      	str	r3, [sp, #0]
 8000542:	2300      	movs	r3, #0
 8000544:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000548:	490f      	ldr	r1, [pc, #60]	@ (8000588 <main+0xa8>)
 800054a:	4810      	ldr	r0, [pc, #64]	@ (800058c <main+0xac>)
 800054c:	f002 fd9a 	bl	8003084 <xTaskCreate>
  xTaskCreate(StartUartReceive, "UART_RX", 256, NULL, 2, NULL);
 8000550:	2300      	movs	r3, #0
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	2302      	movs	r3, #2
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2300      	movs	r3, #0
 800055a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800055e:	490c      	ldr	r1, [pc, #48]	@ (8000590 <main+0xb0>)
 8000560:	480c      	ldr	r0, [pc, #48]	@ (8000594 <main+0xb4>)
 8000562:	f002 fd8f 	bl	8003084 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000566:	f001 fe3b 	bl	80021e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	bf00      	nop
 800056c:	e7fd      	b.n	800056a <main+0x8a>
 800056e:	bf00      	nop
 8000570:	08004dc0 	.word	0x08004dc0
 8000574:	2000002c 	.word	0x2000002c
 8000578:	20000078 	.word	0x20000078
 800057c:	08004de8 	.word	0x08004de8
 8000580:	080007b9 	.word	0x080007b9
 8000584:	20000074 	.word	0x20000074
 8000588:	08004db0 	.word	0x08004db0
 800058c:	0800072d 	.word	0x0800072d
 8000590:	08004db8 	.word	0x08004db8
 8000594:	080006e1 	.word	0x080006e1

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	@ 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0320 	add.w	r3, r7, #32
 80005a2:	2230      	movs	r2, #48	@ 0x30
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f004 fbb6 	bl	8004d18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 030c 	add.w	r3, r7, #12
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
 80005c0:	4b23      	ldr	r3, [pc, #140]	@ (8000650 <SystemClock_Config+0xb8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c4:	4a22      	ldr	r2, [pc, #136]	@ (8000650 <SystemClock_Config+0xb8>)
 80005c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80005cc:	4b20      	ldr	r3, [pc, #128]	@ (8000650 <SystemClock_Config+0xb8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	60bb      	str	r3, [r7, #8]
 80005d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005d8:	2300      	movs	r3, #0
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000654 <SystemClock_Config+0xbc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000654 <SystemClock_Config+0xbc>)
 80005e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	4b19      	ldr	r3, [pc, #100]	@ (8000654 <SystemClock_Config+0xbc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fc:	2301      	movs	r3, #1
 80005fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000600:	2310      	movs	r3, #16
 8000602:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000604:	2300      	movs	r3, #0
 8000606:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 0320 	add.w	r3, r7, #32
 800060c:	4618      	mov	r0, r3
 800060e:	f000 fc95 	bl	8000f3c <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000618:	f000 f8d6 	bl	80007c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061c:	230f      	movs	r3, #15
 800061e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f000 fef8 	bl	800142c <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000642:	f000 f8c1 	bl	80007c8 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	@ 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800065c:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <MX_USART1_UART_Init+0x4c>)
 800065e:	4a12      	ldr	r2, [pc, #72]	@ (80006a8 <MX_USART1_UART_Init+0x50>)
 8000660:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000662:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <MX_USART1_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0c      	ldr	r3, [pc, #48]	@ (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0b      	ldr	r3, [pc, #44]	@ (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <MX_USART1_UART_Init+0x4c>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <MX_USART1_UART_Init+0x4c>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068e:	4805      	ldr	r0, [pc, #20]	@ (80006a4 <MX_USART1_UART_Init+0x4c>)
 8000690:	f001 f8ac 	bl	80017ec <HAL_UART_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800069a:	f000 f895 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000002c 	.word	0x2000002c
 80006a8:	40011000 	.word	0x40011000

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_GPIO_Init+0x30>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a08      	ldr	r2, [pc, #32]	@ (80006dc <MX_GPIO_Init+0x30>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_GPIO_Init+0x30>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <StartUartReceive>:

/* USER CODE BEGIN 4 */
void StartUartReceive(void *args) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
    uint8_t rx_char;
    for (;;) {
        // Blocking receive 1 byte (wait forever)
        if (HAL_UART_Receive(&huart1, &rx_char, 1, HAL_MAX_DELAY) == HAL_OK) {
 80006e8:	f107 010f 	add.w	r1, r7, #15
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	2201      	movs	r2, #1
 80006f2:	480c      	ldr	r0, [pc, #48]	@ (8000724 <StartUartReceive+0x44>)
 80006f4:	f001 f955 	bl	80019a2 <HAL_UART_Receive>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d1f4      	bne.n	80006e8 <StartUartReceive+0x8>
            // Send received byte to queue
            xQueueSend(uartQueue, &rx_char, portMAX_DELAY);
 80006fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <StartUartReceive+0x48>)
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	f107 010f 	add.w	r1, r7, #15
 8000706:	2300      	movs	r3, #0
 8000708:	f04f 32ff 	mov.w	r2, #4294967295
 800070c:	f002 f86a 	bl	80027e4 <xQueueGenericSend>
            xQueueSend(uartQueue, &rx_char, portMAX_DELAY);
 8000710:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <StartUartReceive+0x48>)
 8000712:	6818      	ldr	r0, [r3, #0]
 8000714:	f107 010f 	add.w	r1, r7, #15
 8000718:	2300      	movs	r3, #0
 800071a:	f04f 32ff 	mov.w	r2, #4294967295
 800071e:	f002 f861 	bl	80027e4 <xQueueGenericSend>
        if (HAL_UART_Receive(&huart1, &rx_char, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000722:	e7e1      	b.n	80006e8 <StartUartReceive+0x8>
 8000724:	2000002c 	.word	0x2000002c
 8000728:	20000078 	.word	0x20000078

0800072c <StartUartSend>:

        }
    }
}

void StartUartSend(void* args) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b0a4      	sub	sp, #144	@ 0x90
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    uint8_t tx_char;
    char msg_buffer[128]; // buffer to store all chars until the presence of \r\n
    uint16_t index = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

    for(;;) {
        if (xQueueReceive(uartQueue, &tx_char, portMAX_DELAY) == pdPASS) { // check if uartQueue received something if yes put it in tx_char
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <StartUartSend+0x84>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f107 018d 	add.w	r1, r7, #141	@ 0x8d
 8000742:	f04f 32ff 	mov.w	r2, #4294967295
 8000746:	4618      	mov	r0, r3
 8000748:	f002 f9ec 	bl	8002b24 <xQueueReceive>
 800074c:	4603      	mov	r3, r0
 800074e:	2b01      	cmp	r3, #1
 8000750:	d1f3      	bne.n	800073a <StartUartSend+0xe>
            // Store char in buffer
            msg_buffer[index++] = tx_char;
 8000752:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000756:	1c5a      	adds	r2, r3, #1
 8000758:	f8a7 208e 	strh.w	r2, [r7, #142]	@ 0x8e
 800075c:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 8000760:	3390      	adds	r3, #144	@ 0x90
 8000762:	443b      	add	r3, r7
 8000764:	f803 2c84 	strb.w	r2, [r3, #-132]

            // Check for \r\n at the end
            if (index >= 2 &&
 8000768:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800076c:	2b01      	cmp	r3, #1
 800076e:	d9e4      	bls.n	800073a <StartUartSend+0xe>
                msg_buffer[index-2] == '\r' &&
 8000770:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000774:	3b02      	subs	r3, #2
 8000776:	3390      	adds	r3, #144	@ 0x90
 8000778:	443b      	add	r3, r7
 800077a:	f813 3c84 	ldrb.w	r3, [r3, #-132]
            if (index >= 2 &&
 800077e:	2b0d      	cmp	r3, #13
 8000780:	d1db      	bne.n	800073a <StartUartSend+0xe>
                msg_buffer[index-1] == '\n') {
 8000782:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000786:	3b01      	subs	r3, #1
 8000788:	3390      	adds	r3, #144	@ 0x90
 800078a:	443b      	add	r3, r7
 800078c:	f813 3c84 	ldrb.w	r3, [r3, #-132]
                msg_buffer[index-2] == '\r' &&
 8000790:	2b0a      	cmp	r3, #10
 8000792:	d1d2      	bne.n	800073a <StartUartSend+0xe>

                // Send entire message at once
                HAL_UART_Transmit(&huart1, (uint8_t*)msg_buffer, index, HAL_MAX_DELAY);
 8000794:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8000798:	f107 010c 	add.w	r1, r7, #12
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <StartUartSend+0x88>)
 80007a2:	f001 f873 	bl	800188c <HAL_UART_Transmit>

                // Reset buffer
                index = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
        if (xQueueReceive(uartQueue, &tx_char, portMAX_DELAY) == pdPASS) { // check if uartQueue received something if yes put it in tx_char
 80007ac:	e7c5      	b.n	800073a <StartUartSend+0xe>
 80007ae:	bf00      	nop
 80007b0:	20000078 	.word	0x20000078
 80007b4:	2000002c 	.word	0x2000002c

080007b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f001 fdc5 	bl	8002350 <osDelay>
 80007c6:	e7fb      	b.n	80007c0 <StartDefaultTask+0x8>

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007cc:	b672      	cpsid	i
}
 80007ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d0:	bf00      	nop
 80007d2:	e7fd      	b.n	80007d0 <Error_Handler+0x8>

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <HAL_MspInit+0x54>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	4a11      	ldr	r2, [pc, #68]	@ (8000828 <HAL_MspInit+0x54>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <HAL_MspInit+0x54>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <HAL_MspInit+0x54>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000828 <HAL_MspInit+0x54>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	@ 0x40
 8000806:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <HAL_MspInit+0x54>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	210f      	movs	r1, #15
 8000816:	f06f 0001 	mvn.w	r0, #1
 800081a:	f000 f9e2 	bl	8000be2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	@ 0x28
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a19      	ldr	r2, [pc, #100]	@ (80008b0 <HAL_UART_MspInit+0x84>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d12c      	bne.n	80008a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <HAL_UART_MspInit+0x88>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000856:	4a17      	ldr	r2, [pc, #92]	@ (80008b4 <HAL_UART_MspInit+0x88>)
 8000858:	f043 0310 	orr.w	r3, r3, #16
 800085c:	6453      	str	r3, [r2, #68]	@ 0x44
 800085e:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <HAL_UART_MspInit+0x88>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	f003 0310 	and.w	r3, r3, #16
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <HAL_UART_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a10      	ldr	r2, [pc, #64]	@ (80008b4 <HAL_UART_MspInit+0x88>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <HAL_UART_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000886:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800088a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088c:	2302      	movs	r3, #2
 800088e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000894:	2303      	movs	r3, #3
 8000896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000898:	2307      	movs	r3, #7
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	f107 0314 	add.w	r3, r7, #20
 80008a0:	4619      	mov	r1, r3
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <HAL_UART_MspInit+0x8c>)
 80008a4:	f000 f9c6 	bl	8000c34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	@ 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40011000 	.word	0x40011000
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020000 	.word	0x40020000

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <NMI_Handler+0x4>

080008c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <MemManage_Handler+0x4>

080008d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <BusFault_Handler+0x4>

080008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <UsageFault_Handler+0x4>

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008f6:	f000 f897 	bl	8000a28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008fa:	f003 f98d 	bl	8003c18 <xTaskGetSchedulerState>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b01      	cmp	r3, #1
 8000902:	d001      	beq.n	8000908 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000904:	f003 ff88 	bl	8004818 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	@ (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000968 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000934:	f7ff ffea 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	@ (800096c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	@ (8000970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	@ (8000974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	@ (800097c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800095e:	f004 f9e3 	bl	8004d28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000962:	f7ff fdbd 	bl	80004e0 <main>
  bx  lr    
 8000966:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000968:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000974:	08004e34 	.word	0x08004e34
  ldr r2, =_sbss
 8000978:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800097c:	200049d0 	.word	0x200049d0

08000980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC_IRQHandler>
	...

08000984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000988:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0d      	ldr	r2, [pc, #52]	@ (80009c4 <HAL_Init+0x40>)
 800098e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000994:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <HAL_Init+0x40>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <HAL_Init+0x40>)
 800099a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800099e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a07      	ldr	r2, [pc, #28]	@ (80009c4 <HAL_Init+0x40>)
 80009a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f90d 	bl	8000bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b2:	200f      	movs	r0, #15
 80009b4:	f000 f808 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b8:	f7ff ff0c 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023c00 	.word	0x40023c00

080009c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_InitTick+0x54>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_InitTick+0x58>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009de:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f917 	bl	8000c1a <HAL_SYSTICK_Config>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00e      	b.n	8000a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d80a      	bhi.n	8000a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f000 f8ed 	bl	8000be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a08:	4a06      	ldr	r2, [pc, #24]	@ (8000a24 <HAL_InitTick+0x5c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e000      	b.n	8000a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000004 	.word	0x20000004

08000a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_IncTick+0x20>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_IncTick+0x24>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a04      	ldr	r2, [pc, #16]	@ (8000a4c <HAL_IncTick+0x24>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	2000007c 	.word	0x2000007c

08000a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b03      	ldr	r3, [pc, #12]	@ (8000a64 <HAL_GetTick+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	2000007c 	.word	0x2000007c

08000a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	@ (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	60d3      	str	r3, [r2, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	@ (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	@ (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	@ 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	@ 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b98:	d301      	bcc.n	8000b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00f      	b.n	8000bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <SysTick_Config+0x40>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba6:	210f      	movs	r1, #15
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f7ff ff8e 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <SysTick_Config+0x40>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb6:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <SysTick_Config+0x40>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000e010 	.word	0xe000e010

08000bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff47 	bl	8000a68 <__NVIC_SetPriorityGrouping>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b086      	sub	sp, #24
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf4:	f7ff ff5c 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	68b9      	ldr	r1, [r7, #8]
 8000bfe:	6978      	ldr	r0, [r7, #20]
 8000c00:	f7ff ff8e 	bl	8000b20 <NVIC_EncodePriority>
 8000c04:	4602      	mov	r2, r0
 8000c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff5d 	bl	8000acc <__NVIC_SetPriority>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f7ff ffb0 	bl	8000b88 <SysTick_Config>
 8000c28:	4603      	mov	r3, r0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
 8000c4e:	e159      	b.n	8000f04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c50:	2201      	movs	r2, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	697a      	ldr	r2, [r7, #20]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	f040 8148 	bne.w	8000efe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d005      	beq.n	8000c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d130      	bne.n	8000ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	091b      	lsrs	r3, r3, #4
 8000cd2:	f003 0201 	and.w	r2, r3, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0303 	and.w	r3, r3, #3
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d017      	beq.n	8000d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	689a      	ldr	r2, [r3, #8]
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 0303 	and.w	r3, r3, #3
 8000d2c:	2b02      	cmp	r3, #2
 8000d2e:	d123      	bne.n	8000d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	08da      	lsrs	r2, r3, #3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3208      	adds	r2, #8
 8000d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	220f      	movs	r2, #15
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	691a      	ldr	r2, [r3, #16]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	08da      	lsrs	r2, r3, #3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3208      	adds	r2, #8
 8000d72:	69b9      	ldr	r1, [r7, #24]
 8000d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	69ba      	ldr	r2, [r7, #24]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0203 	and.w	r2, r3, #3
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	f000 80a2 	beq.w	8000efe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b57      	ldr	r3, [pc, #348]	@ (8000f1c <HAL_GPIO_Init+0x2e8>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	4a56      	ldr	r2, [pc, #344]	@ (8000f1c <HAL_GPIO_Init+0x2e8>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dca:	4b54      	ldr	r3, [pc, #336]	@ (8000f1c <HAL_GPIO_Init+0x2e8>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dd6:	4a52      	ldr	r2, [pc, #328]	@ (8000f20 <HAL_GPIO_Init+0x2ec>)
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	3302      	adds	r3, #2
 8000dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	220f      	movs	r2, #15
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4013      	ands	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a49      	ldr	r2, [pc, #292]	@ (8000f24 <HAL_GPIO_Init+0x2f0>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d019      	beq.n	8000e36 <HAL_GPIO_Init+0x202>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a48      	ldr	r2, [pc, #288]	@ (8000f28 <HAL_GPIO_Init+0x2f4>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d013      	beq.n	8000e32 <HAL_GPIO_Init+0x1fe>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a47      	ldr	r2, [pc, #284]	@ (8000f2c <HAL_GPIO_Init+0x2f8>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d00d      	beq.n	8000e2e <HAL_GPIO_Init+0x1fa>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a46      	ldr	r2, [pc, #280]	@ (8000f30 <HAL_GPIO_Init+0x2fc>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d007      	beq.n	8000e2a <HAL_GPIO_Init+0x1f6>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4a45      	ldr	r2, [pc, #276]	@ (8000f34 <HAL_GPIO_Init+0x300>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d101      	bne.n	8000e26 <HAL_GPIO_Init+0x1f2>
 8000e22:	2304      	movs	r3, #4
 8000e24:	e008      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e26:	2307      	movs	r3, #7
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e004      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e002      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x204>
 8000e36:	2300      	movs	r3, #0
 8000e38:	69fa      	ldr	r2, [r7, #28]
 8000e3a:	f002 0203 	and.w	r2, r2, #3
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	4093      	lsls	r3, r2
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e48:	4935      	ldr	r1, [pc, #212]	@ (8000f20 <HAL_GPIO_Init+0x2ec>)
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e56:	4b38      	ldr	r3, [pc, #224]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4013      	ands	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7a:	4a2f      	ldr	r2, [pc, #188]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e80:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea4:	4a24      	ldr	r2, [pc, #144]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eaa:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ece:	4a1a      	ldr	r2, [pc, #104]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000ed0:	69bb      	ldr	r3, [r7, #24]
 8000ed2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3301      	adds	r3, #1
 8000f02:	61fb      	str	r3, [r7, #28]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	f67f aea2 	bls.w	8000c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3724      	adds	r7, #36	@ 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40013800 	.word	0x40013800
 8000f24:	40020000 	.word	0x40020000
 8000f28:	40020400 	.word	0x40020400
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	40020c00 	.word	0x40020c00
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40013c00 	.word	0x40013c00

08000f3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e267      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d075      	beq.n	8001046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f5a:	4b88      	ldr	r3, [pc, #544]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	f003 030c 	and.w	r3, r3, #12
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	d00c      	beq.n	8000f80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f66:	4b85      	ldr	r3, [pc, #532]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f6e:	2b08      	cmp	r3, #8
 8000f70:	d112      	bne.n	8000f98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f72:	4b82      	ldr	r3, [pc, #520]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f7e:	d10b      	bne.n	8000f98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f80:	4b7e      	ldr	r3, [pc, #504]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d05b      	beq.n	8001044 <HAL_RCC_OscConfig+0x108>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d157      	bne.n	8001044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e242      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa0:	d106      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x74>
 8000fa2:	4b76      	ldr	r3, [pc, #472]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a75      	ldr	r2, [pc, #468]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8000fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e01d      	b.n	8000fec <HAL_RCC_OscConfig+0xb0>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x98>
 8000fba:	4b70      	ldr	r3, [pc, #448]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a6f      	ldr	r2, [pc, #444]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8000fc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b6d      	ldr	r3, [pc, #436]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a6c      	ldr	r2, [pc, #432]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e00b      	b.n	8000fec <HAL_RCC_OscConfig+0xb0>
 8000fd4:	4b69      	ldr	r3, [pc, #420]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a68      	ldr	r2, [pc, #416]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8000fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b66      	ldr	r3, [pc, #408]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a65      	ldr	r2, [pc, #404]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8000fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d013      	beq.n	800101c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fd2c 	bl	8000a50 <HAL_GetTick>
 8000ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffa:	e008      	b.n	800100e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ffc:	f7ff fd28 	bl	8000a50 <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b64      	cmp	r3, #100	@ 0x64
 8001008:	d901      	bls.n	800100e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800100a:	2303      	movs	r3, #3
 800100c:	e207      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100e:	4b5b      	ldr	r3, [pc, #364]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f0      	beq.n	8000ffc <HAL_RCC_OscConfig+0xc0>
 800101a:	e014      	b.n	8001046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fd18 	bl	8000a50 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fd14 	bl	8000a50 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	@ 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e1f3      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001036:	4b51      	ldr	r3, [pc, #324]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f0      	bne.n	8001024 <HAL_RCC_OscConfig+0xe8>
 8001042:	e000      	b.n	8001046 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	2b00      	cmp	r3, #0
 8001050:	d063      	beq.n	800111a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001052:	4b4a      	ldr	r3, [pc, #296]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00b      	beq.n	8001076 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800105e:	4b47      	ldr	r3, [pc, #284]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001066:	2b08      	cmp	r3, #8
 8001068:	d11c      	bne.n	80010a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800106a:	4b44      	ldr	r3, [pc, #272]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d116      	bne.n	80010a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001076:	4b41      	ldr	r3, [pc, #260]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	d005      	beq.n	800108e <HAL_RCC_OscConfig+0x152>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d001      	beq.n	800108e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e1c7      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108e:	4b3b      	ldr	r3, [pc, #236]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	4937      	ldr	r1, [pc, #220]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a2:	e03a      	b.n	800111a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d020      	beq.n	80010ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ac:	4b34      	ldr	r3, [pc, #208]	@ (8001180 <HAL_RCC_OscConfig+0x244>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010b2:	f7ff fccd 	bl	8000a50 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ba:	f7ff fcc9 	bl	8000a50 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e1a8      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010cc:	4b2b      	ldr	r3, [pc, #172]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d8:	4b28      	ldr	r3, [pc, #160]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	4925      	ldr	r1, [pc, #148]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	600b      	str	r3, [r1, #0]
 80010ec:	e015      	b.n	800111a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010ee:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <HAL_RCC_OscConfig+0x244>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f4:	f7ff fcac 	bl	8000a50 <HAL_GetTick>
 80010f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fa:	e008      	b.n	800110e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010fc:	f7ff fca8 	bl	8000a50 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d901      	bls.n	800110e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e187      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110e:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b00      	cmp	r3, #0
 8001118:	d1f0      	bne.n	80010fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d036      	beq.n	8001194 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d016      	beq.n	800115c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800112e:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <HAL_RCC_OscConfig+0x248>)
 8001130:	2201      	movs	r2, #1
 8001132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001134:	f7ff fc8c 	bl	8000a50 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800113c:	f7ff fc88 	bl	8000a50 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e167      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <HAL_RCC_OscConfig+0x240>)
 8001150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f0      	beq.n	800113c <HAL_RCC_OscConfig+0x200>
 800115a:	e01b      	b.n	8001194 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <HAL_RCC_OscConfig+0x248>)
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001162:	f7ff fc75 	bl	8000a50 <HAL_GetTick>
 8001166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001168:	e00e      	b.n	8001188 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800116a:	f7ff fc71 	bl	8000a50 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d907      	bls.n	8001188 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e150      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
 800117c:	40023800 	.word	0x40023800
 8001180:	42470000 	.word	0x42470000
 8001184:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001188:	4b88      	ldr	r3, [pc, #544]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 800118a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	2b00      	cmp	r3, #0
 8001192:	d1ea      	bne.n	800116a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 8097 	beq.w	80012d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011a6:	4b81      	ldr	r3, [pc, #516]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10f      	bne.n	80011d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	4b7d      	ldr	r3, [pc, #500]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	4a7c      	ldr	r2, [pc, #496]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 80011bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c2:	4b7a      	ldr	r3, [pc, #488]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ce:	2301      	movs	r3, #1
 80011d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d2:	4b77      	ldr	r3, [pc, #476]	@ (80013b0 <HAL_RCC_OscConfig+0x474>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d118      	bne.n	8001210 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011de:	4b74      	ldr	r3, [pc, #464]	@ (80013b0 <HAL_RCC_OscConfig+0x474>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a73      	ldr	r2, [pc, #460]	@ (80013b0 <HAL_RCC_OscConfig+0x474>)
 80011e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011ea:	f7ff fc31 	bl	8000a50 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011f2:	f7ff fc2d 	bl	8000a50 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e10c      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001204:	4b6a      	ldr	r3, [pc, #424]	@ (80013b0 <HAL_RCC_OscConfig+0x474>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x2ea>
 8001218:	4b64      	ldr	r3, [pc, #400]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 800121a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800121c:	4a63      	ldr	r2, [pc, #396]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	6713      	str	r3, [r2, #112]	@ 0x70
 8001224:	e01c      	b.n	8001260 <HAL_RCC_OscConfig+0x324>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b05      	cmp	r3, #5
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x30c>
 800122e:	4b5f      	ldr	r3, [pc, #380]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 8001230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001232:	4a5e      	ldr	r2, [pc, #376]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	6713      	str	r3, [r2, #112]	@ 0x70
 800123a:	4b5c      	ldr	r3, [pc, #368]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 800123c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800123e:	4a5b      	ldr	r2, [pc, #364]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6713      	str	r3, [r2, #112]	@ 0x70
 8001246:	e00b      	b.n	8001260 <HAL_RCC_OscConfig+0x324>
 8001248:	4b58      	ldr	r3, [pc, #352]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 800124a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800124c:	4a57      	ldr	r2, [pc, #348]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 800124e:	f023 0301 	bic.w	r3, r3, #1
 8001252:	6713      	str	r3, [r2, #112]	@ 0x70
 8001254:	4b55      	ldr	r3, [pc, #340]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 8001256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001258:	4a54      	ldr	r2, [pc, #336]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 800125a:	f023 0304 	bic.w	r3, r3, #4
 800125e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d015      	beq.n	8001294 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001268:	f7ff fbf2 	bl	8000a50 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800126e:	e00a      	b.n	8001286 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001270:	f7ff fbee 	bl	8000a50 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800127e:	4293      	cmp	r3, r2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e0cb      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001286:	4b49      	ldr	r3, [pc, #292]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 8001288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0ee      	beq.n	8001270 <HAL_RCC_OscConfig+0x334>
 8001292:	e014      	b.n	80012be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001294:	f7ff fbdc 	bl	8000a50 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129a:	e00a      	b.n	80012b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800129c:	f7ff fbd8 	bl	8000a50 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e0b5      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012b2:	4b3e      	ldr	r3, [pc, #248]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 80012b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1ee      	bne.n	800129c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d105      	bne.n	80012d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012c4:	4b39      	ldr	r3, [pc, #228]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c8:	4a38      	ldr	r2, [pc, #224]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 80012ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80a1 	beq.w	800141c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012da:	4b34      	ldr	r3, [pc, #208]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b08      	cmp	r3, #8
 80012e4:	d05c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d141      	bne.n	8001372 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ee:	4b31      	ldr	r3, [pc, #196]	@ (80013b4 <HAL_RCC_OscConfig+0x478>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff fbac 	bl	8000a50 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012fc:	f7ff fba8 	bl	8000a50 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e087      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800130e:	4b27      	ldr	r3, [pc, #156]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69da      	ldr	r2, [r3, #28]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001328:	019b      	lsls	r3, r3, #6
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001330:	085b      	lsrs	r3, r3, #1
 8001332:	3b01      	subs	r3, #1
 8001334:	041b      	lsls	r3, r3, #16
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133c:	061b      	lsls	r3, r3, #24
 800133e:	491b      	ldr	r1, [pc, #108]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001344:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <HAL_RCC_OscConfig+0x478>)
 8001346:	2201      	movs	r2, #1
 8001348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134a:	f7ff fb81 	bl	8000a50 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001352:	f7ff fb7d 	bl	8000a50 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e05c      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001364:	4b11      	ldr	r3, [pc, #68]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x416>
 8001370:	e054      	b.n	800141c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001372:	4b10      	ldr	r3, [pc, #64]	@ (80013b4 <HAL_RCC_OscConfig+0x478>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fb6a 	bl	8000a50 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001380:	f7ff fb66 	bl	8000a50 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e045      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001392:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_RCC_OscConfig+0x470>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x444>
 800139e:	e03d      	b.n	800141c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d107      	bne.n	80013b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e038      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000
 80013b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001428 <HAL_RCC_OscConfig+0x4ec>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d028      	beq.n	8001418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d121      	bne.n	8001418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013de:	429a      	cmp	r2, r3
 80013e0:	d11a      	bne.n	8001418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013e8:	4013      	ands	r3, r2
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d111      	bne.n	8001418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013fe:	085b      	lsrs	r3, r3, #1
 8001400:	3b01      	subs	r3, #1
 8001402:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001404:	429a      	cmp	r2, r3
 8001406:	d107      	bne.n	8001418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001412:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001414:	429a      	cmp	r2, r3
 8001416:	d001      	beq.n	800141c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e000      	b.n	800141e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0cc      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001440:	4b68      	ldr	r3, [pc, #416]	@ (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d90c      	bls.n	8001468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b65      	ldr	r3, [pc, #404]	@ (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001456:	4b63      	ldr	r3, [pc, #396]	@ (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0b8      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001480:	4b59      	ldr	r3, [pc, #356]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	4a58      	ldr	r2, [pc, #352]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800148a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001498:	4b53      	ldr	r3, [pc, #332]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	4a52      	ldr	r2, [pc, #328]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a4:	4b50      	ldr	r3, [pc, #320]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	494d      	ldr	r1, [pc, #308]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	4313      	orrs	r3, r2
 80014b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d044      	beq.n	800154c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d107      	bne.n	80014da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	4b47      	ldr	r3, [pc, #284]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d119      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e07f      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d003      	beq.n	80014ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014e6:	2b03      	cmp	r3, #3
 80014e8:	d107      	bne.n	80014fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ea:	4b3f      	ldr	r3, [pc, #252]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d109      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e06f      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fa:	4b3b      	ldr	r3, [pc, #236]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e067      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800150a:	4b37      	ldr	r3, [pc, #220]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f023 0203 	bic.w	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4934      	ldr	r1, [pc, #208]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	4313      	orrs	r3, r2
 800151a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800151c:	f7ff fa98 	bl	8000a50 <HAL_GetTick>
 8001520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001522:	e00a      	b.n	800153a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001524:	f7ff fa94 	bl	8000a50 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e04f      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153a:	4b2b      	ldr	r3, [pc, #172]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 020c 	and.w	r2, r3, #12
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	429a      	cmp	r2, r3
 800154a:	d1eb      	bne.n	8001524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800154c:	4b25      	ldr	r3, [pc, #148]	@ (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d20c      	bcs.n	8001574 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001562:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e032      	b.n	80015da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001580:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	4916      	ldr	r1, [pc, #88]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	4313      	orrs	r3, r2
 8001590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d009      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800159e:	4b12      	ldr	r3, [pc, #72]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	490e      	ldr	r1, [pc, #56]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015b2:	f000 f821 	bl	80015f8 <HAL_RCC_GetSysClockFreq>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	490a      	ldr	r1, [pc, #40]	@ (80015ec <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	5ccb      	ldrb	r3, [r1, r3]
 80015c6:	fa22 f303 	lsr.w	r3, r2, r3
 80015ca:	4a09      	ldr	r2, [pc, #36]	@ (80015f0 <HAL_RCC_ClockConfig+0x1c4>)
 80015cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_RCC_ClockConfig+0x1c8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff f9f8 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023c00 	.word	0x40023c00
 80015e8:	40023800 	.word	0x40023800
 80015ec:	08004e0c 	.word	0x08004e0c
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015fc:	b090      	sub	sp, #64	@ 0x40
 80015fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001610:	4b59      	ldr	r3, [pc, #356]	@ (8001778 <HAL_RCC_GetSysClockFreq+0x180>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d00d      	beq.n	8001638 <HAL_RCC_GetSysClockFreq+0x40>
 800161c:	2b08      	cmp	r3, #8
 800161e:	f200 80a1 	bhi.w	8001764 <HAL_RCC_GetSysClockFreq+0x16c>
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <HAL_RCC_GetSysClockFreq+0x34>
 8001626:	2b04      	cmp	r3, #4
 8001628:	d003      	beq.n	8001632 <HAL_RCC_GetSysClockFreq+0x3a>
 800162a:	e09b      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800162c:	4b53      	ldr	r3, [pc, #332]	@ (800177c <HAL_RCC_GetSysClockFreq+0x184>)
 800162e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001630:	e09b      	b.n	800176a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001632:	4b53      	ldr	r3, [pc, #332]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x188>)
 8001634:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001636:	e098      	b.n	800176a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001638:	4b4f      	ldr	r3, [pc, #316]	@ (8001778 <HAL_RCC_GetSysClockFreq+0x180>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001640:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001642:	4b4d      	ldr	r3, [pc, #308]	@ (8001778 <HAL_RCC_GetSysClockFreq+0x180>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d028      	beq.n	80016a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164e:	4b4a      	ldr	r3, [pc, #296]	@ (8001778 <HAL_RCC_GetSysClockFreq+0x180>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	099b      	lsrs	r3, r3, #6
 8001654:	2200      	movs	r2, #0
 8001656:	623b      	str	r3, [r7, #32]
 8001658:	627a      	str	r2, [r7, #36]	@ 0x24
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001660:	2100      	movs	r1, #0
 8001662:	4b47      	ldr	r3, [pc, #284]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x188>)
 8001664:	fb03 f201 	mul.w	r2, r3, r1
 8001668:	2300      	movs	r3, #0
 800166a:	fb00 f303 	mul.w	r3, r0, r3
 800166e:	4413      	add	r3, r2
 8001670:	4a43      	ldr	r2, [pc, #268]	@ (8001780 <HAL_RCC_GetSysClockFreq+0x188>)
 8001672:	fba0 1202 	umull	r1, r2, r0, r2
 8001676:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001678:	460a      	mov	r2, r1
 800167a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800167c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800167e:	4413      	add	r3, r2
 8001680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001682:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001684:	2200      	movs	r2, #0
 8001686:	61bb      	str	r3, [r7, #24]
 8001688:	61fa      	str	r2, [r7, #28]
 800168a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800168e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001692:	f7fe fdad 	bl	80001f0 <__aeabi_uldivmod>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4613      	mov	r3, r2
 800169c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800169e:	e053      	b.n	8001748 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a0:	4b35      	ldr	r3, [pc, #212]	@ (8001778 <HAL_RCC_GetSysClockFreq+0x180>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	2200      	movs	r2, #0
 80016a8:	613b      	str	r3, [r7, #16]
 80016aa:	617a      	str	r2, [r7, #20]
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016b2:	f04f 0b00 	mov.w	fp, #0
 80016b6:	4652      	mov	r2, sl
 80016b8:	465b      	mov	r3, fp
 80016ba:	f04f 0000 	mov.w	r0, #0
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	0159      	lsls	r1, r3, #5
 80016c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016c8:	0150      	lsls	r0, r2, #5
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	ebb2 080a 	subs.w	r8, r2, sl
 80016d2:	eb63 090b 	sbc.w	r9, r3, fp
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80016e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80016e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80016ea:	ebb2 0408 	subs.w	r4, r2, r8
 80016ee:	eb63 0509 	sbc.w	r5, r3, r9
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	00eb      	lsls	r3, r5, #3
 80016fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001700:	00e2      	lsls	r2, r4, #3
 8001702:	4614      	mov	r4, r2
 8001704:	461d      	mov	r5, r3
 8001706:	eb14 030a 	adds.w	r3, r4, sl
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	eb45 030b 	adc.w	r3, r5, fp
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800171e:	4629      	mov	r1, r5
 8001720:	028b      	lsls	r3, r1, #10
 8001722:	4621      	mov	r1, r4
 8001724:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001728:	4621      	mov	r1, r4
 800172a:	028a      	lsls	r2, r1, #10
 800172c:	4610      	mov	r0, r2
 800172e:	4619      	mov	r1, r3
 8001730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001732:	2200      	movs	r2, #0
 8001734:	60bb      	str	r3, [r7, #8]
 8001736:	60fa      	str	r2, [r7, #12]
 8001738:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800173c:	f7fe fd58 	bl	80001f0 <__aeabi_uldivmod>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4613      	mov	r3, r2
 8001746:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <HAL_RCC_GetSysClockFreq+0x180>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	0c1b      	lsrs	r3, r3, #16
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	3301      	adds	r3, #1
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001758:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800175a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800175c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001760:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001762:	e002      	b.n	800176a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001764:	4b05      	ldr	r3, [pc, #20]	@ (800177c <HAL_RCC_GetSysClockFreq+0x184>)
 8001766:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001768:	bf00      	nop
    }
  }
  return sysclockfreq;
 800176a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800176c:	4618      	mov	r0, r3
 800176e:	3740      	adds	r7, #64	@ 0x40
 8001770:	46bd      	mov	sp, r7
 8001772:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800
 800177c:	00f42400 	.word	0x00f42400
 8001780:	017d7840 	.word	0x017d7840

08001784 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <HAL_RCC_GetHCLKFreq+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000000 	.word	0x20000000

0800179c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017a0:	f7ff fff0 	bl	8001784 <HAL_RCC_GetHCLKFreq>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b05      	ldr	r3, [pc, #20]	@ (80017bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	0a9b      	lsrs	r3, r3, #10
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	4903      	ldr	r1, [pc, #12]	@ (80017c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017b2:	5ccb      	ldrb	r3, [r1, r3]
 80017b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	08004e1c 	.word	0x08004e1c

080017c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017c8:	f7ff ffdc 	bl	8001784 <HAL_RCC_GetHCLKFreq>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	0b5b      	lsrs	r3, r3, #13
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	4903      	ldr	r1, [pc, #12]	@ (80017e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017da:	5ccb      	ldrb	r3, [r1, r3]
 80017dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40023800 	.word	0x40023800
 80017e8:	08004e1c 	.word	0x08004e1c

080017ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e042      	b.n	8001884 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d106      	bne.n	8001818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff f80a 	bl	800082c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2224      	movs	r2, #36	@ 0x24
 800181c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800182e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 fa09 	bl	8001c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001844:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001854:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001864:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2220      	movs	r2, #32
 8001870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2220      	movs	r2, #32
 8001878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	@ 0x28
 8001890:	af02      	add	r7, sp, #8
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	4613      	mov	r3, r2
 800189a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	d175      	bne.n	8001998 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <HAL_UART_Transmit+0x2c>
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e06e      	b.n	800199a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2221      	movs	r2, #33	@ 0x21
 80018c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018ca:	f7ff f8c1 	bl	8000a50 <HAL_GetTick>
 80018ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	88fa      	ldrh	r2, [r7, #6]
 80018d4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	88fa      	ldrh	r2, [r7, #6]
 80018da:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018e4:	d108      	bne.n	80018f8 <HAL_UART_Transmit+0x6c>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d104      	bne.n	80018f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	e003      	b.n	8001900 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001900:	e02e      	b.n	8001960 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2200      	movs	r2, #0
 800190a:	2180      	movs	r1, #128	@ 0x80
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f8df 	bl	8001ad0 <UART_WaitOnFlagUntilTimeout>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2220      	movs	r2, #32
 800191c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e03a      	b.n	800199a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d10b      	bne.n	8001942 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001938:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	3302      	adds	r3, #2
 800193e:	61bb      	str	r3, [r7, #24]
 8001940:	e007      	b.n	8001952 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	3301      	adds	r3, #1
 8001950:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001956:	b29b      	uxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001964:	b29b      	uxth	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1cb      	bne.n	8001902 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2200      	movs	r2, #0
 8001972:	2140      	movs	r1, #64	@ 0x40
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f000 f8ab 	bl	8001ad0 <UART_WaitOnFlagUntilTimeout>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2220      	movs	r2, #32
 8001984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e006      	b.n	800199a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2220      	movs	r2, #32
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001994:	2300      	movs	r3, #0
 8001996:	e000      	b.n	800199a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001998:	2302      	movs	r3, #2
  }
}
 800199a:	4618      	mov	r0, r3
 800199c:	3720      	adds	r7, #32
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b08a      	sub	sp, #40	@ 0x28
 80019a6:	af02      	add	r7, sp, #8
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	4613      	mov	r3, r2
 80019b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b20      	cmp	r3, #32
 80019c0:	f040 8081 	bne.w	8001ac6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <HAL_UART_Receive+0x2e>
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d101      	bne.n	80019d4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e079      	b.n	8001ac8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	2222      	movs	r2, #34	@ 0x22
 80019de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2200      	movs	r2, #0
 80019e6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019e8:	f7ff f832 	bl	8000a50 <HAL_GetTick>
 80019ec:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	88fa      	ldrh	r2, [r7, #6]
 80019f2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	88fa      	ldrh	r2, [r7, #6]
 80019f8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a02:	d108      	bne.n	8001a16 <HAL_UART_Receive+0x74>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d104      	bne.n	8001a16 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
 8001a14:	e003      	b.n	8001a1e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001a1e:	e047      	b.n	8001ab0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	2200      	movs	r2, #0
 8001a28:	2120      	movs	r1, #32
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 f850 	bl	8001ad0 <UART_WaitOnFlagUntilTimeout>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d005      	beq.n	8001a42 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e042      	b.n	8001ac8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d10c      	bne.n	8001a62 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	e01f      	b.n	8001aa2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a6a:	d007      	beq.n	8001a7c <HAL_UART_Receive+0xda>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10a      	bne.n	8001a8a <HAL_UART_Receive+0xe8>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d106      	bne.n	8001a8a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e008      	b.n	8001a9c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1b2      	bne.n	8001a20 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2220      	movs	r2, #32
 8001abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e000      	b.n	8001ac8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001ac6:	2302      	movs	r3, #2
  }
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	4613      	mov	r3, r2
 8001ade:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ae0:	e03b      	b.n	8001b5a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae2:	6a3b      	ldr	r3, [r7, #32]
 8001ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae8:	d037      	beq.n	8001b5a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aea:	f7fe ffb1 	bl	8000a50 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	6a3a      	ldr	r2, [r7, #32]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d302      	bcc.n	8001b00 <UART_WaitOnFlagUntilTimeout+0x30>
 8001afa:	6a3b      	ldr	r3, [r7, #32]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e03a      	b.n	8001b7a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d023      	beq.n	8001b5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	2b80      	cmp	r3, #128	@ 0x80
 8001b16:	d020      	beq.n	8001b5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b40      	cmp	r3, #64	@ 0x40
 8001b1c:	d01d      	beq.n	8001b5a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0308 	and.w	r3, r3, #8
 8001b28:	2b08      	cmp	r3, #8
 8001b2a:	d116      	bne.n	8001b5a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	617b      	str	r3, [r7, #20]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f81d 	bl	8001b82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00f      	b.n	8001b7a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	4013      	ands	r3, r2
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	461a      	mov	r2, r3
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d0b4      	beq.n	8001ae2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b095      	sub	sp, #84	@ 0x54
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	330c      	adds	r3, #12
 8001b90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b94:	e853 3f00 	ldrex	r3, [r3]
 8001b98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001baa:	643a      	str	r2, [r7, #64]	@ 0x40
 8001bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001bb0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001bb2:	e841 2300 	strex	r3, r2, [r1]
 8001bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1e5      	bne.n	8001b8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	3314      	adds	r3, #20
 8001bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	e853 3f00 	ldrex	r3, [r3]
 8001bcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	3314      	adds	r3, #20
 8001bdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001be2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001be4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001be6:	e841 2300 	strex	r3, r2, [r1]
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1e5      	bne.n	8001bbe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d119      	bne.n	8001c2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	330c      	adds	r3, #12
 8001c00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	e853 3f00 	ldrex	r3, [r3]
 8001c08:	60bb      	str	r3, [r7, #8]
   return(result);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	f023 0310 	bic.w	r3, r3, #16
 8001c10:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	330c      	adds	r3, #12
 8001c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c1a:	61ba      	str	r2, [r7, #24]
 8001c1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c1e:	6979      	ldr	r1, [r7, #20]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	e841 2300 	strex	r3, r2, [r1]
 8001c26:	613b      	str	r3, [r7, #16]
   return(result);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1e5      	bne.n	8001bfa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2220      	movs	r2, #32
 8001c32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001c3c:	bf00      	nop
 8001c3e:	3754      	adds	r7, #84	@ 0x54
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c4c:	b0c0      	sub	sp, #256	@ 0x100
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c64:	68d9      	ldr	r1, [r3, #12]
 8001c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	ea40 0301 	orr.w	r3, r0, r1
 8001c70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001ca0:	f021 010c 	bic.w	r1, r1, #12
 8001ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cc2:	6999      	ldr	r1, [r3, #24]
 8001cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	ea40 0301 	orr.w	r3, r0, r1
 8001cce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b8f      	ldr	r3, [pc, #572]	@ (8001f14 <UART_SetConfig+0x2cc>)
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d005      	beq.n	8001ce8 <UART_SetConfig+0xa0>
 8001cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8001f18 <UART_SetConfig+0x2d0>)
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d104      	bne.n	8001cf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ce8:	f7ff fd6c 	bl	80017c4 <HAL_RCC_GetPCLK2Freq>
 8001cec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001cf0:	e003      	b.n	8001cfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001cf2:	f7ff fd53 	bl	800179c <HAL_RCC_GetPCLK1Freq>
 8001cf6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d04:	f040 810c 	bne.w	8001f20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001d12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001d16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	462b      	mov	r3, r5
 8001d1e:	1891      	adds	r1, r2, r2
 8001d20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001d22:	415b      	adcs	r3, r3
 8001d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d2a:	4621      	mov	r1, r4
 8001d2c:	eb12 0801 	adds.w	r8, r2, r1
 8001d30:	4629      	mov	r1, r5
 8001d32:	eb43 0901 	adc.w	r9, r3, r1
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d4a:	4690      	mov	r8, r2
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	4623      	mov	r3, r4
 8001d50:	eb18 0303 	adds.w	r3, r8, r3
 8001d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001d58:	462b      	mov	r3, r5
 8001d5a:	eb49 0303 	adc.w	r3, r9, r3
 8001d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001d6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001d72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001d76:	460b      	mov	r3, r1
 8001d78:	18db      	adds	r3, r3, r3
 8001d7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	eb42 0303 	adc.w	r3, r2, r3
 8001d82:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001d88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001d8c:	f7fe fa30 	bl	80001f0 <__aeabi_uldivmod>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4b61      	ldr	r3, [pc, #388]	@ (8001f1c <UART_SetConfig+0x2d4>)
 8001d96:	fba3 2302 	umull	r2, r3, r3, r2
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	011c      	lsls	r4, r3, #4
 8001d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001da2:	2200      	movs	r2, #0
 8001da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001da8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001dac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001db0:	4642      	mov	r2, r8
 8001db2:	464b      	mov	r3, r9
 8001db4:	1891      	adds	r1, r2, r2
 8001db6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001db8:	415b      	adcs	r3, r3
 8001dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001dc0:	4641      	mov	r1, r8
 8001dc2:	eb12 0a01 	adds.w	sl, r2, r1
 8001dc6:	4649      	mov	r1, r9
 8001dc8:	eb43 0b01 	adc.w	fp, r3, r1
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	f04f 0300 	mov.w	r3, #0
 8001dd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001dd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001de0:	4692      	mov	sl, r2
 8001de2:	469b      	mov	fp, r3
 8001de4:	4643      	mov	r3, r8
 8001de6:	eb1a 0303 	adds.w	r3, sl, r3
 8001dea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001dee:	464b      	mov	r3, r9
 8001df0:	eb4b 0303 	adc.w	r3, fp, r3
 8001df4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001e04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001e08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	18db      	adds	r3, r3, r3
 8001e10:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e12:	4613      	mov	r3, r2
 8001e14:	eb42 0303 	adc.w	r3, r2, r3
 8001e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001e22:	f7fe f9e5 	bl	80001f0 <__aeabi_uldivmod>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001f1c <UART_SetConfig+0x2d4>)
 8001e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2264      	movs	r2, #100	@ 0x64
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	1acb      	subs	r3, r1, r3
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001e42:	4b36      	ldr	r3, [pc, #216]	@ (8001f1c <UART_SetConfig+0x2d4>)
 8001e44:	fba3 2302 	umull	r2, r3, r3, r2
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001e50:	441c      	add	r4, r3
 8001e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e56:	2200      	movs	r2, #0
 8001e58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001e60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001e64:	4642      	mov	r2, r8
 8001e66:	464b      	mov	r3, r9
 8001e68:	1891      	adds	r1, r2, r2
 8001e6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001e6c:	415b      	adcs	r3, r3
 8001e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e74:	4641      	mov	r1, r8
 8001e76:	1851      	adds	r1, r2, r1
 8001e78:	6339      	str	r1, [r7, #48]	@ 0x30
 8001e7a:	4649      	mov	r1, r9
 8001e7c:	414b      	adcs	r3, r1
 8001e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f04f 0300 	mov.w	r3, #0
 8001e88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001e8c:	4659      	mov	r1, fp
 8001e8e:	00cb      	lsls	r3, r1, #3
 8001e90:	4651      	mov	r1, sl
 8001e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e96:	4651      	mov	r1, sl
 8001e98:	00ca      	lsls	r2, r1, #3
 8001e9a:	4610      	mov	r0, r2
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4642      	mov	r2, r8
 8001ea2:	189b      	adds	r3, r3, r2
 8001ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001ea8:	464b      	mov	r3, r9
 8001eaa:	460a      	mov	r2, r1
 8001eac:	eb42 0303 	adc.w	r3, r2, r3
 8001eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001ec0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001ec8:	460b      	mov	r3, r1
 8001eca:	18db      	adds	r3, r3, r3
 8001ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ece:	4613      	mov	r3, r2
 8001ed0:	eb42 0303 	adc.w	r3, r2, r3
 8001ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001eda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001ede:	f7fe f987 	bl	80001f0 <__aeabi_uldivmod>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <UART_SetConfig+0x2d4>)
 8001ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8001eec:	095b      	lsrs	r3, r3, #5
 8001eee:	2164      	movs	r1, #100	@ 0x64
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	3332      	adds	r3, #50	@ 0x32
 8001efa:	4a08      	ldr	r2, [pc, #32]	@ (8001f1c <UART_SetConfig+0x2d4>)
 8001efc:	fba2 2303 	umull	r2, r3, r2, r3
 8001f00:	095b      	lsrs	r3, r3, #5
 8001f02:	f003 0207 	and.w	r2, r3, #7
 8001f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4422      	add	r2, r4
 8001f0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f10:	e106      	b.n	8002120 <UART_SetConfig+0x4d8>
 8001f12:	bf00      	nop
 8001f14:	40011000 	.word	0x40011000
 8001f18:	40011400 	.word	0x40011400
 8001f1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f24:	2200      	movs	r2, #0
 8001f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001f2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001f2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001f32:	4642      	mov	r2, r8
 8001f34:	464b      	mov	r3, r9
 8001f36:	1891      	adds	r1, r2, r2
 8001f38:	6239      	str	r1, [r7, #32]
 8001f3a:	415b      	adcs	r3, r3
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f42:	4641      	mov	r1, r8
 8001f44:	1854      	adds	r4, r2, r1
 8001f46:	4649      	mov	r1, r9
 8001f48:	eb43 0501 	adc.w	r5, r3, r1
 8001f4c:	f04f 0200 	mov.w	r2, #0
 8001f50:	f04f 0300 	mov.w	r3, #0
 8001f54:	00eb      	lsls	r3, r5, #3
 8001f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f5a:	00e2      	lsls	r2, r4, #3
 8001f5c:	4614      	mov	r4, r2
 8001f5e:	461d      	mov	r5, r3
 8001f60:	4643      	mov	r3, r8
 8001f62:	18e3      	adds	r3, r4, r3
 8001f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f68:	464b      	mov	r3, r9
 8001f6a:	eb45 0303 	adc.w	r3, r5, r3
 8001f6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f8e:	4629      	mov	r1, r5
 8001f90:	008b      	lsls	r3, r1, #2
 8001f92:	4621      	mov	r1, r4
 8001f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f98:	4621      	mov	r1, r4
 8001f9a:	008a      	lsls	r2, r1, #2
 8001f9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001fa0:	f7fe f926 	bl	80001f0 <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4b60      	ldr	r3, [pc, #384]	@ (800212c <UART_SetConfig+0x4e4>)
 8001faa:	fba3 2302 	umull	r2, r3, r3, r2
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	011c      	lsls	r4, r3, #4
 8001fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001fbc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001fc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001fc4:	4642      	mov	r2, r8
 8001fc6:	464b      	mov	r3, r9
 8001fc8:	1891      	adds	r1, r2, r2
 8001fca:	61b9      	str	r1, [r7, #24]
 8001fcc:	415b      	adcs	r3, r3
 8001fce:	61fb      	str	r3, [r7, #28]
 8001fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fd4:	4641      	mov	r1, r8
 8001fd6:	1851      	adds	r1, r2, r1
 8001fd8:	6139      	str	r1, [r7, #16]
 8001fda:	4649      	mov	r1, r9
 8001fdc:	414b      	adcs	r3, r1
 8001fde:	617b      	str	r3, [r7, #20]
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001fec:	4659      	mov	r1, fp
 8001fee:	00cb      	lsls	r3, r1, #3
 8001ff0:	4651      	mov	r1, sl
 8001ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ff6:	4651      	mov	r1, sl
 8001ff8:	00ca      	lsls	r2, r1, #3
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	4642      	mov	r2, r8
 8002002:	189b      	adds	r3, r3, r2
 8002004:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002008:	464b      	mov	r3, r9
 800200a:	460a      	mov	r2, r1
 800200c:	eb42 0303 	adc.w	r3, r2, r3
 8002010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800201e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800202c:	4649      	mov	r1, r9
 800202e:	008b      	lsls	r3, r1, #2
 8002030:	4641      	mov	r1, r8
 8002032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002036:	4641      	mov	r1, r8
 8002038:	008a      	lsls	r2, r1, #2
 800203a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800203e:	f7fe f8d7 	bl	80001f0 <__aeabi_uldivmod>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4611      	mov	r1, r2
 8002048:	4b38      	ldr	r3, [pc, #224]	@ (800212c <UART_SetConfig+0x4e4>)
 800204a:	fba3 2301 	umull	r2, r3, r3, r1
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2264      	movs	r2, #100	@ 0x64
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	1acb      	subs	r3, r1, r3
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	3332      	adds	r3, #50	@ 0x32
 800205c:	4a33      	ldr	r2, [pc, #204]	@ (800212c <UART_SetConfig+0x4e4>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	095b      	lsrs	r3, r3, #5
 8002064:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002068:	441c      	add	r4, r3
 800206a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800206e:	2200      	movs	r2, #0
 8002070:	673b      	str	r3, [r7, #112]	@ 0x70
 8002072:	677a      	str	r2, [r7, #116]	@ 0x74
 8002074:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002078:	4642      	mov	r2, r8
 800207a:	464b      	mov	r3, r9
 800207c:	1891      	adds	r1, r2, r2
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	415b      	adcs	r3, r3
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002088:	4641      	mov	r1, r8
 800208a:	1851      	adds	r1, r2, r1
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	4649      	mov	r1, r9
 8002090:	414b      	adcs	r3, r1
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	f04f 0300 	mov.w	r3, #0
 800209c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80020a0:	4659      	mov	r1, fp
 80020a2:	00cb      	lsls	r3, r1, #3
 80020a4:	4651      	mov	r1, sl
 80020a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020aa:	4651      	mov	r1, sl
 80020ac:	00ca      	lsls	r2, r1, #3
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	4642      	mov	r2, r8
 80020b6:	189b      	adds	r3, r3, r2
 80020b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020ba:	464b      	mov	r3, r9
 80020bc:	460a      	mov	r2, r1
 80020be:	eb42 0303 	adc.w	r3, r2, r3
 80020c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80020c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80020ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80020dc:	4649      	mov	r1, r9
 80020de:	008b      	lsls	r3, r1, #2
 80020e0:	4641      	mov	r1, r8
 80020e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020e6:	4641      	mov	r1, r8
 80020e8:	008a      	lsls	r2, r1, #2
 80020ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80020ee:	f7fe f87f 	bl	80001f0 <__aeabi_uldivmod>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4b0d      	ldr	r3, [pc, #52]	@ (800212c <UART_SetConfig+0x4e4>)
 80020f8:	fba3 1302 	umull	r1, r3, r3, r2
 80020fc:	095b      	lsrs	r3, r3, #5
 80020fe:	2164      	movs	r1, #100	@ 0x64
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	3332      	adds	r3, #50	@ 0x32
 800210a:	4a08      	ldr	r2, [pc, #32]	@ (800212c <UART_SetConfig+0x4e4>)
 800210c:	fba2 2303 	umull	r2, r3, r2, r3
 8002110:	095b      	lsrs	r3, r3, #5
 8002112:	f003 020f 	and.w	r2, r3, #15
 8002116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4422      	add	r2, r4
 800211e:	609a      	str	r2, [r3, #8]
}
 8002120:	bf00      	nop
 8002122:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002126:	46bd      	mov	sp, r7
 8002128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800212c:	51eb851f 	.word	0x51eb851f

08002130 <__NVIC_SetPriority>:
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	@ (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	@ (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002188:	2100      	movs	r1, #0
 800218a:	f06f 0004 	mvn.w	r0, #4
 800218e:	f7ff ffcf 	bl	8002130 <__NVIC_SetPriority>
#endif
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800219e:	f3ef 8305 	mrs	r3, IPSR
 80021a2:	603b      	str	r3, [r7, #0]
  return(result);
 80021a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80021aa:	f06f 0305 	mvn.w	r3, #5
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	e00c      	b.n	80021cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80021b2:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <osKernelInitialize+0x44>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d105      	bne.n	80021c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80021ba:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <osKernelInitialize+0x44>)
 80021bc:	2201      	movs	r2, #1
 80021be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	e002      	b.n	80021cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80021cc:	687b      	ldr	r3, [r7, #4]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000080 	.word	0x20000080

080021e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021e6:	f3ef 8305 	mrs	r3, IPSR
 80021ea:	603b      	str	r3, [r7, #0]
  return(result);
 80021ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80021f2:	f06f 0305 	mvn.w	r3, #5
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	e010      	b.n	800221c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80021fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <osKernelStart+0x48>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d109      	bne.n	8002216 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002202:	f7ff ffbf 	bl	8002184 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <osKernelStart+0x48>)
 8002208:	2202      	movs	r2, #2
 800220a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800220c:	f001 f8b6 	bl	800337c <vTaskStartScheduler>
      stat = osOK;
 8002210:	2300      	movs	r3, #0
 8002212:	607b      	str	r3, [r7, #4]
 8002214:	e002      	b.n	800221c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800221c:	687b      	ldr	r3, [r7, #4]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000080 	.word	0x20000080

0800222c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b08e      	sub	sp, #56	@ 0x38
 8002230:	af04      	add	r7, sp, #16
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800223c:	f3ef 8305 	mrs	r3, IPSR
 8002240:	617b      	str	r3, [r7, #20]
  return(result);
 8002242:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002244:	2b00      	cmp	r3, #0
 8002246:	d17e      	bne.n	8002346 <osThreadNew+0x11a>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d07b      	beq.n	8002346 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800224e:	2380      	movs	r3, #128	@ 0x80
 8002250:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002252:	2318      	movs	r3, #24
 8002254:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d045      	beq.n	80022f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d002      	beq.n	8002274 <osThreadNew+0x48>
        name = attr->name;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699b      	ldr	r3, [r3, #24]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d008      	beq.n	800229a <osThreadNew+0x6e>
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2b38      	cmp	r3, #56	@ 0x38
 800228c:	d805      	bhi.n	800229a <osThreadNew+0x6e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <osThreadNew+0x72>
        return (NULL);
 800229a:	2300      	movs	r3, #0
 800229c:	e054      	b.n	8002348 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00e      	beq.n	80022d4 <osThreadNew+0xa8>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2b5b      	cmp	r3, #91	@ 0x5b
 80022bc:	d90a      	bls.n	80022d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d006      	beq.n	80022d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d002      	beq.n	80022d4 <osThreadNew+0xa8>
        mem = 1;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	e010      	b.n	80022f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10c      	bne.n	80022f6 <osThreadNew+0xca>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d108      	bne.n	80022f6 <osThreadNew+0xca>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d104      	bne.n	80022f6 <osThreadNew+0xca>
          mem = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	e001      	b.n	80022f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d110      	bne.n	800231e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002304:	9202      	str	r2, [sp, #8]
 8002306:	9301      	str	r3, [sp, #4]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	6a3a      	ldr	r2, [r7, #32]
 8002310:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fe56 	bl	8002fc4 <xTaskCreateStatic>
 8002318:	4603      	mov	r3, r0
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	e013      	b.n	8002346 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d110      	bne.n	8002346 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	b29a      	uxth	r2, r3
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fea4 	bl	8003084 <xTaskCreate>
 800233c:	4603      	mov	r3, r0
 800233e:	2b01      	cmp	r3, #1
 8002340:	d001      	beq.n	8002346 <osThreadNew+0x11a>
            hTask = NULL;
 8002342:	2300      	movs	r3, #0
 8002344:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002346:	693b      	ldr	r3, [r7, #16]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3728      	adds	r7, #40	@ 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002358:	f3ef 8305 	mrs	r3, IPSR
 800235c:	60bb      	str	r3, [r7, #8]
  return(result);
 800235e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <osDelay+0x1c>
    stat = osErrorISR;
 8002364:	f06f 0305 	mvn.w	r3, #5
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	e007      	b.n	800237c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800236c:	2300      	movs	r3, #0
 800236e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d002      	beq.n	800237c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 ffca 	bl	8003310 <vTaskDelay>
    }
  }

  return (stat);
 800237c:	68fb      	ldr	r3, [r7, #12]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
	...

08002388 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4a07      	ldr	r2, [pc, #28]	@ (80023b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002398:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4a06      	ldr	r2, [pc, #24]	@ (80023b8 <vApplicationGetIdleTaskMemory+0x30>)
 800239e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2280      	movs	r2, #128	@ 0x80
 80023a4:	601a      	str	r2, [r3, #0]
}
 80023a6:	bf00      	nop
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000084 	.word	0x20000084
 80023b8:	200000e0 	.word	0x200000e0

080023bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4a07      	ldr	r2, [pc, #28]	@ (80023e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80023cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	4a06      	ldr	r2, [pc, #24]	@ (80023ec <vApplicationGetTimerTaskMemory+0x30>)
 80023d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023da:	601a      	str	r2, [r3, #0]
}
 80023dc:	bf00      	nop
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	200002e0 	.word	0x200002e0
 80023ec:	2000033c 	.word	0x2000033c

080023f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f103 0208 	add.w	r2, r3, #8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f04f 32ff 	mov.w	r2, #4294967295
 8002408:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f103 0208 	add.w	r2, r3, #8
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f103 0208 	add.w	r2, r3, #8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800244a:	b480      	push	{r7}
 800244c:	b085      	sub	sp, #20
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
 8002452:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	601a      	str	r2, [r3, #0]
}
 8002486:	bf00      	nop
 8002488:	3714      	adds	r7, #20
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002492:	b480      	push	{r7}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a8:	d103      	bne.n	80024b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	e00c      	b.n	80024cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3308      	adds	r3, #8
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e002      	b.n	80024c0 <vListInsert+0x2e>
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d2f6      	bcs.n	80024ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	1c5a      	adds	r2, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	601a      	str	r2, [r3, #0]
}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6892      	ldr	r2, [r2, #8]
 800251a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6852      	ldr	r2, [r2, #4]
 8002524:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	429a      	cmp	r2, r3
 800252e:	d103      	bne.n	8002538 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	1e5a      	subs	r2, r3, #1
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10b      	bne.n	8002584 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800256c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002570:	f383 8811 	msr	BASEPRI, r3
 8002574:	f3bf 8f6f 	isb	sy
 8002578:	f3bf 8f4f 	dsb	sy
 800257c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800257e:	bf00      	nop
 8002580:	bf00      	nop
 8002582:	e7fd      	b.n	8002580 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002584:	f002 f8b8 	bl	80046f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002590:	68f9      	ldr	r1, [r7, #12]
 8002592:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	441a      	add	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025b4:	3b01      	subs	r3, #1
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80025ba:	fb01 f303 	mul.w	r3, r1, r3
 80025be:	441a      	add	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	22ff      	movs	r2, #255	@ 0xff
 80025c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	22ff      	movs	r2, #255	@ 0xff
 80025d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d114      	bne.n	8002604 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d01a      	beq.n	8002618 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	3310      	adds	r3, #16
 80025e6:	4618      	mov	r0, r3
 80025e8:	f001 f956 	bl	8003898 <xTaskRemoveFromEventList>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d012      	beq.n	8002618 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80025f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002628 <xQueueGenericReset+0xd0>)
 80025f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f3bf 8f4f 	dsb	sy
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	e009      	b.n	8002618 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3310      	adds	r3, #16
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fef1 	bl	80023f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	3324      	adds	r3, #36	@ 0x24
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff feec 	bl	80023f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002618:	f002 f8a0 	bl	800475c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800261c:	2301      	movs	r3, #1
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	e000ed04 	.word	0xe000ed04

0800262c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08e      	sub	sp, #56	@ 0x38
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
 8002638:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10b      	bne.n	8002658 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002652:	bf00      	nop
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10b      	bne.n	8002676 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800265e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	e7fd      	b.n	8002672 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <xQueueGenericCreateStatic+0x56>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <xQueueGenericCreateStatic+0x5a>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <xQueueGenericCreateStatic+0x5c>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10b      	bne.n	80026a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	623b      	str	r3, [r7, #32]
}
 800269e:	bf00      	nop
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <xQueueGenericCreateStatic+0x84>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <xQueueGenericCreateStatic+0x88>
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <xQueueGenericCreateStatic+0x8a>
 80026b4:	2300      	movs	r3, #0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10b      	bne.n	80026d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80026ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	61fb      	str	r3, [r7, #28]
}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	e7fd      	b.n	80026ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80026d2:	2350      	movs	r3, #80	@ 0x50
 80026d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b50      	cmp	r3, #80	@ 0x50
 80026da:	d00b      	beq.n	80026f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80026dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e0:	f383 8811 	msr	BASEPRI, r3
 80026e4:	f3bf 8f6f 	isb	sy
 80026e8:	f3bf 8f4f 	dsb	sy
 80026ec:	61bb      	str	r3, [r7, #24]
}
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80026f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80026fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00d      	beq.n	800271c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002708:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800270c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	4613      	mov	r3, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f840 	bl	800279c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800271c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800271e:	4618      	mov	r0, r3
 8002720:	3730      	adds	r7, #48	@ 0x30
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002726:	b580      	push	{r7, lr}
 8002728:	b08a      	sub	sp, #40	@ 0x28
 800272a:	af02      	add	r7, sp, #8
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	4613      	mov	r3, r2
 8002732:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10b      	bne.n	8002752 <xQueueGenericCreate+0x2c>
	__asm volatile
 800273a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	613b      	str	r3, [r7, #16]
}
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	e7fd      	b.n	800274e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	68ba      	ldr	r2, [r7, #8]
 8002756:	fb02 f303 	mul.w	r3, r2, r3
 800275a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	3350      	adds	r3, #80	@ 0x50
 8002760:	4618      	mov	r0, r3
 8002762:	f002 f8eb 	bl	800493c <pvPortMalloc>
 8002766:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d011      	beq.n	8002792 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	3350      	adds	r3, #80	@ 0x50
 8002776:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002780:	79fa      	ldrb	r2, [r7, #7]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	4613      	mov	r3, r2
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f805 	bl	800279c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002792:	69bb      	ldr	r3, [r7, #24]
	}
 8002794:	4618      	mov	r0, r3
 8002796:	3720      	adds	r7, #32
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d103      	bne.n	80027b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e002      	b.n	80027be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027ca:	2101      	movs	r1, #1
 80027cc:	69b8      	ldr	r0, [r7, #24]
 80027ce:	f7ff fec3 	bl	8002558 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
	...

080027e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08e      	sub	sp, #56	@ 0x38
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027f2:	2300      	movs	r3, #0
 80027f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80027fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <xQueueGenericSend+0x34>
	__asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002812:	bf00      	nop
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d103      	bne.n	8002826 <xQueueGenericSend+0x42>
 800281e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <xQueueGenericSend+0x46>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <xQueueGenericSend+0x48>
 800282a:	2300      	movs	r3, #0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10b      	bne.n	8002848 <xQueueGenericSend+0x64>
	__asm volatile
 8002830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002842:	bf00      	nop
 8002844:	bf00      	nop
 8002846:	e7fd      	b.n	8002844 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d103      	bne.n	8002856 <xQueueGenericSend+0x72>
 800284e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002852:	2b01      	cmp	r3, #1
 8002854:	d101      	bne.n	800285a <xQueueGenericSend+0x76>
 8002856:	2301      	movs	r3, #1
 8002858:	e000      	b.n	800285c <xQueueGenericSend+0x78>
 800285a:	2300      	movs	r3, #0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10b      	bne.n	8002878 <xQueueGenericSend+0x94>
	__asm volatile
 8002860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002864:	f383 8811 	msr	BASEPRI, r3
 8002868:	f3bf 8f6f 	isb	sy
 800286c:	f3bf 8f4f 	dsb	sy
 8002870:	623b      	str	r3, [r7, #32]
}
 8002872:	bf00      	nop
 8002874:	bf00      	nop
 8002876:	e7fd      	b.n	8002874 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002878:	f001 f9ce 	bl	8003c18 <xTaskGetSchedulerState>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <xQueueGenericSend+0xa4>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <xQueueGenericSend+0xa8>
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <xQueueGenericSend+0xaa>
 800288c:	2300      	movs	r3, #0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d10b      	bne.n	80028aa <xQueueGenericSend+0xc6>
	__asm volatile
 8002892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002896:	f383 8811 	msr	BASEPRI, r3
 800289a:	f3bf 8f6f 	isb	sy
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	61fb      	str	r3, [r7, #28]
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	e7fd      	b.n	80028a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028aa:	f001 ff25 	bl	80046f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d302      	bcc.n	80028c0 <xQueueGenericSend+0xdc>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d129      	bne.n	8002914 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80028c6:	f000 fa0f 	bl	8002ce8 <prvCopyDataToQueue>
 80028ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d010      	beq.n	80028f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d6:	3324      	adds	r3, #36	@ 0x24
 80028d8:	4618      	mov	r0, r3
 80028da:	f000 ffdd 	bl	8003898 <xTaskRemoveFromEventList>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028e4:	4b3f      	ldr	r3, [pc, #252]	@ (80029e4 <xQueueGenericSend+0x200>)
 80028e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	f3bf 8f6f 	isb	sy
 80028f4:	e00a      	b.n	800290c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80028f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80028fc:	4b39      	ldr	r3, [pc, #228]	@ (80029e4 <xQueueGenericSend+0x200>)
 80028fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800290c:	f001 ff26 	bl	800475c <vPortExitCritical>
				return pdPASS;
 8002910:	2301      	movs	r3, #1
 8002912:	e063      	b.n	80029dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d103      	bne.n	8002922 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800291a:	f001 ff1f 	bl	800475c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800291e:	2300      	movs	r3, #0
 8002920:	e05c      	b.n	80029dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002924:	2b00      	cmp	r3, #0
 8002926:	d106      	bne.n	8002936 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002928:	f107 0314 	add.w	r3, r7, #20
 800292c:	4618      	mov	r0, r3
 800292e:	f001 f817 	bl	8003960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002932:	2301      	movs	r3, #1
 8002934:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002936:	f001 ff11 	bl	800475c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800293a:	f000 fd87 	bl	800344c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800293e:	f001 fedb 	bl	80046f8 <vPortEnterCritical>
 8002942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002944:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002948:	b25b      	sxtb	r3, r3
 800294a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294e:	d103      	bne.n	8002958 <xQueueGenericSend+0x174>
 8002950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800295e:	b25b      	sxtb	r3, r3
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d103      	bne.n	800296e <xQueueGenericSend+0x18a>
 8002966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800296e:	f001 fef5 	bl	800475c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002972:	1d3a      	adds	r2, r7, #4
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f001 f806 	bl	800398c <xTaskCheckForTimeOut>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d124      	bne.n	80029d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002986:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002988:	f000 faa6 	bl	8002ed8 <prvIsQueueFull>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d018      	beq.n	80029c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002994:	3310      	adds	r3, #16
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f000 ff2a 	bl	80037f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029a2:	f000 fa31 	bl	8002e08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029a6:	f000 fd5f 	bl	8003468 <xTaskResumeAll>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f47f af7c 	bne.w	80028aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80029b2:	4b0c      	ldr	r3, [pc, #48]	@ (80029e4 <xQueueGenericSend+0x200>)
 80029b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	e772      	b.n	80028aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029c6:	f000 fa1f 	bl	8002e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029ca:	f000 fd4d 	bl	8003468 <xTaskResumeAll>
 80029ce:	e76c      	b.n	80028aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80029d2:	f000 fa19 	bl	8002e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029d6:	f000 fd47 	bl	8003468 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80029da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3738      	adds	r7, #56	@ 0x38
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	e000ed04 	.word	0xe000ed04

080029e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b090      	sub	sp, #64	@ 0x40
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80029fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10b      	bne.n	8002a18 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a12:	bf00      	nop
 8002a14:	bf00      	nop
 8002a16:	e7fd      	b.n	8002a14 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <xQueueGenericSendFromISR+0x3e>
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <xQueueGenericSendFromISR+0x42>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <xQueueGenericSendFromISR+0x44>
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a34:	f383 8811 	msr	BASEPRI, r3
 8002a38:	f3bf 8f6f 	isb	sy
 8002a3c:	f3bf 8f4f 	dsb	sy
 8002a40:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
 8002a46:	e7fd      	b.n	8002a44 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d103      	bne.n	8002a56 <xQueueGenericSendFromISR+0x6e>
 8002a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <xQueueGenericSendFromISR+0x72>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <xQueueGenericSendFromISR+0x74>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10b      	bne.n	8002a78 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	623b      	str	r3, [r7, #32]
}
 8002a72:	bf00      	nop
 8002a74:	bf00      	nop
 8002a76:	e7fd      	b.n	8002a74 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a78:	f001 ff1e 	bl	80048b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a7c:	f3ef 8211 	mrs	r2, BASEPRI
 8002a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a84:	f383 8811 	msr	BASEPRI, r3
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	f3bf 8f4f 	dsb	sy
 8002a90:	61fa      	str	r2, [r7, #28]
 8002a92:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a94:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a96:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d302      	bcc.n	8002aaa <xQueueGenericSendFromISR+0xc2>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d12f      	bne.n	8002b0a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ab0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	68b9      	ldr	r1, [r7, #8]
 8002abe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002ac0:	f000 f912 	bl	8002ce8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ac4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d112      	bne.n	8002af4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d016      	beq.n	8002b04 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad8:	3324      	adds	r3, #36	@ 0x24
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 fedc 	bl	8003898 <xTaskRemoveFromEventList>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00e      	beq.n	8002b04 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00b      	beq.n	8002b04 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	e007      	b.n	8002b04 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002af4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002af8:	3301      	adds	r3, #1
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	b25a      	sxtb	r2, r3
 8002afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002b04:	2301      	movs	r3, #1
 8002b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002b08:	e001      	b.n	8002b0e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b10:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3740      	adds	r7, #64	@ 0x40
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08c      	sub	sp, #48	@ 0x30
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10b      	bne.n	8002b56 <xQueueReceive+0x32>
	__asm volatile
 8002b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	623b      	str	r3, [r7, #32]
}
 8002b50:	bf00      	nop
 8002b52:	bf00      	nop
 8002b54:	e7fd      	b.n	8002b52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d103      	bne.n	8002b64 <xQueueReceive+0x40>
 8002b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <xQueueReceive+0x44>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <xQueueReceive+0x46>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10b      	bne.n	8002b86 <xQueueReceive+0x62>
	__asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	61fb      	str	r3, [r7, #28]
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	e7fd      	b.n	8002b82 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b86:	f001 f847 	bl	8003c18 <xTaskGetSchedulerState>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d102      	bne.n	8002b96 <xQueueReceive+0x72>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <xQueueReceive+0x76>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <xQueueReceive+0x78>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10b      	bne.n	8002bb8 <xQueueReceive+0x94>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	61bb      	str	r3, [r7, #24]
}
 8002bb2:	bf00      	nop
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bb8:	f001 fd9e 	bl	80046f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01f      	beq.n	8002c08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bc8:	68b9      	ldr	r1, [r7, #8]
 8002bca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bcc:	f000 f8f6 	bl	8002dbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd2:	1e5a      	subs	r2, r3, #1
 8002bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00f      	beq.n	8002c00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be2:	3310      	adds	r3, #16
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 fe57 	bl	8003898 <xTaskRemoveFromEventList>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d007      	beq.n	8002c00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002bf0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ce4 <xQueueReceive+0x1c0>)
 8002bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002c00:	f001 fdac 	bl	800475c <vPortExitCritical>
				return pdPASS;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e069      	b.n	8002cdc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d103      	bne.n	8002c16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c0e:	f001 fda5 	bl	800475c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e062      	b.n	8002cdc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d106      	bne.n	8002c2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c1c:	f107 0310 	add.w	r3, r7, #16
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fe9d 	bl	8003960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c26:	2301      	movs	r3, #1
 8002c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c2a:	f001 fd97 	bl	800475c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c2e:	f000 fc0d 	bl	800344c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c32:	f001 fd61 	bl	80046f8 <vPortEnterCritical>
 8002c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c3c:	b25b      	sxtb	r3, r3
 8002c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c42:	d103      	bne.n	8002c4c <xQueueReceive+0x128>
 8002c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c52:	b25b      	sxtb	r3, r3
 8002c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c58:	d103      	bne.n	8002c62 <xQueueReceive+0x13e>
 8002c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c62:	f001 fd7b 	bl	800475c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c66:	1d3a      	adds	r2, r7, #4
 8002c68:	f107 0310 	add.w	r3, r7, #16
 8002c6c:	4611      	mov	r1, r2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fe8c 	bl	800398c <xTaskCheckForTimeOut>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d123      	bne.n	8002cc2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c7c:	f000 f916 	bl	8002eac <prvIsQueueEmpty>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d017      	beq.n	8002cb6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c88:	3324      	adds	r3, #36	@ 0x24
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 fdb0 	bl	80037f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c96:	f000 f8b7 	bl	8002e08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c9a:	f000 fbe5 	bl	8003468 <xTaskResumeAll>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d189      	bne.n	8002bb8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce4 <xQueueReceive+0x1c0>)
 8002ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	e780      	b.n	8002bb8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002cb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cb8:	f000 f8a6 	bl	8002e08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cbc:	f000 fbd4 	bl	8003468 <xTaskResumeAll>
 8002cc0:	e77a      	b.n	8002bb8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002cc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cc4:	f000 f8a0 	bl	8002e08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cc8:	f000 fbce 	bl	8003468 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ccc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cce:	f000 f8ed 	bl	8002eac <prvIsQueueEmpty>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f43f af6f 	beq.w	8002bb8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002cda:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3730      	adds	r7, #48	@ 0x30
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cfc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10d      	bne.n	8002d22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d14d      	bne.n	8002daa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 ff9e 	bl	8003c54 <xTaskPriorityDisinherit>
 8002d18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	e043      	b.n	8002daa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d119      	bne.n	8002d5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6858      	ldr	r0, [r3, #4]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	461a      	mov	r2, r3
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	f002 f81c 	bl	8004d70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d40:	441a      	add	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d32b      	bcc.n	8002daa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	e026      	b.n	8002daa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	68d8      	ldr	r0, [r3, #12]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	461a      	mov	r2, r3
 8002d66:	68b9      	ldr	r1, [r7, #8]
 8002d68:	f002 f802 	bl	8004d70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d74:	425b      	negs	r3, r3
 8002d76:	441a      	add	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d207      	bcs.n	8002d98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689a      	ldr	r2, [r3, #8]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d90:	425b      	negs	r3, r3
 8002d92:	441a      	add	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d105      	bne.n	8002daa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002db2:	697b      	ldr	r3, [r7, #20]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d018      	beq.n	8002e00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd6:	441a      	add	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d303      	bcc.n	8002df0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68d9      	ldr	r1, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6838      	ldr	r0, [r7, #0]
 8002dfc:	f001 ffb8 	bl	8004d70 <memcpy>
	}
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e10:	f001 fc72 	bl	80046f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002e1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e1c:	e011      	b.n	8002e42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d012      	beq.n	8002e4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3324      	adds	r3, #36	@ 0x24
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 fd34 	bl	8003898 <xTaskRemoveFromEventList>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e36:	f000 fe0d 	bl	8003a54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	dce9      	bgt.n	8002e1e <prvUnlockQueue+0x16>
 8002e4a:	e000      	b.n	8002e4e <prvUnlockQueue+0x46>
					break;
 8002e4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	22ff      	movs	r2, #255	@ 0xff
 8002e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002e56:	f001 fc81 	bl	800475c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e5a:	f001 fc4d 	bl	80046f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e66:	e011      	b.n	8002e8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d012      	beq.n	8002e96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3310      	adds	r3, #16
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 fd0f 	bl	8003898 <xTaskRemoveFromEventList>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e80:	f000 fde8 	bl	8003a54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e84:	7bbb      	ldrb	r3, [r7, #14]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	dce9      	bgt.n	8002e68 <prvUnlockQueue+0x60>
 8002e94:	e000      	b.n	8002e98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	22ff      	movs	r2, #255	@ 0xff
 8002e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002ea0:	f001 fc5c 	bl	800475c <vPortExitCritical>
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002eb4:	f001 fc20 	bl	80046f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	e001      	b.n	8002eca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002eca:	f001 fc47 	bl	800475c <vPortExitCritical>

	return xReturn;
 8002ece:	68fb      	ldr	r3, [r7, #12]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ee0:	f001 fc0a 	bl	80046f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d102      	bne.n	8002ef6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	e001      	b.n	8002efa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002efa:	f001 fc2f 	bl	800475c <vPortExitCritical>

	return xReturn;
 8002efe:	68fb      	ldr	r3, [r7, #12]
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	e014      	b.n	8002f42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f18:	4a0f      	ldr	r2, [pc, #60]	@ (8002f58 <vQueueAddToRegistry+0x50>)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f24:	490c      	ldr	r1, [pc, #48]	@ (8002f58 <vQueueAddToRegistry+0x50>)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f58 <vQueueAddToRegistry+0x50>)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	4413      	add	r3, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002f3a:	e006      	b.n	8002f4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b07      	cmp	r3, #7
 8002f46:	d9e7      	bls.n	8002f18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	2000073c 	.word	0x2000073c

08002f5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002f6c:	f001 fbc4 	bl	80046f8 <vPortEnterCritical>
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f76:	b25b      	sxtb	r3, r3
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d103      	bne.n	8002f86 <vQueueWaitForMessageRestricted+0x2a>
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d103      	bne.n	8002f9c <vQueueWaitForMessageRestricted+0x40>
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f9c:	f001 fbde 	bl	800475c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d106      	bne.n	8002fb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3324      	adds	r3, #36	@ 0x24
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	68b9      	ldr	r1, [r7, #8]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fc45 	bl	8003840 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002fb6:	6978      	ldr	r0, [r7, #20]
 8002fb8:	f7ff ff26 	bl	8002e08 <prvUnlockQueue>
	}
 8002fbc:	bf00      	nop
 8002fbe:	3718      	adds	r7, #24
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08e      	sub	sp, #56	@ 0x38
 8002fc8:	af04      	add	r7, sp, #16
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10b      	bne.n	8002ff0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	623b      	str	r3, [r7, #32]
}
 8002fea:	bf00      	nop
 8002fec:	bf00      	nop
 8002fee:	e7fd      	b.n	8002fec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <xTaskCreateStatic+0x4a>
	__asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	61fb      	str	r3, [r7, #28]
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	e7fd      	b.n	800300a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800300e:	235c      	movs	r3, #92	@ 0x5c
 8003010:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b5c      	cmp	r3, #92	@ 0x5c
 8003016:	d00b      	beq.n	8003030 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301c:	f383 8811 	msr	BASEPRI, r3
 8003020:	f3bf 8f6f 	isb	sy
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	61bb      	str	r3, [r7, #24]
}
 800302a:	bf00      	nop
 800302c:	bf00      	nop
 800302e:	e7fd      	b.n	800302c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003030:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01e      	beq.n	8003076 <xTaskCreateStatic+0xb2>
 8003038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303a:	2b00      	cmp	r3, #0
 800303c:	d01b      	beq.n	8003076 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800303e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003046:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800304a:	2202      	movs	r2, #2
 800304c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003050:	2300      	movs	r3, #0
 8003052:	9303      	str	r3, [sp, #12]
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	9302      	str	r3, [sp, #8]
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	68b9      	ldr	r1, [r7, #8]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f850 	bl	800310e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800306e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003070:	f000 f8de 	bl	8003230 <prvAddNewTaskToReadyList>
 8003074:	e001      	b.n	800307a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800307a:	697b      	ldr	r3, [r7, #20]
	}
 800307c:	4618      	mov	r0, r3
 800307e:	3728      	adds	r7, #40	@ 0x28
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003084:	b580      	push	{r7, lr}
 8003086:	b08c      	sub	sp, #48	@ 0x30
 8003088:	af04      	add	r7, sp, #16
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	603b      	str	r3, [r7, #0]
 8003090:	4613      	mov	r3, r2
 8003092:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003094:	88fb      	ldrh	r3, [r7, #6]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4618      	mov	r0, r3
 800309a:	f001 fc4f 	bl	800493c <pvPortMalloc>
 800309e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00e      	beq.n	80030c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030a6:	205c      	movs	r0, #92	@ 0x5c
 80030a8:	f001 fc48 	bl	800493c <pvPortMalloc>
 80030ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80030ba:	e005      	b.n	80030c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030bc:	6978      	ldr	r0, [r7, #20]
 80030be:	f001 fd0b 	bl	8004ad8 <vPortFree>
 80030c2:	e001      	b.n	80030c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d017      	beq.n	80030fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030d6:	88fa      	ldrh	r2, [r7, #6]
 80030d8:	2300      	movs	r3, #0
 80030da:	9303      	str	r3, [sp, #12]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	9302      	str	r3, [sp, #8]
 80030e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f80e 	bl	800310e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030f2:	69f8      	ldr	r0, [r7, #28]
 80030f4:	f000 f89c 	bl	8003230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030f8:	2301      	movs	r3, #1
 80030fa:	61bb      	str	r3, [r7, #24]
 80030fc:	e002      	b.n	8003104 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003102:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003104:	69bb      	ldr	r3, [r7, #24]
	}
 8003106:	4618      	mov	r0, r3
 8003108:	3720      	adds	r7, #32
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b088      	sub	sp, #32
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800311c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800311e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	461a      	mov	r2, r3
 8003126:	21a5      	movs	r1, #165	@ 0xa5
 8003128:	f001 fdf6 	bl	8004d18 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800312c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800312e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003136:	3b01      	subs	r3, #1
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	f023 0307 	bic.w	r3, r3, #7
 8003144:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00b      	beq.n	8003168 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	617b      	str	r3, [r7, #20]
}
 8003162:	bf00      	nop
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01f      	beq.n	80031ae <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e012      	b.n	800319a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	4413      	add	r3, r2
 800317a:	7819      	ldrb	r1, [r3, #0]
 800317c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	4413      	add	r3, r2
 8003182:	3334      	adds	r3, #52	@ 0x34
 8003184:	460a      	mov	r2, r1
 8003186:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	4413      	add	r3, r2
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d006      	beq.n	80031a2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	3301      	adds	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	2b0f      	cmp	r3, #15
 800319e:	d9e9      	bls.n	8003174 <prvInitialiseNewTask+0x66>
 80031a0:	e000      	b.n	80031a4 <prvInitialiseNewTask+0x96>
			{
				break;
 80031a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031ac:	e003      	b.n	80031b6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80031ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b8:	2b37      	cmp	r3, #55	@ 0x37
 80031ba:	d901      	bls.n	80031c0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031bc:	2337      	movs	r3, #55	@ 0x37
 80031be:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80031c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80031c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031ca:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80031cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ce:	2200      	movs	r2, #0
 80031d0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d4:	3304      	adds	r3, #4
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff f92a 	bl	8002430 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031de:	3318      	adds	r3, #24
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff f925 	bl	8002430 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80031f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031fa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80031fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fe:	2200      	movs	r2, #0
 8003200:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	68f9      	ldr	r1, [r7, #12]
 800320e:	69b8      	ldr	r0, [r7, #24]
 8003210:	f001 f93e 	bl	8004490 <pxPortInitialiseStack>
 8003214:	4602      	mov	r2, r0
 8003216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003218:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800321a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003226:	bf00      	nop
 8003228:	3720      	adds	r7, #32
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003238:	f001 fa5e 	bl	80046f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800323c:	4b2d      	ldr	r3, [pc, #180]	@ (80032f4 <prvAddNewTaskToReadyList+0xc4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	3301      	adds	r3, #1
 8003242:	4a2c      	ldr	r2, [pc, #176]	@ (80032f4 <prvAddNewTaskToReadyList+0xc4>)
 8003244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003246:	4b2c      	ldr	r3, [pc, #176]	@ (80032f8 <prvAddNewTaskToReadyList+0xc8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800324e:	4a2a      	ldr	r2, [pc, #168]	@ (80032f8 <prvAddNewTaskToReadyList+0xc8>)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003254:	4b27      	ldr	r3, [pc, #156]	@ (80032f4 <prvAddNewTaskToReadyList+0xc4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d110      	bne.n	800327e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800325c:	f000 fc1e 	bl	8003a9c <prvInitialiseTaskLists>
 8003260:	e00d      	b.n	800327e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003262:	4b26      	ldr	r3, [pc, #152]	@ (80032fc <prvAddNewTaskToReadyList+0xcc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800326a:	4b23      	ldr	r3, [pc, #140]	@ (80032f8 <prvAddNewTaskToReadyList+0xc8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003274:	429a      	cmp	r2, r3
 8003276:	d802      	bhi.n	800327e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003278:	4a1f      	ldr	r2, [pc, #124]	@ (80032f8 <prvAddNewTaskToReadyList+0xc8>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800327e:	4b20      	ldr	r3, [pc, #128]	@ (8003300 <prvAddNewTaskToReadyList+0xd0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3301      	adds	r3, #1
 8003284:	4a1e      	ldr	r2, [pc, #120]	@ (8003300 <prvAddNewTaskToReadyList+0xd0>)
 8003286:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003288:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <prvAddNewTaskToReadyList+0xd0>)
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003294:	4b1b      	ldr	r3, [pc, #108]	@ (8003304 <prvAddNewTaskToReadyList+0xd4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d903      	bls.n	80032a4 <prvAddNewTaskToReadyList+0x74>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	4a18      	ldr	r2, [pc, #96]	@ (8003304 <prvAddNewTaskToReadyList+0xd4>)
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a8:	4613      	mov	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4a15      	ldr	r2, [pc, #84]	@ (8003308 <prvAddNewTaskToReadyList+0xd8>)
 80032b2:	441a      	add	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3304      	adds	r3, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f7ff f8c5 	bl	800244a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032c0:	f001 fa4c 	bl	800475c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032c4:	4b0d      	ldr	r3, [pc, #52]	@ (80032fc <prvAddNewTaskToReadyList+0xcc>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00e      	beq.n	80032ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032cc:	4b0a      	ldr	r3, [pc, #40]	@ (80032f8 <prvAddNewTaskToReadyList+0xc8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d207      	bcs.n	80032ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032da:	4b0c      	ldr	r3, [pc, #48]	@ (800330c <prvAddNewTaskToReadyList+0xdc>)
 80032dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ea:	bf00      	nop
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	20000c50 	.word	0x20000c50
 80032f8:	2000077c 	.word	0x2000077c
 80032fc:	20000c5c 	.word	0x20000c5c
 8003300:	20000c6c 	.word	0x20000c6c
 8003304:	20000c58 	.word	0x20000c58
 8003308:	20000780 	.word	0x20000780
 800330c:	e000ed04 	.word	0xe000ed04

08003310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003318:	2300      	movs	r3, #0
 800331a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d018      	beq.n	8003354 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003322:	4b14      	ldr	r3, [pc, #80]	@ (8003374 <vTaskDelay+0x64>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <vTaskDelay+0x32>
	__asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	60bb      	str	r3, [r7, #8]
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	e7fd      	b.n	800333e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003342:	f000 f883 	bl	800344c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003346:	2100      	movs	r1, #0
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f000 fcf3 	bl	8003d34 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800334e:	f000 f88b 	bl	8003468 <xTaskResumeAll>
 8003352:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d107      	bne.n	800336a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800335a:	4b07      	ldr	r3, [pc, #28]	@ (8003378 <vTaskDelay+0x68>)
 800335c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800336a:	bf00      	nop
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000c78 	.word	0x20000c78
 8003378:	e000ed04 	.word	0xe000ed04

0800337c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b08a      	sub	sp, #40	@ 0x28
 8003380:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003386:	2300      	movs	r3, #0
 8003388:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800338a:	463a      	mov	r2, r7
 800338c:	1d39      	adds	r1, r7, #4
 800338e:	f107 0308 	add.w	r3, r7, #8
 8003392:	4618      	mov	r0, r3
 8003394:	f7fe fff8 	bl	8002388 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003398:	6839      	ldr	r1, [r7, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	9202      	str	r2, [sp, #8]
 80033a0:	9301      	str	r3, [sp, #4]
 80033a2:	2300      	movs	r3, #0
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	2300      	movs	r3, #0
 80033a8:	460a      	mov	r2, r1
 80033aa:	4922      	ldr	r1, [pc, #136]	@ (8003434 <vTaskStartScheduler+0xb8>)
 80033ac:	4822      	ldr	r0, [pc, #136]	@ (8003438 <vTaskStartScheduler+0xbc>)
 80033ae:	f7ff fe09 	bl	8002fc4 <xTaskCreateStatic>
 80033b2:	4603      	mov	r3, r0
 80033b4:	4a21      	ldr	r2, [pc, #132]	@ (800343c <vTaskStartScheduler+0xc0>)
 80033b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033b8:	4b20      	ldr	r3, [pc, #128]	@ (800343c <vTaskStartScheduler+0xc0>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033c0:	2301      	movs	r3, #1
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	e001      	b.n	80033ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033c6:	2300      	movs	r3, #0
 80033c8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d102      	bne.n	80033d6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80033d0:	f000 fd04 	bl	8003ddc <xTimerCreateTimerTask>
 80033d4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d116      	bne.n	800340a <vTaskStartScheduler+0x8e>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	613b      	str	r3, [r7, #16]
}
 80033ee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033f0:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <vTaskStartScheduler+0xc4>)
 80033f2:	f04f 32ff 	mov.w	r2, #4294967295
 80033f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033f8:	4b12      	ldr	r3, [pc, #72]	@ (8003444 <vTaskStartScheduler+0xc8>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80033fe:	4b12      	ldr	r3, [pc, #72]	@ (8003448 <vTaskStartScheduler+0xcc>)
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003404:	f001 f8d4 	bl	80045b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003408:	e00f      	b.n	800342a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003410:	d10b      	bne.n	800342a <vTaskStartScheduler+0xae>
	__asm volatile
 8003412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	60fb      	str	r3, [r7, #12]
}
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	e7fd      	b.n	8003426 <vTaskStartScheduler+0xaa>
}
 800342a:	bf00      	nop
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	08004dd0 	.word	0x08004dd0
 8003438:	08003a6d 	.word	0x08003a6d
 800343c:	20000c74 	.word	0x20000c74
 8003440:	20000c70 	.word	0x20000c70
 8003444:	20000c5c 	.word	0x20000c5c
 8003448:	20000c54 	.word	0x20000c54

0800344c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003450:	4b04      	ldr	r3, [pc, #16]	@ (8003464 <vTaskSuspendAll+0x18>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3301      	adds	r3, #1
 8003456:	4a03      	ldr	r2, [pc, #12]	@ (8003464 <vTaskSuspendAll+0x18>)
 8003458:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800345a:	bf00      	nop
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	20000c78 	.word	0x20000c78

08003468 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003472:	2300      	movs	r3, #0
 8003474:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003476:	4b42      	ldr	r3, [pc, #264]	@ (8003580 <xTaskResumeAll+0x118>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10b      	bne.n	8003496 <xTaskResumeAll+0x2e>
	__asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	603b      	str	r3, [r7, #0]
}
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	e7fd      	b.n	8003492 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003496:	f001 f92f 	bl	80046f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800349a:	4b39      	ldr	r3, [pc, #228]	@ (8003580 <xTaskResumeAll+0x118>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3b01      	subs	r3, #1
 80034a0:	4a37      	ldr	r2, [pc, #220]	@ (8003580 <xTaskResumeAll+0x118>)
 80034a2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034a4:	4b36      	ldr	r3, [pc, #216]	@ (8003580 <xTaskResumeAll+0x118>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d162      	bne.n	8003572 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034ac:	4b35      	ldr	r3, [pc, #212]	@ (8003584 <xTaskResumeAll+0x11c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d05e      	beq.n	8003572 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034b4:	e02f      	b.n	8003516 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034b6:	4b34      	ldr	r3, [pc, #208]	@ (8003588 <xTaskResumeAll+0x120>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3318      	adds	r3, #24
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff f81e 	bl	8002504 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff f819 	bl	8002504 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034d6:	4b2d      	ldr	r3, [pc, #180]	@ (800358c <xTaskResumeAll+0x124>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d903      	bls.n	80034e6 <xTaskResumeAll+0x7e>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e2:	4a2a      	ldr	r2, [pc, #168]	@ (800358c <xTaskResumeAll+0x124>)
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4a27      	ldr	r2, [pc, #156]	@ (8003590 <xTaskResumeAll+0x128>)
 80034f4:	441a      	add	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	3304      	adds	r3, #4
 80034fa:	4619      	mov	r1, r3
 80034fc:	4610      	mov	r0, r2
 80034fe:	f7fe ffa4 	bl	800244a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003506:	4b23      	ldr	r3, [pc, #140]	@ (8003594 <xTaskResumeAll+0x12c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	429a      	cmp	r2, r3
 800350e:	d302      	bcc.n	8003516 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003510:	4b21      	ldr	r3, [pc, #132]	@ (8003598 <xTaskResumeAll+0x130>)
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003516:	4b1c      	ldr	r3, [pc, #112]	@ (8003588 <xTaskResumeAll+0x120>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1cb      	bne.n	80034b6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003524:	f000 fb58 	bl	8003bd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003528:	4b1c      	ldr	r3, [pc, #112]	@ (800359c <xTaskResumeAll+0x134>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d010      	beq.n	8003556 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003534:	f000 f846 	bl	80035c4 <xTaskIncrementTick>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800353e:	4b16      	ldr	r3, [pc, #88]	@ (8003598 <xTaskResumeAll+0x130>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1f1      	bne.n	8003534 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003550:	4b12      	ldr	r3, [pc, #72]	@ (800359c <xTaskResumeAll+0x134>)
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003556:	4b10      	ldr	r3, [pc, #64]	@ (8003598 <xTaskResumeAll+0x130>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800355e:	2301      	movs	r3, #1
 8003560:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003562:	4b0f      	ldr	r3, [pc, #60]	@ (80035a0 <xTaskResumeAll+0x138>)
 8003564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003572:	f001 f8f3 	bl	800475c <vPortExitCritical>

	return xAlreadyYielded;
 8003576:	68bb      	ldr	r3, [r7, #8]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	20000c78 	.word	0x20000c78
 8003584:	20000c50 	.word	0x20000c50
 8003588:	20000c10 	.word	0x20000c10
 800358c:	20000c58 	.word	0x20000c58
 8003590:	20000780 	.word	0x20000780
 8003594:	2000077c 	.word	0x2000077c
 8003598:	20000c64 	.word	0x20000c64
 800359c:	20000c60 	.word	0x20000c60
 80035a0:	e000ed04 	.word	0xe000ed04

080035a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80035aa:	4b05      	ldr	r3, [pc, #20]	@ (80035c0 <xTaskGetTickCount+0x1c>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80035b0:	687b      	ldr	r3, [r7, #4]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	20000c54 	.word	0x20000c54

080035c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ce:	4b4f      	ldr	r3, [pc, #316]	@ (800370c <xTaskIncrementTick+0x148>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f040 8090 	bne.w	80036f8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003710 <xTaskIncrementTick+0x14c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3301      	adds	r3, #1
 80035de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035e0:	4a4b      	ldr	r2, [pc, #300]	@ (8003710 <xTaskIncrementTick+0x14c>)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d121      	bne.n	8003630 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80035ec:	4b49      	ldr	r3, [pc, #292]	@ (8003714 <xTaskIncrementTick+0x150>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00b      	beq.n	800360e <xTaskIncrementTick+0x4a>
	__asm volatile
 80035f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fa:	f383 8811 	msr	BASEPRI, r3
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f3bf 8f4f 	dsb	sy
 8003606:	603b      	str	r3, [r7, #0]
}
 8003608:	bf00      	nop
 800360a:	bf00      	nop
 800360c:	e7fd      	b.n	800360a <xTaskIncrementTick+0x46>
 800360e:	4b41      	ldr	r3, [pc, #260]	@ (8003714 <xTaskIncrementTick+0x150>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	4b40      	ldr	r3, [pc, #256]	@ (8003718 <xTaskIncrementTick+0x154>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a3e      	ldr	r2, [pc, #248]	@ (8003714 <xTaskIncrementTick+0x150>)
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	4a3e      	ldr	r2, [pc, #248]	@ (8003718 <xTaskIncrementTick+0x154>)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	4b3e      	ldr	r3, [pc, #248]	@ (800371c <xTaskIncrementTick+0x158>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3301      	adds	r3, #1
 8003628:	4a3c      	ldr	r2, [pc, #240]	@ (800371c <xTaskIncrementTick+0x158>)
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	f000 fad4 	bl	8003bd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003630:	4b3b      	ldr	r3, [pc, #236]	@ (8003720 <xTaskIncrementTick+0x15c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	429a      	cmp	r2, r3
 8003638:	d349      	bcc.n	80036ce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800363a:	4b36      	ldr	r3, [pc, #216]	@ (8003714 <xTaskIncrementTick+0x150>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d104      	bne.n	800364e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003644:	4b36      	ldr	r3, [pc, #216]	@ (8003720 <xTaskIncrementTick+0x15c>)
 8003646:	f04f 32ff 	mov.w	r2, #4294967295
 800364a:	601a      	str	r2, [r3, #0]
					break;
 800364c:	e03f      	b.n	80036ce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800364e:	4b31      	ldr	r3, [pc, #196]	@ (8003714 <xTaskIncrementTick+0x150>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	d203      	bcs.n	800366e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003666:	4a2e      	ldr	r2, [pc, #184]	@ (8003720 <xTaskIncrementTick+0x15c>)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800366c:	e02f      	b.n	80036ce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	3304      	adds	r3, #4
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe ff46 	bl	8002504 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	3318      	adds	r3, #24
 8003684:	4618      	mov	r0, r3
 8003686:	f7fe ff3d 	bl	8002504 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368e:	4b25      	ldr	r3, [pc, #148]	@ (8003724 <xTaskIncrementTick+0x160>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	429a      	cmp	r2, r3
 8003694:	d903      	bls.n	800369e <xTaskIncrementTick+0xda>
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369a:	4a22      	ldr	r2, [pc, #136]	@ (8003724 <xTaskIncrementTick+0x160>)
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4a1f      	ldr	r2, [pc, #124]	@ (8003728 <xTaskIncrementTick+0x164>)
 80036ac:	441a      	add	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	3304      	adds	r3, #4
 80036b2:	4619      	mov	r1, r3
 80036b4:	4610      	mov	r0, r2
 80036b6:	f7fe fec8 	bl	800244a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036be:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <xTaskIncrementTick+0x168>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d3b8      	bcc.n	800363a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80036c8:	2301      	movs	r3, #1
 80036ca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036cc:	e7b5      	b.n	800363a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036ce:	4b17      	ldr	r3, [pc, #92]	@ (800372c <xTaskIncrementTick+0x168>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d4:	4914      	ldr	r1, [pc, #80]	@ (8003728 <xTaskIncrementTick+0x164>)
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d901      	bls.n	80036ea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80036e6:	2301      	movs	r3, #1
 80036e8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80036ea:	4b11      	ldr	r3, [pc, #68]	@ (8003730 <xTaskIncrementTick+0x16c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d007      	beq.n	8003702 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80036f2:	2301      	movs	r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	e004      	b.n	8003702 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80036f8:	4b0e      	ldr	r3, [pc, #56]	@ (8003734 <xTaskIncrementTick+0x170>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3301      	adds	r3, #1
 80036fe:	4a0d      	ldr	r2, [pc, #52]	@ (8003734 <xTaskIncrementTick+0x170>)
 8003700:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003702:	697b      	ldr	r3, [r7, #20]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	20000c78 	.word	0x20000c78
 8003710:	20000c54 	.word	0x20000c54
 8003714:	20000c08 	.word	0x20000c08
 8003718:	20000c0c 	.word	0x20000c0c
 800371c:	20000c68 	.word	0x20000c68
 8003720:	20000c70 	.word	0x20000c70
 8003724:	20000c58 	.word	0x20000c58
 8003728:	20000780 	.word	0x20000780
 800372c:	2000077c 	.word	0x2000077c
 8003730:	20000c64 	.word	0x20000c64
 8003734:	20000c60 	.word	0x20000c60

08003738 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800373e:	4b28      	ldr	r3, [pc, #160]	@ (80037e0 <vTaskSwitchContext+0xa8>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003746:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <vTaskSwitchContext+0xac>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800374c:	e042      	b.n	80037d4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800374e:	4b25      	ldr	r3, [pc, #148]	@ (80037e4 <vTaskSwitchContext+0xac>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003754:	4b24      	ldr	r3, [pc, #144]	@ (80037e8 <vTaskSwitchContext+0xb0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	e011      	b.n	8003780 <vTaskSwitchContext+0x48>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10b      	bne.n	800377a <vTaskSwitchContext+0x42>
	__asm volatile
 8003762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	607b      	str	r3, [r7, #4]
}
 8003774:	bf00      	nop
 8003776:	bf00      	nop
 8003778:	e7fd      	b.n	8003776 <vTaskSwitchContext+0x3e>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	3b01      	subs	r3, #1
 800377e:	60fb      	str	r3, [r7, #12]
 8003780:	491a      	ldr	r1, [pc, #104]	@ (80037ec <vTaskSwitchContext+0xb4>)
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0e3      	beq.n	800375c <vTaskSwitchContext+0x24>
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4a13      	ldr	r2, [pc, #76]	@ (80037ec <vTaskSwitchContext+0xb4>)
 80037a0:	4413      	add	r3, r2
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	3308      	adds	r3, #8
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d104      	bne.n	80037c4 <vTaskSwitchContext+0x8c>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	685a      	ldr	r2, [r3, #4]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	605a      	str	r2, [r3, #4]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4a09      	ldr	r2, [pc, #36]	@ (80037f0 <vTaskSwitchContext+0xb8>)
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	4a06      	ldr	r2, [pc, #24]	@ (80037e8 <vTaskSwitchContext+0xb0>)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6013      	str	r3, [r2, #0]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20000c78 	.word	0x20000c78
 80037e4:	20000c64 	.word	0x20000c64
 80037e8:	20000c58 	.word	0x20000c58
 80037ec:	20000780 	.word	0x20000780
 80037f0:	2000077c 	.word	0x2000077c

080037f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10b      	bne.n	800381c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003808:	f383 8811 	msr	BASEPRI, r3
 800380c:	f3bf 8f6f 	isb	sy
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	60fb      	str	r3, [r7, #12]
}
 8003816:	bf00      	nop
 8003818:	bf00      	nop
 800381a:	e7fd      	b.n	8003818 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800381c:	4b07      	ldr	r3, [pc, #28]	@ (800383c <vTaskPlaceOnEventList+0x48>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	3318      	adds	r3, #24
 8003822:	4619      	mov	r1, r3
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7fe fe34 	bl	8002492 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800382a:	2101      	movs	r1, #1
 800382c:	6838      	ldr	r0, [r7, #0]
 800382e:	f000 fa81 	bl	8003d34 <prvAddCurrentTaskToDelayedList>
}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	2000077c 	.word	0x2000077c

08003840 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10b      	bne.n	800386a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003856:	f383 8811 	msr	BASEPRI, r3
 800385a:	f3bf 8f6f 	isb	sy
 800385e:	f3bf 8f4f 	dsb	sy
 8003862:	617b      	str	r3, [r7, #20]
}
 8003864:	bf00      	nop
 8003866:	bf00      	nop
 8003868:	e7fd      	b.n	8003866 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800386a:	4b0a      	ldr	r3, [pc, #40]	@ (8003894 <vTaskPlaceOnEventListRestricted+0x54>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	3318      	adds	r3, #24
 8003870:	4619      	mov	r1, r3
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f7fe fde9 	bl	800244a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800387e:	f04f 33ff 	mov.w	r3, #4294967295
 8003882:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	68b8      	ldr	r0, [r7, #8]
 8003888:	f000 fa54 	bl	8003d34 <prvAddCurrentTaskToDelayedList>
	}
 800388c:	bf00      	nop
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	2000077c 	.word	0x2000077c

08003898 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10b      	bne.n	80038c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	60fb      	str	r3, [r7, #12]
}
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	e7fd      	b.n	80038c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	3318      	adds	r3, #24
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe fe1a 	bl	8002504 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003948 <xTaskRemoveFromEventList+0xb0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d11d      	bne.n	8003914 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	3304      	adds	r3, #4
 80038dc:	4618      	mov	r0, r3
 80038de:	f7fe fe11 	bl	8002504 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e6:	4b19      	ldr	r3, [pc, #100]	@ (800394c <xTaskRemoveFromEventList+0xb4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d903      	bls.n	80038f6 <xTaskRemoveFromEventList+0x5e>
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f2:	4a16      	ldr	r2, [pc, #88]	@ (800394c <xTaskRemoveFromEventList+0xb4>)
 80038f4:	6013      	str	r3, [r2, #0]
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038fa:	4613      	mov	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4a13      	ldr	r2, [pc, #76]	@ (8003950 <xTaskRemoveFromEventList+0xb8>)
 8003904:	441a      	add	r2, r3
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	3304      	adds	r3, #4
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f7fe fd9c 	bl	800244a <vListInsertEnd>
 8003912:	e005      	b.n	8003920 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	3318      	adds	r3, #24
 8003918:	4619      	mov	r1, r3
 800391a:	480e      	ldr	r0, [pc, #56]	@ (8003954 <xTaskRemoveFromEventList+0xbc>)
 800391c:	f7fe fd95 	bl	800244a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003924:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <xTaskRemoveFromEventList+0xc0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392a:	429a      	cmp	r2, r3
 800392c:	d905      	bls.n	800393a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800392e:	2301      	movs	r3, #1
 8003930:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003932:	4b0a      	ldr	r3, [pc, #40]	@ (800395c <xTaskRemoveFromEventList+0xc4>)
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e001      	b.n	800393e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800393e:	697b      	ldr	r3, [r7, #20]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000c78 	.word	0x20000c78
 800394c:	20000c58 	.word	0x20000c58
 8003950:	20000780 	.word	0x20000780
 8003954:	20000c10 	.word	0x20000c10
 8003958:	2000077c 	.word	0x2000077c
 800395c:	20000c64 	.word	0x20000c64

08003960 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003968:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <vTaskInternalSetTimeOutState+0x24>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003970:	4b05      	ldr	r3, [pc, #20]	@ (8003988 <vTaskInternalSetTimeOutState+0x28>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	605a      	str	r2, [r3, #4]
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	20000c68 	.word	0x20000c68
 8003988:	20000c54 	.word	0x20000c54

0800398c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	613b      	str	r3, [r7, #16]
}
 80039ae:	bf00      	nop
 80039b0:	bf00      	nop
 80039b2:	e7fd      	b.n	80039b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10b      	bne.n	80039d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80039ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	60fb      	str	r3, [r7, #12]
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	e7fd      	b.n	80039ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80039d2:	f000 fe91 	bl	80046f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80039d6:	4b1d      	ldr	r3, [pc, #116]	@ (8003a4c <xTaskCheckForTimeOut+0xc0>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ee:	d102      	bne.n	80039f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80039f0:	2300      	movs	r3, #0
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	e023      	b.n	8003a3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b15      	ldr	r3, [pc, #84]	@ (8003a50 <xTaskCheckForTimeOut+0xc4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d007      	beq.n	8003a12 <xTaskCheckForTimeOut+0x86>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d302      	bcc.n	8003a12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	61fb      	str	r3, [r7, #28]
 8003a10:	e015      	b.n	8003a3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d20b      	bcs.n	8003a34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	1ad2      	subs	r2, r2, r3
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff ff99 	bl	8003960 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	e004      	b.n	8003a3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a3e:	f000 fe8d 	bl	800475c <vPortExitCritical>

	return xReturn;
 8003a42:	69fb      	ldr	r3, [r7, #28]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3720      	adds	r7, #32
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	20000c54 	.word	0x20000c54
 8003a50:	20000c68 	.word	0x20000c68

08003a54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a58:	4b03      	ldr	r3, [pc, #12]	@ (8003a68 <vTaskMissedYield+0x14>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
}
 8003a5e:	bf00      	nop
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	20000c64 	.word	0x20000c64

08003a6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a74:	f000 f852 	bl	8003b1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a78:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <prvIdleTask+0x28>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d9f9      	bls.n	8003a74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a80:	4b05      	ldr	r3, [pc, #20]	@ (8003a98 <prvIdleTask+0x2c>)
 8003a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a90:	e7f0      	b.n	8003a74 <prvIdleTask+0x8>
 8003a92:	bf00      	nop
 8003a94:	20000780 	.word	0x20000780
 8003a98:	e000ed04 	.word	0xe000ed04

08003a9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
 8003aa6:	e00c      	b.n	8003ac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4a12      	ldr	r2, [pc, #72]	@ (8003afc <prvInitialiseTaskLists+0x60>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fe fc9a 	bl	80023f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b37      	cmp	r3, #55	@ 0x37
 8003ac6:	d9ef      	bls.n	8003aa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ac8:	480d      	ldr	r0, [pc, #52]	@ (8003b00 <prvInitialiseTaskLists+0x64>)
 8003aca:	f7fe fc91 	bl	80023f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003ace:	480d      	ldr	r0, [pc, #52]	@ (8003b04 <prvInitialiseTaskLists+0x68>)
 8003ad0:	f7fe fc8e 	bl	80023f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003ad4:	480c      	ldr	r0, [pc, #48]	@ (8003b08 <prvInitialiseTaskLists+0x6c>)
 8003ad6:	f7fe fc8b 	bl	80023f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ada:	480c      	ldr	r0, [pc, #48]	@ (8003b0c <prvInitialiseTaskLists+0x70>)
 8003adc:	f7fe fc88 	bl	80023f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ae0:	480b      	ldr	r0, [pc, #44]	@ (8003b10 <prvInitialiseTaskLists+0x74>)
 8003ae2:	f7fe fc85 	bl	80023f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <prvInitialiseTaskLists+0x78>)
 8003ae8:	4a05      	ldr	r2, [pc, #20]	@ (8003b00 <prvInitialiseTaskLists+0x64>)
 8003aea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003aec:	4b0a      	ldr	r3, [pc, #40]	@ (8003b18 <prvInitialiseTaskLists+0x7c>)
 8003aee:	4a05      	ldr	r2, [pc, #20]	@ (8003b04 <prvInitialiseTaskLists+0x68>)
 8003af0:	601a      	str	r2, [r3, #0]
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000780 	.word	0x20000780
 8003b00:	20000be0 	.word	0x20000be0
 8003b04:	20000bf4 	.word	0x20000bf4
 8003b08:	20000c10 	.word	0x20000c10
 8003b0c:	20000c24 	.word	0x20000c24
 8003b10:	20000c3c 	.word	0x20000c3c
 8003b14:	20000c08 	.word	0x20000c08
 8003b18:	20000c0c 	.word	0x20000c0c

08003b1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b22:	e019      	b.n	8003b58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b24:	f000 fde8 	bl	80046f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b28:	4b10      	ldr	r3, [pc, #64]	@ (8003b6c <prvCheckTasksWaitingTermination+0x50>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3304      	adds	r3, #4
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fe fce5 	bl	8002504 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b70 <prvCheckTasksWaitingTermination+0x54>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	4a0b      	ldr	r2, [pc, #44]	@ (8003b70 <prvCheckTasksWaitingTermination+0x54>)
 8003b42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b44:	4b0b      	ldr	r3, [pc, #44]	@ (8003b74 <prvCheckTasksWaitingTermination+0x58>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b74 <prvCheckTasksWaitingTermination+0x58>)
 8003b4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b4e:	f000 fe05 	bl	800475c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f810 	bl	8003b78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b58:	4b06      	ldr	r3, [pc, #24]	@ (8003b74 <prvCheckTasksWaitingTermination+0x58>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e1      	bne.n	8003b24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000c24 	.word	0x20000c24
 8003b70:	20000c50 	.word	0x20000c50
 8003b74:	20000c38 	.word	0x20000c38

08003b78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d108      	bne.n	8003b9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 ffa2 	bl	8004ad8 <vPortFree>
				vPortFree( pxTCB );
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 ff9f 	bl	8004ad8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b9a:	e019      	b.n	8003bd0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d103      	bne.n	8003bae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 ff96 	bl	8004ad8 <vPortFree>
	}
 8003bac:	e010      	b.n	8003bd0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d00b      	beq.n	8003bd0 <prvDeleteTCB+0x58>
	__asm volatile
 8003bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbc:	f383 8811 	msr	BASEPRI, r3
 8003bc0:	f3bf 8f6f 	isb	sy
 8003bc4:	f3bf 8f4f 	dsb	sy
 8003bc8:	60fb      	str	r3, [r7, #12]
}
 8003bca:	bf00      	nop
 8003bcc:	bf00      	nop
 8003bce:	e7fd      	b.n	8003bcc <prvDeleteTCB+0x54>
	}
 8003bd0:	bf00      	nop
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bde:	4b0c      	ldr	r3, [pc, #48]	@ (8003c10 <prvResetNextTaskUnblockTime+0x38>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d104      	bne.n	8003bf2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003be8:	4b0a      	ldr	r3, [pc, #40]	@ (8003c14 <prvResetNextTaskUnblockTime+0x3c>)
 8003bea:	f04f 32ff 	mov.w	r2, #4294967295
 8003bee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003bf0:	e008      	b.n	8003c04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf2:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <prvResetNextTaskUnblockTime+0x38>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4a04      	ldr	r2, [pc, #16]	@ (8003c14 <prvResetNextTaskUnblockTime+0x3c>)
 8003c02:	6013      	str	r3, [r2, #0]
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	20000c08 	.word	0x20000c08
 8003c14:	20000c70 	.word	0x20000c70

08003c18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <xTaskGetSchedulerState+0x34>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d102      	bne.n	8003c2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c26:	2301      	movs	r3, #1
 8003c28:	607b      	str	r3, [r7, #4]
 8003c2a:	e008      	b.n	8003c3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c2c:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <xTaskGetSchedulerState+0x38>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d102      	bne.n	8003c3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c34:	2302      	movs	r3, #2
 8003c36:	607b      	str	r3, [r7, #4]
 8003c38:	e001      	b.n	8003c3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c3e:	687b      	ldr	r3, [r7, #4]
	}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	20000c5c 	.word	0x20000c5c
 8003c50:	20000c78 	.word	0x20000c78

08003c54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d058      	beq.n	8003d1c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c6a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d28 <xTaskPriorityDisinherit+0xd4>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d00b      	beq.n	8003c8c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c78:	f383 8811 	msr	BASEPRI, r3
 8003c7c:	f3bf 8f6f 	isb	sy
 8003c80:	f3bf 8f4f 	dsb	sy
 8003c84:	60fb      	str	r3, [r7, #12]
}
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	e7fd      	b.n	8003c88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10b      	bne.n	8003cac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	60bb      	str	r3, [r7, #8]
}
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	e7fd      	b.n	8003ca8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cb0:	1e5a      	subs	r2, r3, #1
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d02c      	beq.n	8003d1c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d128      	bne.n	8003d1c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	3304      	adds	r3, #4
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fe fc18 	bl	8002504 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cec:	4b0f      	ldr	r3, [pc, #60]	@ (8003d2c <xTaskPriorityDisinherit+0xd8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d903      	bls.n	8003cfc <xTaskPriorityDisinherit+0xa8>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8003d2c <xTaskPriorityDisinherit+0xd8>)
 8003cfa:	6013      	str	r3, [r2, #0]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d00:	4613      	mov	r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4a09      	ldr	r2, [pc, #36]	@ (8003d30 <xTaskPriorityDisinherit+0xdc>)
 8003d0a:	441a      	add	r2, r3
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f7fe fb99 	bl	800244a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d1c:	697b      	ldr	r3, [r7, #20]
	}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	2000077c 	.word	0x2000077c
 8003d2c:	20000c58 	.word	0x20000c58
 8003d30:	20000780 	.word	0x20000780

08003d34 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d3e:	4b21      	ldr	r3, [pc, #132]	@ (8003dc4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d44:	4b20      	ldr	r3, [pc, #128]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fe fbda 	bl	8002504 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d56:	d10a      	bne.n	8003d6e <prvAddCurrentTaskToDelayedList+0x3a>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d007      	beq.n	8003d6e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4819      	ldr	r0, [pc, #100]	@ (8003dcc <prvAddCurrentTaskToDelayedList+0x98>)
 8003d68:	f7fe fb6f 	bl	800244a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d6c:	e026      	b.n	8003dbc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4413      	add	r3, r2
 8003d74:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d76:	4b14      	ldr	r3, [pc, #80]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68ba      	ldr	r2, [r7, #8]
 8003d7c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d209      	bcs.n	8003d9a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d86:	4b12      	ldr	r3, [pc, #72]	@ (8003dd0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3304      	adds	r3, #4
 8003d90:	4619      	mov	r1, r3
 8003d92:	4610      	mov	r0, r2
 8003d94:	f7fe fb7d 	bl	8002492 <vListInsert>
}
 8003d98:	e010      	b.n	8003dbc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3304      	adds	r3, #4
 8003da4:	4619      	mov	r1, r3
 8003da6:	4610      	mov	r0, r2
 8003da8:	f7fe fb73 	bl	8002492 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003dac:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d202      	bcs.n	8003dbc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003db6:	4a08      	ldr	r2, [pc, #32]	@ (8003dd8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	6013      	str	r3, [r2, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20000c54 	.word	0x20000c54
 8003dc8:	2000077c 	.word	0x2000077c
 8003dcc:	20000c3c 	.word	0x20000c3c
 8003dd0:	20000c0c 	.word	0x20000c0c
 8003dd4:	20000c08 	.word	0x20000c08
 8003dd8:	20000c70 	.word	0x20000c70

08003ddc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	@ 0x28
 8003de0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003de6:	f000 fb13 	bl	8004410 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003dea:	4b1d      	ldr	r3, [pc, #116]	@ (8003e60 <xTimerCreateTimerTask+0x84>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d021      	beq.n	8003e36 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003dfa:	1d3a      	adds	r2, r7, #4
 8003dfc:	f107 0108 	add.w	r1, r7, #8
 8003e00:	f107 030c 	add.w	r3, r7, #12
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7fe fad9 	bl	80023bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	9202      	str	r2, [sp, #8]
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	2302      	movs	r3, #2
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	460a      	mov	r2, r1
 8003e1c:	4911      	ldr	r1, [pc, #68]	@ (8003e64 <xTimerCreateTimerTask+0x88>)
 8003e1e:	4812      	ldr	r0, [pc, #72]	@ (8003e68 <xTimerCreateTimerTask+0x8c>)
 8003e20:	f7ff f8d0 	bl	8002fc4 <xTaskCreateStatic>
 8003e24:	4603      	mov	r3, r0
 8003e26:	4a11      	ldr	r2, [pc, #68]	@ (8003e6c <xTimerCreateTimerTask+0x90>)
 8003e28:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e2a:	4b10      	ldr	r3, [pc, #64]	@ (8003e6c <xTimerCreateTimerTask+0x90>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003e32:	2301      	movs	r3, #1
 8003e34:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	613b      	str	r3, [r7, #16]
}
 8003e4e:	bf00      	nop
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003e54:	697b      	ldr	r3, [r7, #20]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000cac 	.word	0x20000cac
 8003e64:	08004dd8 	.word	0x08004dd8
 8003e68:	08003fa9 	.word	0x08003fa9
 8003e6c:	20000cb0 	.word	0x20000cb0

08003e70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	@ 0x28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <xTimerGenericCommand+0x30>
	__asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	623b      	str	r3, [r7, #32]
}
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	e7fd      	b.n	8003e9c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ea0:	4b19      	ldr	r3, [pc, #100]	@ (8003f08 <xTimerGenericCommand+0x98>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d02a      	beq.n	8003efe <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	dc18      	bgt.n	8003eec <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003eba:	f7ff fead 	bl	8003c18 <xTaskGetSchedulerState>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d109      	bne.n	8003ed8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003ec4:	4b10      	ldr	r3, [pc, #64]	@ (8003f08 <xTimerGenericCommand+0x98>)
 8003ec6:	6818      	ldr	r0, [r3, #0]
 8003ec8:	f107 0110 	add.w	r1, r7, #16
 8003ecc:	2300      	movs	r3, #0
 8003ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ed0:	f7fe fc88 	bl	80027e4 <xQueueGenericSend>
 8003ed4:	6278      	str	r0, [r7, #36]	@ 0x24
 8003ed6:	e012      	b.n	8003efe <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <xTimerGenericCommand+0x98>)
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	f107 0110 	add.w	r1, r7, #16
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f7fe fc7e 	bl	80027e4 <xQueueGenericSend>
 8003ee8:	6278      	str	r0, [r7, #36]	@ 0x24
 8003eea:	e008      	b.n	8003efe <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003eec:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <xTimerGenericCommand+0x98>)
 8003eee:	6818      	ldr	r0, [r3, #0]
 8003ef0:	f107 0110 	add.w	r1, r7, #16
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	f7fe fd76 	bl	80029e8 <xQueueGenericSendFromISR>
 8003efc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3728      	adds	r7, #40	@ 0x28
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000cac 	.word	0x20000cac

08003f0c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b088      	sub	sp, #32
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f16:	4b23      	ldr	r3, [pc, #140]	@ (8003fa4 <prvProcessExpiredTimer+0x98>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	3304      	adds	r3, #4
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe faed 	bl	8002504 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d023      	beq.n	8003f80 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	699a      	ldr	r2, [r3, #24]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	18d1      	adds	r1, r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	6978      	ldr	r0, [r7, #20]
 8003f46:	f000 f8d5 	bl	80040f4 <prvInsertTimerInActiveList>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d020      	beq.n	8003f92 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f50:	2300      	movs	r3, #0
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	2300      	movs	r3, #0
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	2100      	movs	r1, #0
 8003f5a:	6978      	ldr	r0, [r7, #20]
 8003f5c:	f7ff ff88 	bl	8003e70 <xTimerGenericCommand>
 8003f60:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d114      	bne.n	8003f92 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	60fb      	str	r3, [r7, #12]
}
 8003f7a:	bf00      	nop
 8003f7c:	bf00      	nop
 8003f7e:	e7fd      	b.n	8003f7c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	6a1b      	ldr	r3, [r3, #32]
 8003f96:	6978      	ldr	r0, [r7, #20]
 8003f98:	4798      	blx	r3
}
 8003f9a:	bf00      	nop
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000ca4 	.word	0x20000ca4

08003fa8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fb0:	f107 0308 	add.w	r3, r7, #8
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 f859 	bl	800406c <prvGetNextExpireTime>
 8003fba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	68f8      	ldr	r0, [r7, #12]
 8003fc2:	f000 f805 	bl	8003fd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003fc6:	f000 f8d7 	bl	8004178 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fca:	bf00      	nop
 8003fcc:	e7f0      	b.n	8003fb0 <prvTimerTask+0x8>
	...

08003fd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003fda:	f7ff fa37 	bl	800344c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fde:	f107 0308 	add.w	r3, r7, #8
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f866 	bl	80040b4 <prvSampleTimeNow>
 8003fe8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d130      	bne.n	8004052 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10a      	bne.n	800400c <prvProcessTimerOrBlockTask+0x3c>
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d806      	bhi.n	800400c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003ffe:	f7ff fa33 	bl	8003468 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004002:	68f9      	ldr	r1, [r7, #12]
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff ff81 	bl	8003f0c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800400a:	e024      	b.n	8004056 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d008      	beq.n	8004024 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004012:	4b13      	ldr	r3, [pc, #76]	@ (8004060 <prvProcessTimerOrBlockTask+0x90>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <prvProcessTimerOrBlockTask+0x50>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <prvProcessTimerOrBlockTask+0x52>
 8004020:	2300      	movs	r3, #0
 8004022:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004024:	4b0f      	ldr	r3, [pc, #60]	@ (8004064 <prvProcessTimerOrBlockTask+0x94>)
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	4619      	mov	r1, r3
 8004032:	f7fe ff93 	bl	8002f5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004036:	f7ff fa17 	bl	8003468 <xTaskResumeAll>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10a      	bne.n	8004056 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004040:	4b09      	ldr	r3, [pc, #36]	@ (8004068 <prvProcessTimerOrBlockTask+0x98>)
 8004042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy
}
 8004050:	e001      	b.n	8004056 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004052:	f7ff fa09 	bl	8003468 <xTaskResumeAll>
}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000ca8 	.word	0x20000ca8
 8004064:	20000cac 	.word	0x20000cac
 8004068:	e000ed04 	.word	0xe000ed04

0800406c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004074:	4b0e      	ldr	r3, [pc, #56]	@ (80040b0 <prvGetNextExpireTime+0x44>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <prvGetNextExpireTime+0x16>
 800407e:	2201      	movs	r2, #1
 8004080:	e000      	b.n	8004084 <prvGetNextExpireTime+0x18>
 8004082:	2200      	movs	r2, #0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004090:	4b07      	ldr	r3, [pc, #28]	@ (80040b0 <prvGetNextExpireTime+0x44>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	e001      	b.n	80040a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80040a0:	68fb      	ldr	r3, [r7, #12]
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3714      	adds	r7, #20
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	20000ca4 	.word	0x20000ca4

080040b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80040bc:	f7ff fa72 	bl	80035a4 <xTaskGetTickCount>
 80040c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80040c2:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <prvSampleTimeNow+0x3c>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d205      	bcs.n	80040d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80040cc:	f000 f93a 	bl	8004344 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
 80040d6:	e002      	b.n	80040de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80040de:	4a04      	ldr	r2, [pc, #16]	@ (80040f0 <prvSampleTimeNow+0x3c>)
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80040e4:	68fb      	ldr	r3, [r7, #12]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000cb4 	.word	0x20000cb4

080040f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	429a      	cmp	r2, r3
 8004118:	d812      	bhi.n	8004140 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	1ad2      	subs	r2, r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	429a      	cmp	r2, r3
 8004126:	d302      	bcc.n	800412e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004128:	2301      	movs	r3, #1
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e01b      	b.n	8004166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800412e:	4b10      	ldr	r3, [pc, #64]	@ (8004170 <prvInsertTimerInActiveList+0x7c>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3304      	adds	r3, #4
 8004136:	4619      	mov	r1, r3
 8004138:	4610      	mov	r0, r2
 800413a:	f7fe f9aa 	bl	8002492 <vListInsert>
 800413e:	e012      	b.n	8004166 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	429a      	cmp	r2, r3
 8004146:	d206      	bcs.n	8004156 <prvInsertTimerInActiveList+0x62>
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d302      	bcc.n	8004156 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004150:	2301      	movs	r3, #1
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e007      	b.n	8004166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004156:	4b07      	ldr	r3, [pc, #28]	@ (8004174 <prvInsertTimerInActiveList+0x80>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3304      	adds	r3, #4
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f7fe f996 	bl	8002492 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004166:	697b      	ldr	r3, [r7, #20]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000ca8 	.word	0x20000ca8
 8004174:	20000ca4 	.word	0x20000ca4

08004178 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b08e      	sub	sp, #56	@ 0x38
 800417c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800417e:	e0ce      	b.n	800431e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	da19      	bge.n	80041ba <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004186:	1d3b      	adds	r3, r7, #4
 8004188:	3304      	adds	r3, #4
 800418a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800418c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10b      	bne.n	80041aa <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	61fb      	str	r3, [r7, #28]
}
 80041a4:	bf00      	nop
 80041a6:	bf00      	nop
 80041a8:	e7fd      	b.n	80041a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041b0:	6850      	ldr	r0, [r2, #4]
 80041b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041b4:	6892      	ldr	r2, [r2, #8]
 80041b6:	4611      	mov	r1, r2
 80041b8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f2c0 80ae 	blt.w	800431e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d004      	beq.n	80041d8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d0:	3304      	adds	r3, #4
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7fe f996 	bl	8002504 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041d8:	463b      	mov	r3, r7
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ff6a 	bl	80040b4 <prvSampleTimeNow>
 80041e0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b09      	cmp	r3, #9
 80041e6:	f200 8097 	bhi.w	8004318 <prvProcessReceivedCommands+0x1a0>
 80041ea:	a201      	add	r2, pc, #4	@ (adr r2, 80041f0 <prvProcessReceivedCommands+0x78>)
 80041ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f0:	08004219 	.word	0x08004219
 80041f4:	08004219 	.word	0x08004219
 80041f8:	08004219 	.word	0x08004219
 80041fc:	0800428f 	.word	0x0800428f
 8004200:	080042a3 	.word	0x080042a3
 8004204:	080042ef 	.word	0x080042ef
 8004208:	08004219 	.word	0x08004219
 800420c:	08004219 	.word	0x08004219
 8004210:	0800428f 	.word	0x0800428f
 8004214:	080042a3 	.word	0x080042a3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	b2da      	uxtb	r2, r3
 8004224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004226:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	18d1      	adds	r1, r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004238:	f7ff ff5c 	bl	80040f4 <prvInsertTimerInActiveList>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d06c      	beq.n	800431c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004248:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800424a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004250:	f003 0304 	and.w	r3, r3, #4
 8004254:	2b00      	cmp	r3, #0
 8004256:	d061      	beq.n	800431c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	441a      	add	r2, r3
 8004260:	2300      	movs	r3, #0
 8004262:	9300      	str	r3, [sp, #0]
 8004264:	2300      	movs	r3, #0
 8004266:	2100      	movs	r1, #0
 8004268:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800426a:	f7ff fe01 	bl	8003e70 <xTimerGenericCommand>
 800426e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d152      	bne.n	800431c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800427a:	f383 8811 	msr	BASEPRI, r3
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f3bf 8f4f 	dsb	sy
 8004286:	61bb      	str	r3, [r7, #24]
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	e7fd      	b.n	800428a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800428e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	b2da      	uxtb	r2, r3
 800429a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80042a0:	e03d      	b.n	800431e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10b      	bne.n	80042da <prvProcessReceivedCommands+0x162>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	617b      	str	r3, [r7, #20]
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	e7fd      	b.n	80042d6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	18d1      	adds	r1, r2, r3
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042e8:	f7ff ff04 	bl	80040f4 <prvInsertTimerInActiveList>
					break;
 80042ec:	e017      	b.n	800431e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80042ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d103      	bne.n	8004304 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80042fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80042fe:	f000 fbeb 	bl	8004ad8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004302:	e00c      	b.n	800431e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004306:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	b2da      	uxtb	r2, r3
 8004310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004312:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004316:	e002      	b.n	800431e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004318:	bf00      	nop
 800431a:	e000      	b.n	800431e <prvProcessReceivedCommands+0x1a6>
					break;
 800431c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800431e:	4b08      	ldr	r3, [pc, #32]	@ (8004340 <prvProcessReceivedCommands+0x1c8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	1d39      	adds	r1, r7, #4
 8004324:	2200      	movs	r2, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f7fe fbfc 	bl	8002b24 <xQueueReceive>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	f47f af26 	bne.w	8004180 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004334:	bf00      	nop
 8004336:	bf00      	nop
 8004338:	3730      	adds	r7, #48	@ 0x30
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000cac 	.word	0x20000cac

08004344 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800434a:	e049      	b.n	80043e0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800434c:	4b2e      	ldr	r3, [pc, #184]	@ (8004408 <prvSwitchTimerLists+0xc4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004356:	4b2c      	ldr	r3, [pc, #176]	@ (8004408 <prvSwitchTimerLists+0xc4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	3304      	adds	r3, #4
 8004364:	4618      	mov	r0, r3
 8004366:	f7fe f8cd 	bl	8002504 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d02f      	beq.n	80043e0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4413      	add	r3, r2
 8004388:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	429a      	cmp	r2, r3
 8004390:	d90e      	bls.n	80043b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800439e:	4b1a      	ldr	r3, [pc, #104]	@ (8004408 <prvSwitchTimerLists+0xc4>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f7fe f872 	bl	8002492 <vListInsert>
 80043ae:	e017      	b.n	80043e0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043b0:	2300      	movs	r3, #0
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	2300      	movs	r3, #0
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	2100      	movs	r1, #0
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff fd58 	bl	8003e70 <xTimerGenericCommand>
 80043c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10b      	bne.n	80043e0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	603b      	str	r3, [r7, #0]
}
 80043da:	bf00      	nop
 80043dc:	bf00      	nop
 80043de:	e7fd      	b.n	80043dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043e0:	4b09      	ldr	r3, [pc, #36]	@ (8004408 <prvSwitchTimerLists+0xc4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1b0      	bne.n	800434c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80043ea:	4b07      	ldr	r3, [pc, #28]	@ (8004408 <prvSwitchTimerLists+0xc4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80043f0:	4b06      	ldr	r3, [pc, #24]	@ (800440c <prvSwitchTimerLists+0xc8>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a04      	ldr	r2, [pc, #16]	@ (8004408 <prvSwitchTimerLists+0xc4>)
 80043f6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80043f8:	4a04      	ldr	r2, [pc, #16]	@ (800440c <prvSwitchTimerLists+0xc8>)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	6013      	str	r3, [r2, #0]
}
 80043fe:	bf00      	nop
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000ca4 	.word	0x20000ca4
 800440c:	20000ca8 	.word	0x20000ca8

08004410 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004416:	f000 f96f 	bl	80046f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800441a:	4b15      	ldr	r3, [pc, #84]	@ (8004470 <prvCheckForValidListAndQueue+0x60>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d120      	bne.n	8004464 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004422:	4814      	ldr	r0, [pc, #80]	@ (8004474 <prvCheckForValidListAndQueue+0x64>)
 8004424:	f7fd ffe4 	bl	80023f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004428:	4813      	ldr	r0, [pc, #76]	@ (8004478 <prvCheckForValidListAndQueue+0x68>)
 800442a:	f7fd ffe1 	bl	80023f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800442e:	4b13      	ldr	r3, [pc, #76]	@ (800447c <prvCheckForValidListAndQueue+0x6c>)
 8004430:	4a10      	ldr	r2, [pc, #64]	@ (8004474 <prvCheckForValidListAndQueue+0x64>)
 8004432:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004434:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <prvCheckForValidListAndQueue+0x70>)
 8004436:	4a10      	ldr	r2, [pc, #64]	@ (8004478 <prvCheckForValidListAndQueue+0x68>)
 8004438:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800443a:	2300      	movs	r3, #0
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	4b11      	ldr	r3, [pc, #68]	@ (8004484 <prvCheckForValidListAndQueue+0x74>)
 8004440:	4a11      	ldr	r2, [pc, #68]	@ (8004488 <prvCheckForValidListAndQueue+0x78>)
 8004442:	2110      	movs	r1, #16
 8004444:	200a      	movs	r0, #10
 8004446:	f7fe f8f1 	bl	800262c <xQueueGenericCreateStatic>
 800444a:	4603      	mov	r3, r0
 800444c:	4a08      	ldr	r2, [pc, #32]	@ (8004470 <prvCheckForValidListAndQueue+0x60>)
 800444e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004450:	4b07      	ldr	r3, [pc, #28]	@ (8004470 <prvCheckForValidListAndQueue+0x60>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d005      	beq.n	8004464 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004458:	4b05      	ldr	r3, [pc, #20]	@ (8004470 <prvCheckForValidListAndQueue+0x60>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	490b      	ldr	r1, [pc, #44]	@ (800448c <prvCheckForValidListAndQueue+0x7c>)
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fd52 	bl	8002f08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004464:	f000 f97a 	bl	800475c <vPortExitCritical>
}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	20000cac 	.word	0x20000cac
 8004474:	20000c7c 	.word	0x20000c7c
 8004478:	20000c90 	.word	0x20000c90
 800447c:	20000ca4 	.word	0x20000ca4
 8004480:	20000ca8 	.word	0x20000ca8
 8004484:	20000d58 	.word	0x20000d58
 8004488:	20000cb8 	.word	0x20000cb8
 800448c:	08004de0 	.word	0x08004de0

08004490 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3b04      	subs	r3, #4
 80044a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3b04      	subs	r3, #4
 80044ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f023 0201 	bic.w	r2, r3, #1
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3b04      	subs	r3, #4
 80044be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044c0:	4a0c      	ldr	r2, [pc, #48]	@ (80044f4 <pxPortInitialiseStack+0x64>)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3b14      	subs	r3, #20
 80044ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3b04      	subs	r3, #4
 80044d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f06f 0202 	mvn.w	r2, #2
 80044de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	3b20      	subs	r3, #32
 80044e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80044e6:	68fb      	ldr	r3, [r7, #12]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3714      	adds	r7, #20
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	080044f9 	.word	0x080044f9

080044f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80044f8:	b480      	push	{r7}
 80044fa:	b085      	sub	sp, #20
 80044fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80044fe:	2300      	movs	r3, #0
 8004500:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004502:	4b13      	ldr	r3, [pc, #76]	@ (8004550 <prvTaskExitError+0x58>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800450a:	d00b      	beq.n	8004524 <prvTaskExitError+0x2c>
	__asm volatile
 800450c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004510:	f383 8811 	msr	BASEPRI, r3
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	f3bf 8f4f 	dsb	sy
 800451c:	60fb      	str	r3, [r7, #12]
}
 800451e:	bf00      	nop
 8004520:	bf00      	nop
 8004522:	e7fd      	b.n	8004520 <prvTaskExitError+0x28>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	60bb      	str	r3, [r7, #8]
}
 8004536:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004538:	bf00      	nop
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d0fc      	beq.n	800453a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	2000000c 	.word	0x2000000c
	...

08004560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004560:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <pxCurrentTCBConst2>)
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	6808      	ldr	r0, [r1, #0]
 8004566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	f380 8809 	msr	PSP, r0
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8811 	msr	BASEPRI, r0
 800457a:	4770      	bx	lr
 800457c:	f3af 8000 	nop.w

08004580 <pxCurrentTCBConst2>:
 8004580:	2000077c 	.word	0x2000077c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop

08004588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004588:	4808      	ldr	r0, [pc, #32]	@ (80045ac <prvPortStartFirstTask+0x24>)
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	6800      	ldr	r0, [r0, #0]
 800458e:	f380 8808 	msr	MSP, r0
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f380 8814 	msr	CONTROL, r0
 800459a:	b662      	cpsie	i
 800459c:	b661      	cpsie	f
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	df00      	svc	0
 80045a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045aa:	bf00      	nop
 80045ac:	e000ed08 	.word	0xe000ed08

080045b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045b6:	4b47      	ldr	r3, [pc, #284]	@ (80046d4 <xPortStartScheduler+0x124>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a47      	ldr	r2, [pc, #284]	@ (80046d8 <xPortStartScheduler+0x128>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d10b      	bne.n	80045d8 <xPortStartScheduler+0x28>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	613b      	str	r3, [r7, #16]
}
 80045d2:	bf00      	nop
 80045d4:	bf00      	nop
 80045d6:	e7fd      	b.n	80045d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045d8:	4b3e      	ldr	r3, [pc, #248]	@ (80046d4 <xPortStartScheduler+0x124>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a3f      	ldr	r2, [pc, #252]	@ (80046dc <xPortStartScheduler+0x12c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d10b      	bne.n	80045fa <xPortStartScheduler+0x4a>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	60fb      	str	r3, [r7, #12]
}
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	e7fd      	b.n	80045f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045fa:	4b39      	ldr	r3, [pc, #228]	@ (80046e0 <xPortStartScheduler+0x130>)
 80045fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	22ff      	movs	r2, #255	@ 0xff
 800460a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800461c:	b2da      	uxtb	r2, r3
 800461e:	4b31      	ldr	r3, [pc, #196]	@ (80046e4 <xPortStartScheduler+0x134>)
 8004620:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004622:	4b31      	ldr	r3, [pc, #196]	@ (80046e8 <xPortStartScheduler+0x138>)
 8004624:	2207      	movs	r2, #7
 8004626:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004628:	e009      	b.n	800463e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800462a:	4b2f      	ldr	r3, [pc, #188]	@ (80046e8 <xPortStartScheduler+0x138>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3b01      	subs	r3, #1
 8004630:	4a2d      	ldr	r2, [pc, #180]	@ (80046e8 <xPortStartScheduler+0x138>)
 8004632:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004646:	2b80      	cmp	r3, #128	@ 0x80
 8004648:	d0ef      	beq.n	800462a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800464a:	4b27      	ldr	r3, [pc, #156]	@ (80046e8 <xPortStartScheduler+0x138>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f1c3 0307 	rsb	r3, r3, #7
 8004652:	2b04      	cmp	r3, #4
 8004654:	d00b      	beq.n	800466e <xPortStartScheduler+0xbe>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	60bb      	str	r3, [r7, #8]
}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	e7fd      	b.n	800466a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800466e:	4b1e      	ldr	r3, [pc, #120]	@ (80046e8 <xPortStartScheduler+0x138>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	4a1c      	ldr	r2, [pc, #112]	@ (80046e8 <xPortStartScheduler+0x138>)
 8004676:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004678:	4b1b      	ldr	r3, [pc, #108]	@ (80046e8 <xPortStartScheduler+0x138>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004680:	4a19      	ldr	r2, [pc, #100]	@ (80046e8 <xPortStartScheduler+0x138>)
 8004682:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	b2da      	uxtb	r2, r3
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800468c:	4b17      	ldr	r3, [pc, #92]	@ (80046ec <xPortStartScheduler+0x13c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a16      	ldr	r2, [pc, #88]	@ (80046ec <xPortStartScheduler+0x13c>)
 8004692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004698:	4b14      	ldr	r3, [pc, #80]	@ (80046ec <xPortStartScheduler+0x13c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a13      	ldr	r2, [pc, #76]	@ (80046ec <xPortStartScheduler+0x13c>)
 800469e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80046a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80046a4:	f000 f8da 	bl	800485c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80046a8:	4b11      	ldr	r3, [pc, #68]	@ (80046f0 <xPortStartScheduler+0x140>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80046ae:	f000 f8f9 	bl	80048a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046b2:	4b10      	ldr	r3, [pc, #64]	@ (80046f4 <xPortStartScheduler+0x144>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a0f      	ldr	r2, [pc, #60]	@ (80046f4 <xPortStartScheduler+0x144>)
 80046b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80046bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046be:	f7ff ff63 	bl	8004588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046c2:	f7ff f839 	bl	8003738 <vTaskSwitchContext>
	prvTaskExitError();
 80046c6:	f7ff ff17 	bl	80044f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	e000ed00 	.word	0xe000ed00
 80046d8:	410fc271 	.word	0x410fc271
 80046dc:	410fc270 	.word	0x410fc270
 80046e0:	e000e400 	.word	0xe000e400
 80046e4:	20000da8 	.word	0x20000da8
 80046e8:	20000dac 	.word	0x20000dac
 80046ec:	e000ed20 	.word	0xe000ed20
 80046f0:	2000000c 	.word	0x2000000c
 80046f4:	e000ef34 	.word	0xe000ef34

080046f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
	__asm volatile
 80046fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	607b      	str	r3, [r7, #4]
}
 8004710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004712:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <vPortEnterCritical+0x5c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3301      	adds	r3, #1
 8004718:	4a0e      	ldr	r2, [pc, #56]	@ (8004754 <vPortEnterCritical+0x5c>)
 800471a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800471c:	4b0d      	ldr	r3, [pc, #52]	@ (8004754 <vPortEnterCritical+0x5c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d110      	bne.n	8004746 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004724:	4b0c      	ldr	r3, [pc, #48]	@ (8004758 <vPortEnterCritical+0x60>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00b      	beq.n	8004746 <vPortEnterCritical+0x4e>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	603b      	str	r3, [r7, #0]
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	e7fd      	b.n	8004742 <vPortEnterCritical+0x4a>
	}
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	2000000c 	.word	0x2000000c
 8004758:	e000ed04 	.word	0xe000ed04

0800475c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004762:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <vPortExitCritical+0x50>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10b      	bne.n	8004782 <vPortExitCritical+0x26>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	607b      	str	r3, [r7, #4]
}
 800477c:	bf00      	nop
 800477e:	bf00      	nop
 8004780:	e7fd      	b.n	800477e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004782:	4b0a      	ldr	r3, [pc, #40]	@ (80047ac <vPortExitCritical+0x50>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	3b01      	subs	r3, #1
 8004788:	4a08      	ldr	r2, [pc, #32]	@ (80047ac <vPortExitCritical+0x50>)
 800478a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800478c:	4b07      	ldr	r3, [pc, #28]	@ (80047ac <vPortExitCritical+0x50>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <vPortExitCritical+0x44>
 8004794:	2300      	movs	r3, #0
 8004796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f383 8811 	msr	BASEPRI, r3
}
 800479e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	2000000c 	.word	0x2000000c

080047b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047b0:	f3ef 8009 	mrs	r0, PSP
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	4b15      	ldr	r3, [pc, #84]	@ (8004810 <pxCurrentTCBConst>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	f01e 0f10 	tst.w	lr, #16
 80047c0:	bf08      	it	eq
 80047c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ca:	6010      	str	r0, [r2, #0]
 80047cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80047d4:	f380 8811 	msr	BASEPRI, r0
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f7fe ffaa 	bl	8003738 <vTaskSwitchContext>
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f380 8811 	msr	BASEPRI, r0
 80047ec:	bc09      	pop	{r0, r3}
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	6808      	ldr	r0, [r1, #0]
 80047f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f6:	f01e 0f10 	tst.w	lr, #16
 80047fa:	bf08      	it	eq
 80047fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004800:	f380 8809 	msr	PSP, r0
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	f3af 8000 	nop.w

08004810 <pxCurrentTCBConst>:
 8004810:	2000077c 	.word	0x2000077c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop

08004818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
	__asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	607b      	str	r3, [r7, #4]
}
 8004830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004832:	f7fe fec7 	bl	80035c4 <xTaskIncrementTick>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800483c:	4b06      	ldr	r3, [pc, #24]	@ (8004858 <xPortSysTickHandler+0x40>)
 800483e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	2300      	movs	r3, #0
 8004846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	f383 8811 	msr	BASEPRI, r3
}
 800484e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	e000ed04 	.word	0xe000ed04

0800485c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004862:	2200      	movs	r2, #0
 8004864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004866:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <vPortSetupTimerInterrupt+0x38>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800486c:	4b0a      	ldr	r3, [pc, #40]	@ (8004898 <vPortSetupTimerInterrupt+0x3c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a0a      	ldr	r2, [pc, #40]	@ (800489c <vPortSetupTimerInterrupt+0x40>)
 8004872:	fba2 2303 	umull	r2, r3, r2, r3
 8004876:	099b      	lsrs	r3, r3, #6
 8004878:	4a09      	ldr	r2, [pc, #36]	@ (80048a0 <vPortSetupTimerInterrupt+0x44>)
 800487a:	3b01      	subs	r3, #1
 800487c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800487e:	4b04      	ldr	r3, [pc, #16]	@ (8004890 <vPortSetupTimerInterrupt+0x34>)
 8004880:	2207      	movs	r2, #7
 8004882:	601a      	str	r2, [r3, #0]
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	e000e010 	.word	0xe000e010
 8004894:	e000e018 	.word	0xe000e018
 8004898:	20000000 	.word	0x20000000
 800489c:	10624dd3 	.word	0x10624dd3
 80048a0:	e000e014 	.word	0xe000e014

080048a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80048a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80048b4 <vPortEnableVFP+0x10>
 80048a8:	6801      	ldr	r1, [r0, #0]
 80048aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80048ae:	6001      	str	r1, [r0, #0]
 80048b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80048b2:	bf00      	nop
 80048b4:	e000ed88 	.word	0xe000ed88

080048b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80048be:	f3ef 8305 	mrs	r3, IPSR
 80048c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b0f      	cmp	r3, #15
 80048c8:	d915      	bls.n	80048f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ca:	4a18      	ldr	r2, [pc, #96]	@ (800492c <vPortValidateInterruptPriority+0x74>)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4413      	add	r3, r2
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048d4:	4b16      	ldr	r3, [pc, #88]	@ (8004930 <vPortValidateInterruptPriority+0x78>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	7afa      	ldrb	r2, [r7, #11]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d20b      	bcs.n	80048f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	607b      	str	r3, [r7, #4]
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	e7fd      	b.n	80048f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004934 <vPortValidateInterruptPriority+0x7c>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004938 <vPortValidateInterruptPriority+0x80>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d90b      	bls.n	800491e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800490a:	f383 8811 	msr	BASEPRI, r3
 800490e:	f3bf 8f6f 	isb	sy
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	603b      	str	r3, [r7, #0]
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	e7fd      	b.n	800491a <vPortValidateInterruptPriority+0x62>
	}
 800491e:	bf00      	nop
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop
 800492c:	e000e3f0 	.word	0xe000e3f0
 8004930:	20000da8 	.word	0x20000da8
 8004934:	e000ed0c 	.word	0xe000ed0c
 8004938:	20000dac 	.word	0x20000dac

0800493c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	@ 0x28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004948:	f7fe fd80 	bl	800344c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800494c:	4b5c      	ldr	r3, [pc, #368]	@ (8004ac0 <pvPortMalloc+0x184>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004954:	f000 f924 	bl	8004ba0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004958:	4b5a      	ldr	r3, [pc, #360]	@ (8004ac4 <pvPortMalloc+0x188>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	f040 8095 	bne.w	8004a90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01e      	beq.n	80049aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800496c:	2208      	movs	r2, #8
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4413      	add	r3, r2
 8004972:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	2b00      	cmp	r3, #0
 800497c:	d015      	beq.n	80049aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f023 0307 	bic.w	r3, r3, #7
 8004984:	3308      	adds	r3, #8
 8004986:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <pvPortMalloc+0x6e>
	__asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	617b      	str	r3, [r7, #20]
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop
 80049a8:	e7fd      	b.n	80049a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d06f      	beq.n	8004a90 <pvPortMalloc+0x154>
 80049b0:	4b45      	ldr	r3, [pc, #276]	@ (8004ac8 <pvPortMalloc+0x18c>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d86a      	bhi.n	8004a90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049ba:	4b44      	ldr	r3, [pc, #272]	@ (8004acc <pvPortMalloc+0x190>)
 80049bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049be:	4b43      	ldr	r3, [pc, #268]	@ (8004acc <pvPortMalloc+0x190>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049c4:	e004      	b.n	80049d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d903      	bls.n	80049e2 <pvPortMalloc+0xa6>
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f1      	bne.n	80049c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049e2:	4b37      	ldr	r3, [pc, #220]	@ (8004ac0 <pvPortMalloc+0x184>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d051      	beq.n	8004a90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2208      	movs	r2, #8
 80049f2:	4413      	add	r3, r2
 80049f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	1ad2      	subs	r2, r2, r3
 8004a06:	2308      	movs	r3, #8
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d920      	bls.n	8004a50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4413      	add	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	f003 0307 	and.w	r3, r3, #7
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00b      	beq.n	8004a38 <pvPortMalloc+0xfc>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	613b      	str	r3, [r7, #16]
}
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	1ad2      	subs	r2, r2, r3
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a4a:	69b8      	ldr	r0, [r7, #24]
 8004a4c:	f000 f90a 	bl	8004c64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a50:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac8 <pvPortMalloc+0x18c>)
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac8 <pvPortMalloc+0x18c>)
 8004a5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac8 <pvPortMalloc+0x18c>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad0 <pvPortMalloc+0x194>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d203      	bcs.n	8004a72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a6a:	4b17      	ldr	r3, [pc, #92]	@ (8004ac8 <pvPortMalloc+0x18c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a18      	ldr	r2, [pc, #96]	@ (8004ad0 <pvPortMalloc+0x194>)
 8004a70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	685a      	ldr	r2, [r3, #4]
 8004a76:	4b13      	ldr	r3, [pc, #76]	@ (8004ac4 <pvPortMalloc+0x188>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004a86:	4b13      	ldr	r3, [pc, #76]	@ (8004ad4 <pvPortMalloc+0x198>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	4a11      	ldr	r2, [pc, #68]	@ (8004ad4 <pvPortMalloc+0x198>)
 8004a8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a90:	f7fe fcea 	bl	8003468 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00b      	beq.n	8004ab6 <pvPortMalloc+0x17a>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	60fb      	str	r3, [r7, #12]
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	e7fd      	b.n	8004ab2 <pvPortMalloc+0x176>
	return pvReturn;
 8004ab6:	69fb      	ldr	r3, [r7, #28]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3728      	adds	r7, #40	@ 0x28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	200049b8 	.word	0x200049b8
 8004ac4:	200049cc 	.word	0x200049cc
 8004ac8:	200049bc 	.word	0x200049bc
 8004acc:	200049b0 	.word	0x200049b0
 8004ad0:	200049c0 	.word	0x200049c0
 8004ad4:	200049c4 	.word	0x200049c4

08004ad8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d04f      	beq.n	8004b8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004aea:	2308      	movs	r3, #8
 8004aec:	425b      	negs	r3, r3
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	4413      	add	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	4b25      	ldr	r3, [pc, #148]	@ (8004b94 <vPortFree+0xbc>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4013      	ands	r3, r2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10b      	bne.n	8004b1e <vPortFree+0x46>
	__asm volatile
 8004b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0a:	f383 8811 	msr	BASEPRI, r3
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	f3bf 8f4f 	dsb	sy
 8004b16:	60fb      	str	r3, [r7, #12]
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	e7fd      	b.n	8004b1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00b      	beq.n	8004b3e <vPortFree+0x66>
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	60bb      	str	r3, [r7, #8]
}
 8004b38:	bf00      	nop
 8004b3a:	bf00      	nop
 8004b3c:	e7fd      	b.n	8004b3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	4b14      	ldr	r3, [pc, #80]	@ (8004b94 <vPortFree+0xbc>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4013      	ands	r3, r2
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01e      	beq.n	8004b8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d11a      	bne.n	8004b8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	685a      	ldr	r2, [r3, #4]
 8004b58:	4b0e      	ldr	r3, [pc, #56]	@ (8004b94 <vPortFree+0xbc>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	43db      	mvns	r3, r3
 8004b5e:	401a      	ands	r2, r3
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b64:	f7fe fc72 	bl	800344c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004b98 <vPortFree+0xc0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4413      	add	r3, r2
 8004b72:	4a09      	ldr	r2, [pc, #36]	@ (8004b98 <vPortFree+0xc0>)
 8004b74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b76:	6938      	ldr	r0, [r7, #16]
 8004b78:	f000 f874 	bl	8004c64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004b7c:	4b07      	ldr	r3, [pc, #28]	@ (8004b9c <vPortFree+0xc4>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	4a06      	ldr	r2, [pc, #24]	@ (8004b9c <vPortFree+0xc4>)
 8004b84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004b86:	f7fe fc6f 	bl	8003468 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b8a:	bf00      	nop
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	200049cc 	.word	0x200049cc
 8004b98:	200049bc 	.word	0x200049bc
 8004b9c:	200049c8 	.word	0x200049c8

08004ba0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ba6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004baa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004bac:	4b27      	ldr	r3, [pc, #156]	@ (8004c4c <prvHeapInit+0xac>)
 8004bae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	3307      	adds	r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f023 0307 	bic.w	r3, r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	4a1f      	ldr	r2, [pc, #124]	@ (8004c4c <prvHeapInit+0xac>)
 8004bd0:	4413      	add	r3, r2
 8004bd2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c50 <prvHeapInit+0xb0>)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004bde:	4b1c      	ldr	r3, [pc, #112]	@ (8004c50 <prvHeapInit+0xb0>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68ba      	ldr	r2, [r7, #8]
 8004be8:	4413      	add	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004bec:	2208      	movs	r2, #8
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0307 	bic.w	r3, r3, #7
 8004bfa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a15      	ldr	r2, [pc, #84]	@ (8004c54 <prvHeapInit+0xb4>)
 8004c00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c02:	4b14      	ldr	r3, [pc, #80]	@ (8004c54 <prvHeapInit+0xb4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c0a:	4b12      	ldr	r3, [pc, #72]	@ (8004c54 <prvHeapInit+0xb4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	1ad2      	subs	r2, r2, r3
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c20:	4b0c      	ldr	r3, [pc, #48]	@ (8004c54 <prvHeapInit+0xb4>)
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c58 <prvHeapInit+0xb8>)
 8004c2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a09      	ldr	r2, [pc, #36]	@ (8004c5c <prvHeapInit+0xbc>)
 8004c36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c38:	4b09      	ldr	r3, [pc, #36]	@ (8004c60 <prvHeapInit+0xc0>)
 8004c3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004c3e:	601a      	str	r2, [r3, #0]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	20000db0 	.word	0x20000db0
 8004c50:	200049b0 	.word	0x200049b0
 8004c54:	200049b8 	.word	0x200049b8
 8004c58:	200049c0 	.word	0x200049c0
 8004c5c:	200049bc 	.word	0x200049bc
 8004c60:	200049cc 	.word	0x200049cc

08004c64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c64:	b480      	push	{r7}
 8004c66:	b085      	sub	sp, #20
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c6c:	4b28      	ldr	r3, [pc, #160]	@ (8004d10 <prvInsertBlockIntoFreeList+0xac>)
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e002      	b.n	8004c78 <prvInsertBlockIntoFreeList+0x14>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d8f7      	bhi.n	8004c72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d108      	bne.n	8004ca6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	441a      	add	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d118      	bne.n	8004cec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b15      	ldr	r3, [pc, #84]	@ (8004d14 <prvInsertBlockIntoFreeList+0xb0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d00d      	beq.n	8004ce2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	441a      	add	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	e008      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8004d14 <prvInsertBlockIntoFreeList+0xb0>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	e003      	b.n	8004cf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d002      	beq.n	8004d02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	200049b0 	.word	0x200049b0
 8004d14:	200049b8 	.word	0x200049b8

08004d18 <memset>:
 8004d18:	4402      	add	r2, r0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d100      	bne.n	8004d22 <memset+0xa>
 8004d20:	4770      	bx	lr
 8004d22:	f803 1b01 	strb.w	r1, [r3], #1
 8004d26:	e7f9      	b.n	8004d1c <memset+0x4>

08004d28 <__libc_init_array>:
 8004d28:	b570      	push	{r4, r5, r6, lr}
 8004d2a:	4d0d      	ldr	r5, [pc, #52]	@ (8004d60 <__libc_init_array+0x38>)
 8004d2c:	4c0d      	ldr	r4, [pc, #52]	@ (8004d64 <__libc_init_array+0x3c>)
 8004d2e:	1b64      	subs	r4, r4, r5
 8004d30:	10a4      	asrs	r4, r4, #2
 8004d32:	2600      	movs	r6, #0
 8004d34:	42a6      	cmp	r6, r4
 8004d36:	d109      	bne.n	8004d4c <__libc_init_array+0x24>
 8004d38:	4d0b      	ldr	r5, [pc, #44]	@ (8004d68 <__libc_init_array+0x40>)
 8004d3a:	4c0c      	ldr	r4, [pc, #48]	@ (8004d6c <__libc_init_array+0x44>)
 8004d3c:	f000 f826 	bl	8004d8c <_init>
 8004d40:	1b64      	subs	r4, r4, r5
 8004d42:	10a4      	asrs	r4, r4, #2
 8004d44:	2600      	movs	r6, #0
 8004d46:	42a6      	cmp	r6, r4
 8004d48:	d105      	bne.n	8004d56 <__libc_init_array+0x2e>
 8004d4a:	bd70      	pop	{r4, r5, r6, pc}
 8004d4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d50:	4798      	blx	r3
 8004d52:	3601      	adds	r6, #1
 8004d54:	e7ee      	b.n	8004d34 <__libc_init_array+0xc>
 8004d56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5a:	4798      	blx	r3
 8004d5c:	3601      	adds	r6, #1
 8004d5e:	e7f2      	b.n	8004d46 <__libc_init_array+0x1e>
 8004d60:	08004e2c 	.word	0x08004e2c
 8004d64:	08004e2c 	.word	0x08004e2c
 8004d68:	08004e2c 	.word	0x08004e2c
 8004d6c:	08004e30 	.word	0x08004e30

08004d70 <memcpy>:
 8004d70:	440a      	add	r2, r1
 8004d72:	4291      	cmp	r1, r2
 8004d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d78:	d100      	bne.n	8004d7c <memcpy+0xc>
 8004d7a:	4770      	bx	lr
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d86:	4291      	cmp	r1, r2
 8004d88:	d1f9      	bne.n	8004d7e <memcpy+0xe>
 8004d8a:	bd10      	pop	{r4, pc}

08004d8c <_init>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	bf00      	nop
 8004d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d92:	bc08      	pop	{r3}
 8004d94:	469e      	mov	lr, r3
 8004d96:	4770      	bx	lr

08004d98 <_fini>:
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9a:	bf00      	nop
 8004d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9e:	bc08      	pop	{r3}
 8004da0:	469e      	mov	lr, r3
 8004da2:	4770      	bx	lr

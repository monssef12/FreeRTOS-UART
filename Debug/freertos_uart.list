
freertos_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  08005744  08005744  00006744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057dc  080057dc  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  080057dc  080057dc  000067dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057e4  080057e4  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057e4  080057e4  000067e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057e8  080057e8  000067e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080057ec  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c4  20000010  080057fc  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049d4  080057fc  000079d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cb2  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba5  00000000  00000000  00018cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0001b898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b67  00000000  00000000  0001c770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000341a  00000000  00000000  0001d2d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cfd  00000000  00000000  000206f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f61b  00000000  00000000  000313ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0a09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d50  00000000  00000000  000c0a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c479c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800572c 	.word	0x0800572c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800572c 	.word	0x0800572c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b5b0      	push	{r4, r5, r7, lr}
 80004e2:	b090      	sub	sp, #64	@ 0x40
 80004e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fa99 	bl	8000a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f871 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f8f9 	bl	80006e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f2:	f000 f8cd 	bl	8000690 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char hello[] = "UART Echo Ready.\r\n";
 80004f6:	4b2d      	ldr	r3, [pc, #180]	@ (80005ac <main+0xcc>)
 80004f8:	f107 0420 	add.w	r4, r7, #32
 80004fc:	461d      	mov	r5, r3
 80004fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000502:	682b      	ldr	r3, [r5, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	8022      	strh	r2, [r4, #0]
 8000508:	3402      	adds	r4, #2
 800050a:	0c1b      	lsrs	r3, r3, #16
 800050c:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)hello, strlen(hello), 100);
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff fe64 	bl	80001e0 <strlen>
 8000518:	4603      	mov	r3, r0
 800051a:	b29a      	uxth	r2, r3
 800051c:	f107 0120 	add.w	r1, r7, #32
 8000520:	2364      	movs	r3, #100	@ 0x64
 8000522:	4823      	ldr	r0, [pc, #140]	@ (80005b0 <main+0xd0>)
 8000524:	f001 fabc 	bl	8001aa0 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000528:	f002 fb0a 	bl	8002b40 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  uartQueue = xQueueCreate(QueueLength, sizeof(uint8_t));  // Create queue
 800052c:	2200      	movs	r2, #0
 800052e:	2101      	movs	r1, #1
 8000530:	2040      	movs	r0, #64	@ 0x40
 8000532:	f002 fdcc 	bl	80030ce <xQueueGenericCreate>
 8000536:	4603      	mov	r3, r0
 8000538:	4a1e      	ldr	r2, [pc, #120]	@ (80005b4 <main+0xd4>)
 800053a:	6013      	str	r3, [r2, #0]
  char test_str[] = "hello send is working !\r\n";
 800053c:	4b1e      	ldr	r3, [pc, #120]	@ (80005b8 <main+0xd8>)
 800053e:	1d3c      	adds	r4, r7, #4
 8000540:	461d      	mov	r5, r3
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054a:	c403      	stmia	r4!, {r0, r1}
 800054c:	8022      	strh	r2, [r4, #0]
  for (uint32_t i = 0; i < strlen(test_str); i++) {
 800054e:	2300      	movs	r3, #0
 8000550:	637b      	str	r3, [r7, #52]	@ 0x34
 8000552:	e00b      	b.n	800056c <main+0x8c>
      xQueueSend(uartQueue, &test_str[i], 0);  // Fill queue
 8000554:	4b17      	ldr	r3, [pc, #92]	@ (80005b4 <main+0xd4>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	1d3a      	adds	r2, r7, #4
 800055a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800055c:	18d1      	adds	r1, r2, r3
 800055e:	2300      	movs	r3, #0
 8000560:	2200      	movs	r2, #0
 8000562:	f002 fe13 	bl	800318c <xQueueGenericSend>
  for (uint32_t i = 0; i < strlen(test_str); i++) {
 8000566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000568:	3301      	adds	r3, #1
 800056a:	637b      	str	r3, [r7, #52]	@ 0x34
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fe36 	bl	80001e0 <strlen>
 8000574:	4602      	mov	r2, r0
 8000576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000578:	4293      	cmp	r3, r2
 800057a:	d3eb      	bcc.n	8000554 <main+0x74>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800057c:	4a0f      	ldr	r2, [pc, #60]	@ (80005bc <main+0xdc>)
 800057e:	2100      	movs	r1, #0
 8000580:	480f      	ldr	r0, [pc, #60]	@ (80005c0 <main+0xe0>)
 8000582:	f002 fb27 	bl	8002bd4 <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a0e      	ldr	r2, [pc, #56]	@ (80005c4 <main+0xe4>)
 800058a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(StartUartSend, "UART_TX", 256, NULL, 2, NULL);
 800058c:	2300      	movs	r3, #0
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	2302      	movs	r3, #2
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800059a:	490b      	ldr	r1, [pc, #44]	@ (80005c8 <main+0xe8>)
 800059c:	480b      	ldr	r0, [pc, #44]	@ (80005cc <main+0xec>)
 800059e:	f003 fa45 	bl	8003a2c <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a2:	f002 faf1 	bl	8002b88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a6:	bf00      	nop
 80005a8:	e7fd      	b.n	80005a6 <main+0xc6>
 80005aa:	bf00      	nop
 80005ac:	08005758 	.word	0x08005758
 80005b0:	2000002c 	.word	0x2000002c
 80005b4:	20000078 	.word	0x20000078
 80005b8:	0800576c 	.word	0x0800576c
 80005bc:	080057a0 	.word	0x080057a0
 80005c0:	08000819 	.word	0x08000819
 80005c4:	20000074 	.word	0x20000074
 80005c8:	08005750 	.word	0x08005750
 80005cc:	08000719 	.word	0x08000719

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	@ 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	@ 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f005 f86a 	bl	80056b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b23      	ldr	r3, [pc, #140]	@ (8000688 <SystemClock_Config+0xb8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	4a22      	ldr	r2, [pc, #136]	@ (8000688 <SystemClock_Config+0xb8>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	@ 0x40
 8000604:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <SystemClock_Config+0xb8>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b1d      	ldr	r3, [pc, #116]	@ (800068c <SystemClock_Config+0xbc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800061c:	4a1b      	ldr	r2, [pc, #108]	@ (800068c <SystemClock_Config+0xbc>)
 800061e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b19      	ldr	r3, [pc, #100]	@ (800068c <SystemClock_Config+0xbc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063c:	2300      	movs	r3, #0
 800063e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fd83 	bl	8001150 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000650:	f000 f8f4 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f000 ffe6 	bl	8001640 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800067a:	f000 f8df 	bl	800083c <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	@ 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <MX_USART1_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 80006c8:	f001 f99a 	bl	8001a00 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 f8b3 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000002c 	.word	0x2000002c
 80006e0:	40011000 	.word	0x40011000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_GPIO_Init+0x30>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a08      	ldr	r2, [pc, #32]	@ (8000714 <MX_GPIO_Init+0x30>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_GPIO_Init+0x30>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <StartUartSend>:

/* USER CODE BEGIN 4 */
void StartUartSend(void* args) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b0a4      	sub	sp, #144	@ 0x90
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    uint8_t tx_char;
    char msg_buffer[128];
    uint16_t index = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

    for(;;) {
        if (xQueueReceive(uartQueue, &tx_char, portMAX_DELAY) == pdPASS) { // check if uartQueue received something if yes put it in tx_char
 8000726:	4b21      	ldr	r3, [pc, #132]	@ (80007ac <StartUartSend+0x94>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f107 018d 	add.w	r1, r7, #141	@ 0x8d
 800072e:	f04f 32ff 	mov.w	r2, #4294967295
 8000732:	4618      	mov	r0, r3
 8000734:	f002 feca 	bl	80034cc <xQueueReceive>
 8000738:	4603      	mov	r3, r0
 800073a:	2b01      	cmp	r3, #1
 800073c:	d1f3      	bne.n	8000726 <StartUartSend+0xe>
            // Store char in buffer
            msg_buffer[index++] = tx_char;
 800073e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	f8a7 208e 	strh.w	r2, [r7, #142]	@ 0x8e
 8000748:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 800074c:	3390      	adds	r3, #144	@ 0x90
 800074e:	443b      	add	r3, r7
 8000750:	f803 2c84 	strb.w	r2, [r3, #-132]

            // Check for \r\n at the end
            if (index >= 2 &&
 8000754:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000758:	2b01      	cmp	r3, #1
 800075a:	d9e4      	bls.n	8000726 <StartUartSend+0xe>
                msg_buffer[index-2] == '\r' &&
 800075c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000760:	3b02      	subs	r3, #2
 8000762:	3390      	adds	r3, #144	@ 0x90
 8000764:	443b      	add	r3, r7
 8000766:	f813 3c84 	ldrb.w	r3, [r3, #-132]
            if (index >= 2 &&
 800076a:	2b0d      	cmp	r3, #13
 800076c:	d1db      	bne.n	8000726 <StartUartSend+0xe>
                msg_buffer[index-1] == '\n') {
 800076e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8000772:	3b01      	subs	r3, #1
 8000774:	3390      	adds	r3, #144	@ 0x90
 8000776:	443b      	add	r3, r7
 8000778:	f813 3c84 	ldrb.w	r3, [r3, #-132]
                msg_buffer[index-2] == '\r' &&
 800077c:	2b0a      	cmp	r3, #10
 800077e:	d1d2      	bne.n	8000726 <StartUartSend+0xe>

                // Send entire message at once
                HAL_UART_Transmit(&huart1, (uint8_t*)msg_buffer, index, HAL_MAX_DELAY);
 8000780:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8000784:	f107 010c 	add.w	r1, r7, #12
 8000788:	f04f 33ff 	mov.w	r3, #4294967295
 800078c:	4808      	ldr	r0, [pc, #32]	@ (80007b0 <StartUartSend+0x98>)
 800078e:	f001 f987 	bl	8001aa0 <HAL_UART_Transmit>
                HAL_UART_Transmit(&huart1, (uint8_t*)msg_buffer, index, HAL_MAX_DELAY);
 8000792:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8000796:	f107 010c 	add.w	r1, r7, #12
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	4804      	ldr	r0, [pc, #16]	@ (80007b0 <StartUartSend+0x98>)
 80007a0:	f001 f97e 	bl	8001aa0 <HAL_UART_Transmit>

                // Reset buffer
                index = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
        if (xQueueReceive(uartQueue, &tx_char, portMAX_DELAY) == pdPASS) { // check if uartQueue received something if yes put it in tx_char
 80007aa:	e7bc      	b.n	8000726 <StartUartSend+0xe>
 80007ac:	20000078 	.word	0x20000078
 80007b0:	2000002c 	.word	0x2000002c

080007b4 <HAL_UART_RxCpltCallback>:
        }
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a10      	ldr	r2, [pc, #64]	@ (8000804 <HAL_UART_RxCpltCallback+0x50>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d119      	bne.n	80007fa <HAL_UART_RxCpltCallback+0x46>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60fb      	str	r3, [r7, #12]
        xQueueSendFromISR(uartQueue, &rx_char, &xHigherPriorityTaskWoken);
 80007ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <HAL_UART_RxCpltCallback+0x54>)
 80007cc:	6818      	ldr	r0, [r3, #0]
 80007ce:	f107 020c 	add.w	r2, r7, #12
 80007d2:	2300      	movs	r3, #0
 80007d4:	490d      	ldr	r1, [pc, #52]	@ (800080c <HAL_UART_RxCpltCallback+0x58>)
 80007d6:	f002 fddb 	bl	8003390 <xQueueGenericSendFromISR>

        // Re-enable UART RX interrupt
        HAL_UART_Receive_IT(&huart1, &rx_char, 1);
 80007da:	2201      	movs	r2, #1
 80007dc:	490b      	ldr	r1, [pc, #44]	@ (800080c <HAL_UART_RxCpltCallback+0x58>)
 80007de:	480c      	ldr	r0, [pc, #48]	@ (8000810 <HAL_UART_RxCpltCallback+0x5c>)
 80007e0:	f001 f9e9 	bl	8001bb6 <HAL_UART_Receive_IT>
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d007      	beq.n	80007fa <HAL_UART_RxCpltCallback+0x46>
 80007ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <HAL_UART_RxCpltCallback+0x60>)
 80007ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	f3bf 8f4f 	dsb	sy
 80007f6:	f3bf 8f6f 	isb	sy
    }
}
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40011000 	.word	0x40011000
 8000808:	20000078 	.word	0x20000078
 800080c:	2000007c 	.word	0x2000007c
 8000810:	2000002c 	.word	0x2000002c
 8000814:	e000ed04 	.word	0xe000ed04

08000818 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    HAL_UART_Receive_IT(&huart1, &rx_char, 1);
 8000820:	2201      	movs	r2, #1
 8000822:	4904      	ldr	r1, [pc, #16]	@ (8000834 <StartDefaultTask+0x1c>)
 8000824:	4804      	ldr	r0, [pc, #16]	@ (8000838 <StartDefaultTask+0x20>)
 8000826:	f001 f9c6 	bl	8001bb6 <HAL_UART_Receive_IT>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f002 fa64 	bl	8002cf8 <osDelay>
 8000830:	e7fb      	b.n	800082a <StartDefaultTask+0x12>
 8000832:	bf00      	nop
 8000834:	2000007c 	.word	0x2000007c
 8000838:	2000002c 	.word	0x2000002c

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <Error_Handler+0x8>

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b12      	ldr	r3, [pc, #72]	@ (800089c <HAL_MspInit+0x54>)
 8000854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000856:	4a11      	ldr	r2, [pc, #68]	@ (800089c <HAL_MspInit+0x54>)
 8000858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085c:	6453      	str	r3, [r2, #68]	@ 0x44
 800085e:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <HAL_MspInit+0x54>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <HAL_MspInit+0x54>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <HAL_MspInit+0x54>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000878:	6413      	str	r3, [r2, #64]	@ 0x40
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <HAL_MspInit+0x54>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000886:	2200      	movs	r2, #0
 8000888:	210f      	movs	r1, #15
 800088a:	f06f 0001 	mvn.w	r0, #1
 800088e:	f000 fa12 	bl	8000cb6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40023800 	.word	0x40023800

080008a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a1d      	ldr	r2, [pc, #116]	@ (8000934 <HAL_UART_MspInit+0x94>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d134      	bne.n	800092c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <HAL_UART_MspInit+0x98>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000938 <HAL_UART_MspInit+0x98>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80008d2:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <HAL_UART_MspInit+0x98>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <HAL_UART_MspInit+0x98>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a14      	ldr	r2, [pc, #80]	@ (8000938 <HAL_UART_MspInit+0x98>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_UART_MspInit+0x98>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60fb      	str	r3, [r7, #12]
 80008f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80008fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000908:	2303      	movs	r3, #3
 800090a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800090c:	2307      	movs	r3, #7
 800090e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	4619      	mov	r1, r3
 8000916:	4809      	ldr	r0, [pc, #36]	@ (800093c <HAL_UART_MspInit+0x9c>)
 8000918:	f000 fa96 	bl	8000e48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2105      	movs	r1, #5
 8000920:	2025      	movs	r0, #37	@ 0x25
 8000922:	f000 f9c8 	bl	8000cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000926:	2025      	movs	r0, #37	@ 0x25
 8000928:	f000 f9e1 	bl	8000cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	@ 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40011000 	.word	0x40011000
 8000938:	40023800 	.word	0x40023800
 800093c:	40020000 	.word	0x40020000

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <NMI_Handler+0x4>

08000948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <MemManage_Handler+0x4>

08000958 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <UsageFault_Handler+0x4>

08000968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000976:	b580      	push	{r7, lr}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097a:	f000 f8a1 	bl	8000ac0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800097e:	f003 fe1f 	bl	80045c0 <xTaskGetSchedulerState>
 8000982:	4603      	mov	r3, r0
 8000984:	2b01      	cmp	r3, #1
 8000986:	d001      	beq.n	800098c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000988:	f004 fc16 	bl	80051b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000994:	4802      	ldr	r0, [pc, #8]	@ (80009a0 <USART1_IRQHandler+0x10>)
 8000996:	f001 f933 	bl	8001c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000002c 	.word	0x2000002c

080009a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a8:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <SystemInit+0x20>)
 80009aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ae:	4a05      	ldr	r2, [pc, #20]	@ (80009c4 <SystemInit+0x20>)
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009cc:	f7ff ffea 	bl	80009a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009d0:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009d2:	490d      	ldr	r1, [pc, #52]	@ (8000a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009d4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d8:	e002      	b.n	80009e0 <LoopCopyDataInit>

080009da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009de:	3304      	adds	r3, #4

080009e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009e4:	d3f9      	bcc.n	80009da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ec:	e001      	b.n	80009f2 <LoopFillZerobss>

080009ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009f0:	3204      	adds	r2, #4

080009f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009f4:	d3fb      	bcc.n	80009ee <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80009f6:	f004 fe67 	bl	80056c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009fa:	f7ff fd71 	bl	80004e0 <main>
  bx  lr    
 80009fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a00:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a0c:	080057ec 	.word	0x080057ec
  ldr r2, =_sbss
 8000a10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a14:	200049d4 	.word	0x200049d4

08000a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a18:	e7fe      	b.n	8000a18 <ADC_IRQHandler>
	...

08000a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0d      	ldr	r2, [pc, #52]	@ (8000a5c <HAL_Init+0x40>)
 8000a26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <HAL_Init+0x40>)
 8000a32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_Init+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <HAL_Init+0x40>)
 8000a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f92b 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f000 f808 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a50:	f7ff fefa 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023c00 	.word	0x40023c00

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <HAL_InitTick+0x54>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <HAL_InitTick+0x58>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f943 	bl	8000d0a <HAL_SYSTICK_Config>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00e      	b.n	8000aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d80a      	bhi.n	8000aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295
 8000a9c:	f000 f90b 	bl	8000cb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	@ (8000abc <HAL_InitTick+0x5c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000004 	.word	0x20000004

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000008 	.word	0x20000008
 8000ae4:	20000080 	.word	0x20000080

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	@ (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	20000080 	.word	0x20000080

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4907      	ldr	r1, [pc, #28]	@ (8000b9c <__NVIC_EnableIRQ+0x38>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	@ (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	@ (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	@ 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	@ 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c6c:	d301      	bcc.n	8000c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00f      	b.n	8000c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c72:	4a0a      	ldr	r2, [pc, #40]	@ (8000c9c <SysTick_Config+0x40>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f7ff ff8e 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c84:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <SysTick_Config+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8a:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <SysTick_Config+0x40>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff29 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc8:	f7ff ff3e 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ff8e 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5d 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff31 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffa2 	bl	8000c5c <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b084      	sub	sp, #16
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d2e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff feda 	bl	8000ae8 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d008      	beq.n	8000d54 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2280      	movs	r2, #128	@ 0x80
 8000d46:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e052      	b.n	8000dfa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0216 	bic.w	r2, r2, #22
 8000d62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	695a      	ldr	r2, [r3, #20]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d72:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d103      	bne.n	8000d84 <HAL_DMA_Abort+0x62>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d007      	beq.n	8000d94 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 0208 	bic.w	r2, r2, #8
 8000d92:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0201 	bic.w	r2, r2, #1
 8000da2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000da4:	e013      	b.n	8000dce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000da6:	f7ff fe9f 	bl	8000ae8 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b05      	cmp	r3, #5
 8000db2:	d90c      	bls.n	8000dce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2220      	movs	r2, #32
 8000db8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e015      	b.n	8000dfa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1e4      	bne.n	8000da6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000de0:	223f      	movs	r2, #63	@ 0x3f
 8000de2:	409a      	lsls	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2201      	movs	r2, #1
 8000dec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d004      	beq.n	8000e20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2280      	movs	r2, #128	@ 0x80
 8000e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e00c      	b.n	8000e3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2205      	movs	r2, #5
 8000e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0201 	bic.w	r2, r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
	...

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	@ 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	e159      	b.n	8001118 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f040 8148 	bne.w	8001112 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d005      	beq.n	8000e9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d130      	bne.n	8000efc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	f003 0201 	and.w	r2, r3, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d017      	beq.n	8000f38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	69b9      	ldr	r1, [r7, #24]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80a2 	beq.w	8001112 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b57      	ldr	r3, [pc, #348]	@ (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd6:	4a56      	ldr	r2, [pc, #344]	@ (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fde:	4b54      	ldr	r3, [pc, #336]	@ (8001130 <HAL_GPIO_Init+0x2e8>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fea:	4a52      	ldr	r2, [pc, #328]	@ (8001134 <HAL_GPIO_Init+0x2ec>)
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	089b      	lsrs	r3, r3, #2
 8000ff0:	3302      	adds	r3, #2
 8000ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	220f      	movs	r2, #15
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a49      	ldr	r2, [pc, #292]	@ (8001138 <HAL_GPIO_Init+0x2f0>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x202>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a48      	ldr	r2, [pc, #288]	@ (800113c <HAL_GPIO_Init+0x2f4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x1fe>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a47      	ldr	r2, [pc, #284]	@ (8001140 <HAL_GPIO_Init+0x2f8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x1fa>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a46      	ldr	r2, [pc, #280]	@ (8001144 <HAL_GPIO_Init+0x2fc>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x1f6>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a45      	ldr	r2, [pc, #276]	@ (8001148 <HAL_GPIO_Init+0x300>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x1f2>
 8001036:	2304      	movs	r3, #4
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x204>
 800103a:	2307      	movs	r3, #7
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x204>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x204>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x204>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x204>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800105c:	4935      	ldr	r1, [pc, #212]	@ (8001134 <HAL_GPIO_Init+0x2ec>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106a:	4b38      	ldr	r3, [pc, #224]	@ (800114c <HAL_GPIO_Init+0x304>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108e:	4a2f      	ldr	r2, [pc, #188]	@ (800114c <HAL_GPIO_Init+0x304>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001094:	4b2d      	ldr	r3, [pc, #180]	@ (800114c <HAL_GPIO_Init+0x304>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b8:	4a24      	ldr	r2, [pc, #144]	@ (800114c <HAL_GPIO_Init+0x304>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010be:	4b23      	ldr	r3, [pc, #140]	@ (800114c <HAL_GPIO_Init+0x304>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e2:	4a1a      	ldr	r2, [pc, #104]	@ (800114c <HAL_GPIO_Init+0x304>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e8:	4b18      	ldr	r3, [pc, #96]	@ (800114c <HAL_GPIO_Init+0x304>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110c:	4a0f      	ldr	r2, [pc, #60]	@ (800114c <HAL_GPIO_Init+0x304>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f aea2 	bls.w	8000e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40013800 	.word	0x40013800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40013c00 	.word	0x40013c00

08001150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e267      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d075      	beq.n	800125a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800116e:	4b88      	ldr	r3, [pc, #544]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b04      	cmp	r3, #4
 8001178:	d00c      	beq.n	8001194 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117a:	4b85      	ldr	r3, [pc, #532]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001182:	2b08      	cmp	r3, #8
 8001184:	d112      	bne.n	80011ac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001186:	4b82      	ldr	r3, [pc, #520]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800118e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001192:	d10b      	bne.n	80011ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001194:	4b7e      	ldr	r3, [pc, #504]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d05b      	beq.n	8001258 <HAL_RCC_OscConfig+0x108>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d157      	bne.n	8001258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e242      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011b4:	d106      	bne.n	80011c4 <HAL_RCC_OscConfig+0x74>
 80011b6:	4b76      	ldr	r3, [pc, #472]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a75      	ldr	r2, [pc, #468]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e01d      	b.n	8001200 <HAL_RCC_OscConfig+0xb0>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x98>
 80011ce:	4b70      	ldr	r3, [pc, #448]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b6d      	ldr	r3, [pc, #436]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a6c      	ldr	r2, [pc, #432]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e00b      	b.n	8001200 <HAL_RCC_OscConfig+0xb0>
 80011e8:	4b69      	ldr	r3, [pc, #420]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a68      	ldr	r2, [pc, #416]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b66      	ldr	r3, [pc, #408]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a65      	ldr	r2, [pc, #404]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fc6e 	bl	8000ae8 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fc6a 	bl	8000ae8 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	@ 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e207      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b5b      	ldr	r3, [pc, #364]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0xc0>
 800122e:	e014      	b.n	800125a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fc5a 	bl	8000ae8 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fc56 	bl	8000ae8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	@ 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e1f3      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124a:	4b51      	ldr	r3, [pc, #324]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0xe8>
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d063      	beq.n	800132e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001266:	4b4a      	ldr	r3, [pc, #296]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00b      	beq.n	800128a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001272:	4b47      	ldr	r3, [pc, #284]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800127a:	2b08      	cmp	r3, #8
 800127c:	d11c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127e:	4b44      	ldr	r3, [pc, #272]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d116      	bne.n	80012b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	4b41      	ldr	r3, [pc, #260]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x152>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e1c7      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4937      	ldr	r1, [pc, #220]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	e03a      	b.n	800132e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d020      	beq.n	8001302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c0:	4b34      	ldr	r3, [pc, #208]	@ (8001394 <HAL_RCC_OscConfig+0x244>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c6:	f7ff fc0f 	bl	8000ae8 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fc0b 	bl	8000ae8 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1a8      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4925      	ldr	r1, [pc, #148]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
 8001300:	e015      	b.n	800132e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001302:	4b24      	ldr	r3, [pc, #144]	@ (8001394 <HAL_RCC_OscConfig+0x244>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff fbee 	bl	8000ae8 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001310:	f7ff fbea 	bl	8000ae8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e187      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	4b1b      	ldr	r3, [pc, #108]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d036      	beq.n	80013a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d016      	beq.n	8001370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001342:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <HAL_RCC_OscConfig+0x248>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001348:	f7ff fbce 	bl	8000ae8 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fbca 	bl	8000ae8 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e167      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <HAL_RCC_OscConfig+0x240>)
 8001364:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x200>
 800136e:	e01b      	b.n	80013a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_RCC_OscConfig+0x248>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001376:	f7ff fbb7 	bl	8000ae8 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137c:	e00e      	b.n	800139c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800137e:	f7ff fbb3 	bl	8000ae8 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d907      	bls.n	800139c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e150      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
 8001390:	40023800 	.word	0x40023800
 8001394:	42470000 	.word	0x42470000
 8001398:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	4b88      	ldr	r3, [pc, #544]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 800139e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1ea      	bne.n	800137e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 8097 	beq.w	80014e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ba:	4b81      	ldr	r3, [pc, #516]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10f      	bne.n	80013e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	4b7d      	ldr	r3, [pc, #500]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	4a7c      	ldr	r2, [pc, #496]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d6:	4b7a      	ldr	r3, [pc, #488]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e2:	2301      	movs	r3, #1
 80013e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	4b77      	ldr	r3, [pc, #476]	@ (80015c4 <HAL_RCC_OscConfig+0x474>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d118      	bne.n	8001424 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f2:	4b74      	ldr	r3, [pc, #464]	@ (80015c4 <HAL_RCC_OscConfig+0x474>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a73      	ldr	r2, [pc, #460]	@ (80015c4 <HAL_RCC_OscConfig+0x474>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fb73 	bl	8000ae8 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001406:	f7ff fb6f 	bl	8000ae8 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e10c      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	4b6a      	ldr	r3, [pc, #424]	@ (80015c4 <HAL_RCC_OscConfig+0x474>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x2ea>
 800142c:	4b64      	ldr	r3, [pc, #400]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001430:	4a63      	ldr	r2, [pc, #396]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6713      	str	r3, [r2, #112]	@ 0x70
 8001438:	e01c      	b.n	8001474 <HAL_RCC_OscConfig+0x324>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b05      	cmp	r3, #5
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x30c>
 8001442:	4b5f      	ldr	r3, [pc, #380]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001446:	4a5e      	ldr	r2, [pc, #376]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6713      	str	r3, [r2, #112]	@ 0x70
 800144e:	4b5c      	ldr	r3, [pc, #368]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001452:	4a5b      	ldr	r2, [pc, #364]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6713      	str	r3, [r2, #112]	@ 0x70
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0x324>
 800145c:	4b58      	ldr	r3, [pc, #352]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001460:	4a57      	ldr	r2, [pc, #348]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	6713      	str	r3, [r2, #112]	@ 0x70
 8001468:	4b55      	ldr	r3, [pc, #340]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800146c:	4a54      	ldr	r2, [pc, #336]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 800146e:	f023 0304 	bic.w	r3, r3, #4
 8001472:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d015      	beq.n	80014a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147c:	f7ff fb34 	bl	8000ae8 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff fb30 	bl	8000ae8 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e0cb      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149a:	4b49      	ldr	r3, [pc, #292]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0ee      	beq.n	8001484 <HAL_RCC_OscConfig+0x334>
 80014a6:	e014      	b.n	80014d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a8:	f7ff fb1e 	bl	8000ae8 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ae:	e00a      	b.n	80014c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b0:	f7ff fb1a 	bl	8000ae8 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e0b5      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c6:	4b3e      	ldr	r3, [pc, #248]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1ee      	bne.n	80014b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014d2:	7dfb      	ldrb	r3, [r7, #23]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d8:	4b39      	ldr	r3, [pc, #228]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014dc:	4a38      	ldr	r2, [pc, #224]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80a1 	beq.w	8001630 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014ee:	4b34      	ldr	r3, [pc, #208]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d05c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d141      	bne.n	8001586 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001502:	4b31      	ldr	r3, [pc, #196]	@ (80015c8 <HAL_RCC_OscConfig+0x478>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff faee 	bl	8000ae8 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff faea 	bl	8000ae8 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e087      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001522:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69da      	ldr	r2, [r3, #28]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153c:	019b      	lsls	r3, r3, #6
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001544:	085b      	lsrs	r3, r3, #1
 8001546:	3b01      	subs	r3, #1
 8001548:	041b      	lsls	r3, r3, #16
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001550:	061b      	lsls	r3, r3, #24
 8001552:	491b      	ldr	r1, [pc, #108]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001558:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <HAL_RCC_OscConfig+0x478>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fac3 	bl	8000ae8 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff fabf 	bl	8000ae8 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e05c      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001578:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x416>
 8001584:	e054      	b.n	8001630 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <HAL_RCC_OscConfig+0x478>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff faac 	bl	8000ae8 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff faa8 	bl	8000ae8 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e045      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a6:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <HAL_RCC_OscConfig+0x470>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x444>
 80015b2:	e03d      	b.n	8001630 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d107      	bne.n	80015cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e038      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40007000 	.word	0x40007000
 80015c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	@ (800163c <HAL_RCC_OscConfig+0x4ec>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d028      	beq.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d121      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d11a      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015fc:	4013      	ands	r3, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001602:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001604:	4293      	cmp	r3, r2
 8001606:	d111      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	3b01      	subs	r3, #1
 8001616:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d107      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001626:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0cc      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001654:	4b68      	ldr	r3, [pc, #416]	@ (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d90c      	bls.n	800167c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b65      	ldr	r3, [pc, #404]	@ (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b63      	ldr	r3, [pc, #396]	@ (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0b8      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001694:	4b59      	ldr	r3, [pc, #356]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a58      	ldr	r2, [pc, #352]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800169e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ac:	4b53      	ldr	r3, [pc, #332]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a52      	ldr	r2, [pc, #328]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b50      	ldr	r3, [pc, #320]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	494d      	ldr	r1, [pc, #308]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d044      	beq.n	8001760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b47      	ldr	r3, [pc, #284]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d119      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fe:	4b3f      	ldr	r3, [pc, #252]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e06f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	4b3b      	ldr	r3, [pc, #236]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e067      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171e:	4b37      	ldr	r3, [pc, #220]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 0203 	bic.w	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4934      	ldr	r1, [pc, #208]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001730:	f7ff f9da 	bl	8000ae8 <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	e00a      	b.n	800174e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7ff f9d6 	bl	8000ae8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e04f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	4b2b      	ldr	r3, [pc, #172]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 020c 	and.w	r2, r3, #12
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	429a      	cmp	r2, r3
 800175e:	d1eb      	bne.n	8001738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001760:	4b25      	ldr	r3, [pc, #148]	@ (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d20c      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b20      	ldr	r3, [pc, #128]	@ (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e032      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4916      	ldr	r1, [pc, #88]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	490e      	ldr	r1, [pc, #56]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017c6:	f000 f821 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	490a      	ldr	r1, [pc, #40]	@ (8001800 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	5ccb      	ldrb	r3, [r1, r3]
 80017da:	fa22 f303 	lsr.w	r3, r2, r3
 80017de:	4a09      	ldr	r2, [pc, #36]	@ (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f93a 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023c00 	.word	0x40023c00
 80017fc:	40023800 	.word	0x40023800
 8001800:	080057c4 	.word	0x080057c4
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004

0800180c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001810:	b090      	sub	sp, #64	@ 0x40
 8001812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001824:	4b59      	ldr	r3, [pc, #356]	@ (800198c <HAL_RCC_GetSysClockFreq+0x180>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d00d      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0x40>
 8001830:	2b08      	cmp	r3, #8
 8001832:	f200 80a1 	bhi.w	8001978 <HAL_RCC_GetSysClockFreq+0x16c>
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x34>
 800183a:	2b04      	cmp	r3, #4
 800183c:	d003      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x3a>
 800183e:	e09b      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001840:	4b53      	ldr	r3, [pc, #332]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x184>)
 8001842:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001844:	e09b      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001846:	4b53      	ldr	r3, [pc, #332]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x188>)
 8001848:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800184a:	e098      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800184c:	4b4f      	ldr	r3, [pc, #316]	@ (800198c <HAL_RCC_GetSysClockFreq+0x180>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001854:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001856:	4b4d      	ldr	r3, [pc, #308]	@ (800198c <HAL_RCC_GetSysClockFreq+0x180>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d028      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001862:	4b4a      	ldr	r3, [pc, #296]	@ (800198c <HAL_RCC_GetSysClockFreq+0x180>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	099b      	lsrs	r3, r3, #6
 8001868:	2200      	movs	r2, #0
 800186a:	623b      	str	r3, [r7, #32]
 800186c:	627a      	str	r2, [r7, #36]	@ 0x24
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001874:	2100      	movs	r1, #0
 8001876:	4b47      	ldr	r3, [pc, #284]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x188>)
 8001878:	fb03 f201 	mul.w	r2, r3, r1
 800187c:	2300      	movs	r3, #0
 800187e:	fb00 f303 	mul.w	r3, r0, r3
 8001882:	4413      	add	r3, r2
 8001884:	4a43      	ldr	r2, [pc, #268]	@ (8001994 <HAL_RCC_GetSysClockFreq+0x188>)
 8001886:	fba0 1202 	umull	r1, r2, r0, r2
 800188a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800188c:	460a      	mov	r2, r1
 800188e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001890:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001892:	4413      	add	r3, r2
 8001894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001898:	2200      	movs	r2, #0
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	61fa      	str	r2, [r7, #28]
 800189e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80018a6:	f7fe fca3 	bl	80001f0 <__aeabi_uldivmod>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4613      	mov	r3, r2
 80018b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018b2:	e053      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b4:	4b35      	ldr	r3, [pc, #212]	@ (800198c <HAL_RCC_GetSysClockFreq+0x180>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	2200      	movs	r2, #0
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	617a      	str	r2, [r7, #20]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80018c6:	f04f 0b00 	mov.w	fp, #0
 80018ca:	4652      	mov	r2, sl
 80018cc:	465b      	mov	r3, fp
 80018ce:	f04f 0000 	mov.w	r0, #0
 80018d2:	f04f 0100 	mov.w	r1, #0
 80018d6:	0159      	lsls	r1, r3, #5
 80018d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018dc:	0150      	lsls	r0, r2, #5
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	ebb2 080a 	subs.w	r8, r2, sl
 80018e6:	eb63 090b 	sbc.w	r9, r3, fp
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018fe:	ebb2 0408 	subs.w	r4, r2, r8
 8001902:	eb63 0509 	sbc.w	r5, r3, r9
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	00eb      	lsls	r3, r5, #3
 8001910:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001914:	00e2      	lsls	r2, r4, #3
 8001916:	4614      	mov	r4, r2
 8001918:	461d      	mov	r5, r3
 800191a:	eb14 030a 	adds.w	r3, r4, sl
 800191e:	603b      	str	r3, [r7, #0]
 8001920:	eb45 030b 	adc.w	r3, r5, fp
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001932:	4629      	mov	r1, r5
 8001934:	028b      	lsls	r3, r1, #10
 8001936:	4621      	mov	r1, r4
 8001938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800193c:	4621      	mov	r1, r4
 800193e:	028a      	lsls	r2, r1, #10
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001946:	2200      	movs	r2, #0
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	60fa      	str	r2, [r7, #12]
 800194c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001950:	f7fe fc4e 	bl	80001f0 <__aeabi_uldivmod>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4613      	mov	r3, r2
 800195a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800195c:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <HAL_RCC_GetSysClockFreq+0x180>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	0c1b      	lsrs	r3, r3, #16
 8001962:	f003 0303 	and.w	r3, r3, #3
 8001966:	3301      	adds	r3, #1
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800196c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800196e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001970:	fbb2 f3f3 	udiv	r3, r2, r3
 8001974:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001976:	e002      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001978:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_RCC_GetSysClockFreq+0x184>)
 800197a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800197c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800197e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001980:	4618      	mov	r0, r3
 8001982:	3740      	adds	r7, #64	@ 0x40
 8001984:	46bd      	mov	sp, r7
 8001986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	00f42400 	.word	0x00f42400
 8001994:	017d7840 	.word	0x017d7840

08001998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800199c:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <HAL_RCC_GetHCLKFreq+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000000 	.word	0x20000000

080019b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019b4:	f7ff fff0 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019b8:	4602      	mov	r2, r0
 80019ba:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	0a9b      	lsrs	r3, r3, #10
 80019c0:	f003 0307 	and.w	r3, r3, #7
 80019c4:	4903      	ldr	r1, [pc, #12]	@ (80019d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019c6:	5ccb      	ldrb	r3, [r1, r3]
 80019c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	080057d4 	.word	0x080057d4

080019d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019dc:	f7ff ffdc 	bl	8001998 <HAL_RCC_GetHCLKFreq>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b05      	ldr	r3, [pc, #20]	@ (80019f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	0b5b      	lsrs	r3, r3, #13
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	4903      	ldr	r1, [pc, #12]	@ (80019fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ee:	5ccb      	ldrb	r3, [r1, r3]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	080057d4 	.word	0x080057d4

08001a00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e042      	b.n	8001a98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d106      	bne.n	8001a2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe ff3a 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2224      	movs	r2, #36	@ 0x24
 8001a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 fdd3 	bl	80025f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2220      	movs	r2, #32
 8001a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b08a      	sub	sp, #40	@ 0x28
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	4613      	mov	r3, r2
 8001aae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b20      	cmp	r3, #32
 8001abe:	d175      	bne.n	8001bac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d002      	beq.n	8001acc <HAL_UART_Transmit+0x2c>
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e06e      	b.n	8001bae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2221      	movs	r2, #33	@ 0x21
 8001ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ade:	f7ff f803 	bl	8000ae8 <HAL_GetTick>
 8001ae2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	88fa      	ldrh	r2, [r7, #6]
 8001ae8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	88fa      	ldrh	r2, [r7, #6]
 8001aee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001af8:	d108      	bne.n	8001b0c <HAL_UART_Transmit+0x6c>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d104      	bne.n	8001b0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	e003      	b.n	8001b14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b14:	e02e      	b.n	8001b74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2180      	movs	r1, #128	@ 0x80
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 fb37 	bl	8002194 <UART_WaitOnFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2220      	movs	r2, #32
 8001b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e03a      	b.n	8001bae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10b      	bne.n	8001b56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	3302      	adds	r3, #2
 8001b52:	61bb      	str	r3, [r7, #24]
 8001b54:	e007      	b.n	8001b66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	781a      	ldrb	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	3301      	adds	r3, #1
 8001b64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1cb      	bne.n	8001b16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2200      	movs	r2, #0
 8001b86:	2140      	movs	r1, #64	@ 0x40
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 fb03 	bl	8002194 <UART_WaitOnFlagUntilTimeout>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d005      	beq.n	8001ba0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2220      	movs	r2, #32
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e006      	b.n	8001bae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e000      	b.n	8001bae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001bac:	2302      	movs	r3, #2
  }
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3720      	adds	r7, #32
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	60f8      	str	r0, [r7, #12]
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d112      	bne.n	8001bf6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_UART_Receive_IT+0x26>
 8001bd6:	88fb      	ldrh	r3, [r7, #6]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e00b      	b.n	8001bf8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	461a      	mov	r2, r3
 8001bea:	68b9      	ldr	r1, [r7, #8]
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 fb2a 	bl	8002246 <UART_Start_Receive_IT>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	e000      	b.n	8001bf8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
  }
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b0ba      	sub	sp, #232	@ 0xe8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001c3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10f      	bne.n	8001c66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c4a:	f003 0320 	and.w	r3, r3, #32
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_UART_IRQHandler+0x66>
 8001c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c56:	f003 0320 	and.w	r3, r3, #32
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f000 fc07 	bl	8002472 <UART_Receive_IT>
      return;
 8001c64:	e273      	b.n	800214e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001c66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 80de 	beq.w	8001e2c <HAL_UART_IRQHandler+0x22c>
 8001c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d106      	bne.n	8001c8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80d1 	beq.w	8001e2c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00b      	beq.n	8001cae <HAL_UART_IRQHandler+0xae>
 8001c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	f043 0201 	orr.w	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_UART_IRQHandler+0xd2>
 8001cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	f043 0202 	orr.w	r2, r3, #2
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00b      	beq.n	8001cf6 <HAL_UART_IRQHandler+0xf6>
 8001cde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d005      	beq.n	8001cf6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	f043 0204 	orr.w	r2, r3, #4
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d011      	beq.n	8001d26 <HAL_UART_IRQHandler+0x126>
 8001d02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d06:	f003 0320 	and.w	r3, r3, #32
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d105      	bne.n	8001d1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	f043 0208 	orr.w	r2, r3, #8
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 820a 	beq.w	8002144 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_UART_IRQHandler+0x14e>
 8001d3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d40:	f003 0320 	and.w	r3, r3, #32
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fb92 	bl	8002472 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695b      	ldr	r3, [r3, #20]
 8001d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d58:	2b40      	cmp	r3, #64	@ 0x40
 8001d5a:	bf0c      	ite	eq
 8001d5c:	2301      	moveq	r3, #1
 8001d5e:	2300      	movne	r3, #0
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d103      	bne.n	8001d7a <HAL_UART_IRQHandler+0x17a>
 8001d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d04f      	beq.n	8001e1a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fa9d 	bl	80022ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d8a:	2b40      	cmp	r3, #64	@ 0x40
 8001d8c:	d141      	bne.n	8001e12 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3314      	adds	r3, #20
 8001d94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d9c:	e853 3f00 	ldrex	r3, [r3]
 8001da0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001da8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001dac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	3314      	adds	r3, #20
 8001db6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001dba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001dc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001dca:	e841 2300 	strex	r3, r2, [r1]
 8001dce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001dd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1d9      	bne.n	8001d8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d013      	beq.n	8001e0a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de6:	4a8a      	ldr	r2, [pc, #552]	@ (8002010 <HAL_UART_IRQHandler+0x410>)
 8001de8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f807 	bl	8000e02 <HAL_DMA_Abort_IT>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d016      	beq.n	8001e28 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e04:	4610      	mov	r0, r2
 8001e06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e08:	e00e      	b.n	8001e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f9ac 	bl	8002168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e10:	e00a      	b.n	8001e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f9a8 	bl	8002168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e18:	e006      	b.n	8001e28 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f9a4 	bl	8002168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001e26:	e18d      	b.n	8002144 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e28:	bf00      	nop
    return;
 8001e2a:	e18b      	b.n	8002144 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	f040 8167 	bne.w	8002104 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e3a:	f003 0310 	and.w	r3, r3, #16
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 8160 	beq.w	8002104 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8001e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e48:	f003 0310 	and.w	r3, r3, #16
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 8159 	beq.w	8002104 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e72:	2b40      	cmp	r3, #64	@ 0x40
 8001e74:	f040 80ce 	bne.w	8002014 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80a9 	beq.w	8001fe0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001e96:	429a      	cmp	r2, r3
 8001e98:	f080 80a2 	bcs.w	8001fe0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001ea2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eae:	f000 8088 	beq.w	8001fc2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	330c      	adds	r3, #12
 8001eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ec0:	e853 3f00 	ldrex	r3, [r3]
 8001ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	330c      	adds	r3, #12
 8001eda:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001ede:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001ee2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ee6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001eea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001eee:	e841 2300 	strex	r3, r2, [r1]
 8001ef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1d9      	bne.n	8001eb2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	3314      	adds	r3, #20
 8001f04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f08:	e853 3f00 	ldrex	r3, [r3]
 8001f0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001f0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	3314      	adds	r3, #20
 8001f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001f2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001f2e:	e841 2300 	strex	r3, r2, [r1]
 8001f32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001f34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1e1      	bne.n	8001efe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	3314      	adds	r3, #20
 8001f40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f44:	e853 3f00 	ldrex	r3, [r3]
 8001f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001f4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3314      	adds	r3, #20
 8001f5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001f5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001f64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001f66:	e841 2300 	strex	r3, r2, [r1]
 8001f6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1e3      	bne.n	8001f3a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2220      	movs	r2, #32
 8001f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	330c      	adds	r3, #12
 8001f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f8a:	e853 3f00 	ldrex	r3, [r3]
 8001f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001f90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f92:	f023 0310 	bic.w	r3, r3, #16
 8001f96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	330c      	adds	r3, #12
 8001fa0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001fa4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001fa6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fa8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001faa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001fac:	e841 2300 	strex	r3, r2, [r1]
 8001fb0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001fb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1e3      	bne.n	8001f80 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe feb0 	bl	8000d22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2202      	movs	r2, #2
 8001fc6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f8cf 	bl	800217c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8001fde:	e0b3      	b.n	8002148 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001fe4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	f040 80ad 	bne.w	8002148 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ff8:	f040 80a6 	bne.w	8002148 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002006:	4619      	mov	r1, r3
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f8b7 	bl	800217c <HAL_UARTEx_RxEventCallback>
      return;
 800200e:	e09b      	b.n	8002148 <HAL_UART_IRQHandler+0x548>
 8002010:	08002381 	.word	0x08002381
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800201c:	b29b      	uxth	r3, r3
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002028:	b29b      	uxth	r3, r3
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 808e 	beq.w	800214c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8002030:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 8089 	beq.w	800214c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	330c      	adds	r3, #12
 8002040:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002044:	e853 3f00 	ldrex	r3, [r3]
 8002048:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800204a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800204c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002050:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	330c      	adds	r3, #12
 800205a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800205e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002060:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002062:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002064:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002066:	e841 2300 	strex	r3, r2, [r1]
 800206a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800206c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1e3      	bne.n	800203a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3314      	adds	r3, #20
 8002078:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800207a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207c:	e853 3f00 	ldrex	r3, [r3]
 8002080:	623b      	str	r3, [r7, #32]
   return(result);
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	f023 0301 	bic.w	r3, r3, #1
 8002088:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	3314      	adds	r3, #20
 8002092:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002096:	633a      	str	r2, [r7, #48]	@ 0x30
 8002098:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800209a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800209c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800209e:	e841 2300 	strex	r3, r2, [r1]
 80020a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80020a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1e3      	bne.n	8002072 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	330c      	adds	r3, #12
 80020be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	e853 3f00 	ldrex	r3, [r3]
 80020c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f023 0310 	bic.w	r3, r3, #16
 80020ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	330c      	adds	r3, #12
 80020d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80020dc:	61fa      	str	r2, [r7, #28]
 80020de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e0:	69b9      	ldr	r1, [r7, #24]
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	e841 2300 	strex	r3, r2, [r1]
 80020e8:	617b      	str	r3, [r7, #20]
   return(result);
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1e3      	bne.n	80020b8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2202      	movs	r2, #2
 80020f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80020f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80020fa:	4619      	mov	r1, r3
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f83d 	bl	800217c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002102:	e023      	b.n	800214c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210c:	2b00      	cmp	r3, #0
 800210e:	d009      	beq.n	8002124 <HAL_UART_IRQHandler+0x524>
 8002110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f940 	bl	80023a2 <UART_Transmit_IT>
    return;
 8002122:	e014      	b.n	800214e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00e      	beq.n	800214e <HAL_UART_IRQHandler+0x54e>
 8002130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f980 	bl	8002442 <UART_EndTransmit_IT>
    return;
 8002142:	e004      	b.n	800214e <HAL_UART_IRQHandler+0x54e>
    return;
 8002144:	bf00      	nop
 8002146:	e002      	b.n	800214e <HAL_UART_IRQHandler+0x54e>
      return;
 8002148:	bf00      	nop
 800214a:	e000      	b.n	800214e <HAL_UART_IRQHandler+0x54e>
      return;
 800214c:	bf00      	nop
  }
}
 800214e:	37e8      	adds	r7, #232	@ 0xe8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	603b      	str	r3, [r7, #0]
 80021a0:	4613      	mov	r3, r2
 80021a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021a4:	e03b      	b.n	800221e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a6:	6a3b      	ldr	r3, [r7, #32]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d037      	beq.n	800221e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ae:	f7fe fc9b 	bl	8000ae8 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	6a3a      	ldr	r2, [r7, #32]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e03a      	b.n	800223e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d023      	beq.n	800221e <UART_WaitOnFlagUntilTimeout+0x8a>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b80      	cmp	r3, #128	@ 0x80
 80021da:	d020      	beq.n	800221e <UART_WaitOnFlagUntilTimeout+0x8a>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b40      	cmp	r3, #64	@ 0x40
 80021e0:	d01d      	beq.n	800221e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d116      	bne.n	800221e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f857 	bl	80022ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2208      	movs	r2, #8
 8002210:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4013      	ands	r3, r2
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	429a      	cmp	r2, r3
 800222c:	bf0c      	ite	eq
 800222e:	2301      	moveq	r3, #1
 8002230:	2300      	movne	r3, #0
 8002232:	b2db      	uxtb	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	429a      	cmp	r2, r3
 800223a:	d0b4      	beq.n	80021a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002246:	b480      	push	{r7}
 8002248:	b085      	sub	sp, #20
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	4613      	mov	r3, r2
 8002252:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	88fa      	ldrh	r2, [r7, #6]
 800225e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	88fa      	ldrh	r2, [r7, #6]
 8002264:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2222      	movs	r2, #34	@ 0x22
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800228a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0201 	orr.w	r2, r2, #1
 800229a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0220 	orr.w	r2, r2, #32
 80022aa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b095      	sub	sp, #84	@ 0x54
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	330c      	adds	r3, #12
 80022c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022cc:	e853 3f00 	ldrex	r3, [r3]
 80022d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80022d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	330c      	adds	r3, #12
 80022e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80022e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80022e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80022e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022ea:	e841 2300 	strex	r3, r2, [r1]
 80022ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80022f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1e5      	bne.n	80022c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	3314      	adds	r3, #20
 80022fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	e853 3f00 	ldrex	r3, [r3]
 8002304:	61fb      	str	r3, [r7, #28]
   return(result);
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3314      	adds	r3, #20
 8002314:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002316:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002318:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800231c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800231e:	e841 2300 	strex	r3, r2, [r1]
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1e5      	bne.n	80022f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	2b01      	cmp	r3, #1
 8002330:	d119      	bne.n	8002366 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	330c      	adds	r3, #12
 8002338:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	e853 3f00 	ldrex	r3, [r3]
 8002340:	60bb      	str	r3, [r7, #8]
   return(result);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f023 0310 	bic.w	r3, r3, #16
 8002348:	647b      	str	r3, [r7, #68]	@ 0x44
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	330c      	adds	r3, #12
 8002350:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002352:	61ba      	str	r2, [r7, #24]
 8002354:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002356:	6979      	ldr	r1, [r7, #20]
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	e841 2300 	strex	r3, r2, [r1]
 800235e:	613b      	str	r3, [r7, #16]
   return(result);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1e5      	bne.n	8002332 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2220      	movs	r2, #32
 800236a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002374:	bf00      	nop
 8002376:	3754      	adds	r7, #84	@ 0x54
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800238c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f7ff fee7 	bl	8002168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b21      	cmp	r3, #33	@ 0x21
 80023b4:	d13e      	bne.n	8002434 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023be:	d114      	bne.n	80023ea <UART_Transmit_IT+0x48>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d110      	bne.n	80023ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	1c9a      	adds	r2, r3, #2
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	621a      	str	r2, [r3, #32]
 80023e8:	e008      	b.n	80023fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	1c59      	adds	r1, r3, #1
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6211      	str	r1, [r2, #32]
 80023f4:	781a      	ldrb	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002400:	b29b      	uxth	r3, r3
 8002402:	3b01      	subs	r3, #1
 8002404:	b29b      	uxth	r3, r3
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	4619      	mov	r1, r3
 800240a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10f      	bne.n	8002430 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800241e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800242e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002430:	2300      	movs	r3, #0
 8002432:	e000      	b.n	8002436 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002434:	2302      	movs	r3, #2
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b082      	sub	sp, #8
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002458:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2220      	movs	r2, #32
 800245e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fe76 	bl	8002154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b08c      	sub	sp, #48	@ 0x30
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800247a:	2300      	movs	r3, #0
 800247c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800247e:	2300      	movs	r3, #0
 8002480:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b22      	cmp	r3, #34	@ 0x22
 800248c:	f040 80aa 	bne.w	80025e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002498:	d115      	bne.n	80024c6 <UART_Receive_IT+0x54>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d111      	bne.n	80024c6 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024be:	1c9a      	adds	r2, r3, #2
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80024c4:	e024      	b.n	8002510 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024d4:	d007      	beq.n	80024e6 <UART_Receive_IT+0x74>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10a      	bne.n	80024f4 <UART_Receive_IT+0x82>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d106      	bne.n	80024f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	e008      	b.n	8002506 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002500:	b2da      	uxtb	r2, r3
 8002502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002504:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29b      	uxth	r3, r3
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	4619      	mov	r1, r3
 800251e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002520:	2b00      	cmp	r3, #0
 8002522:	d15d      	bne.n	80025e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68da      	ldr	r2, [r3, #12]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 0220 	bic.w	r2, r2, #32
 8002532:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002542:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002566:	2b01      	cmp	r3, #1
 8002568:	d135      	bne.n	80025d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	330c      	adds	r3, #12
 8002576:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	e853 3f00 	ldrex	r3, [r3]
 800257e:	613b      	str	r3, [r7, #16]
   return(result);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	f023 0310 	bic.w	r3, r3, #16
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	330c      	adds	r3, #12
 800258e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002590:	623a      	str	r2, [r7, #32]
 8002592:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002594:	69f9      	ldr	r1, [r7, #28]
 8002596:	6a3a      	ldr	r2, [r7, #32]
 8002598:	e841 2300 	strex	r3, r2, [r1]
 800259c:	61bb      	str	r3, [r7, #24]
   return(result);
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1e5      	bne.n	8002570 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b10      	cmp	r3, #16
 80025b0:	d10a      	bne.n	80025c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025cc:	4619      	mov	r1, r3
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f7ff fdd4 	bl	800217c <HAL_UARTEx_RxEventCallback>
 80025d4:	e002      	b.n	80025dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe f8ec 	bl	80007b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	e002      	b.n	80025e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e000      	b.n	80025e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80025e4:	2302      	movs	r3, #2
  }
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3730      	adds	r7, #48	@ 0x30
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f4:	b0c0      	sub	sp, #256	@ 0x100
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260c:	68d9      	ldr	r1, [r3, #12]
 800260e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	ea40 0301 	orr.w	r3, r0, r1
 8002618:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800261a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	431a      	orrs	r2, r3
 8002628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	431a      	orrs	r2, r3
 8002630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800263c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002648:	f021 010c 	bic.w	r1, r1, #12
 800264c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002656:	430b      	orrs	r3, r1
 8002658:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800265a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800266a:	6999      	ldr	r1, [r3, #24]
 800266c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	ea40 0301 	orr.w	r3, r0, r1
 8002676:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4b8f      	ldr	r3, [pc, #572]	@ (80028bc <UART_SetConfig+0x2cc>)
 8002680:	429a      	cmp	r2, r3
 8002682:	d005      	beq.n	8002690 <UART_SetConfig+0xa0>
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	4b8d      	ldr	r3, [pc, #564]	@ (80028c0 <UART_SetConfig+0x2d0>)
 800268c:	429a      	cmp	r2, r3
 800268e:	d104      	bne.n	800269a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002690:	f7ff f9a2 	bl	80019d8 <HAL_RCC_GetPCLK2Freq>
 8002694:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002698:	e003      	b.n	80026a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800269a:	f7ff f989 	bl	80019b0 <HAL_RCC_GetPCLK1Freq>
 800269e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026ac:	f040 810c 	bne.w	80028c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026b4:	2200      	movs	r2, #0
 80026b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80026ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80026be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80026c2:	4622      	mov	r2, r4
 80026c4:	462b      	mov	r3, r5
 80026c6:	1891      	adds	r1, r2, r2
 80026c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80026ca:	415b      	adcs	r3, r3
 80026cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80026ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026d2:	4621      	mov	r1, r4
 80026d4:	eb12 0801 	adds.w	r8, r2, r1
 80026d8:	4629      	mov	r1, r5
 80026da:	eb43 0901 	adc.w	r9, r3, r1
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f2:	4690      	mov	r8, r2
 80026f4:	4699      	mov	r9, r3
 80026f6:	4623      	mov	r3, r4
 80026f8:	eb18 0303 	adds.w	r3, r8, r3
 80026fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002700:	462b      	mov	r3, r5
 8002702:	eb49 0303 	adc.w	r3, r9, r3
 8002706:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800270a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002716:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800271a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800271e:	460b      	mov	r3, r1
 8002720:	18db      	adds	r3, r3, r3
 8002722:	653b      	str	r3, [r7, #80]	@ 0x50
 8002724:	4613      	mov	r3, r2
 8002726:	eb42 0303 	adc.w	r3, r2, r3
 800272a:	657b      	str	r3, [r7, #84]	@ 0x54
 800272c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002730:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002734:	f7fd fd5c 	bl	80001f0 <__aeabi_uldivmod>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4b61      	ldr	r3, [pc, #388]	@ (80028c4 <UART_SetConfig+0x2d4>)
 800273e:	fba3 2302 	umull	r2, r3, r3, r2
 8002742:	095b      	lsrs	r3, r3, #5
 8002744:	011c      	lsls	r4, r3, #4
 8002746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800274a:	2200      	movs	r2, #0
 800274c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002750:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002754:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002758:	4642      	mov	r2, r8
 800275a:	464b      	mov	r3, r9
 800275c:	1891      	adds	r1, r2, r2
 800275e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002760:	415b      	adcs	r3, r3
 8002762:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002764:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002768:	4641      	mov	r1, r8
 800276a:	eb12 0a01 	adds.w	sl, r2, r1
 800276e:	4649      	mov	r1, r9
 8002770:	eb43 0b01 	adc.w	fp, r3, r1
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002780:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002784:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002788:	4692      	mov	sl, r2
 800278a:	469b      	mov	fp, r3
 800278c:	4643      	mov	r3, r8
 800278e:	eb1a 0303 	adds.w	r3, sl, r3
 8002792:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002796:	464b      	mov	r3, r9
 8002798:	eb4b 0303 	adc.w	r3, fp, r3
 800279c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80027a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80027b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80027b4:	460b      	mov	r3, r1
 80027b6:	18db      	adds	r3, r3, r3
 80027b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80027ba:	4613      	mov	r3, r2
 80027bc:	eb42 0303 	adc.w	r3, r2, r3
 80027c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80027c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80027c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80027ca:	f7fd fd11 	bl	80001f0 <__aeabi_uldivmod>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	4611      	mov	r1, r2
 80027d4:	4b3b      	ldr	r3, [pc, #236]	@ (80028c4 <UART_SetConfig+0x2d4>)
 80027d6:	fba3 2301 	umull	r2, r3, r3, r1
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2264      	movs	r2, #100	@ 0x64
 80027de:	fb02 f303 	mul.w	r3, r2, r3
 80027e2:	1acb      	subs	r3, r1, r3
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027ea:	4b36      	ldr	r3, [pc, #216]	@ (80028c4 <UART_SetConfig+0x2d4>)
 80027ec:	fba3 2302 	umull	r2, r3, r3, r2
 80027f0:	095b      	lsrs	r3, r3, #5
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80027f8:	441c      	add	r4, r3
 80027fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027fe:	2200      	movs	r2, #0
 8002800:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002804:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002808:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800280c:	4642      	mov	r2, r8
 800280e:	464b      	mov	r3, r9
 8002810:	1891      	adds	r1, r2, r2
 8002812:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002814:	415b      	adcs	r3, r3
 8002816:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002818:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800281c:	4641      	mov	r1, r8
 800281e:	1851      	adds	r1, r2, r1
 8002820:	6339      	str	r1, [r7, #48]	@ 0x30
 8002822:	4649      	mov	r1, r9
 8002824:	414b      	adcs	r3, r1
 8002826:	637b      	str	r3, [r7, #52]	@ 0x34
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002834:	4659      	mov	r1, fp
 8002836:	00cb      	lsls	r3, r1, #3
 8002838:	4651      	mov	r1, sl
 800283a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800283e:	4651      	mov	r1, sl
 8002840:	00ca      	lsls	r2, r1, #3
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	4603      	mov	r3, r0
 8002848:	4642      	mov	r2, r8
 800284a:	189b      	adds	r3, r3, r2
 800284c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002850:	464b      	mov	r3, r9
 8002852:	460a      	mov	r2, r1
 8002854:	eb42 0303 	adc.w	r3, r2, r3
 8002858:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002868:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800286c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002870:	460b      	mov	r3, r1
 8002872:	18db      	adds	r3, r3, r3
 8002874:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002876:	4613      	mov	r3, r2
 8002878:	eb42 0303 	adc.w	r3, r2, r3
 800287c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800287e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002882:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002886:	f7fd fcb3 	bl	80001f0 <__aeabi_uldivmod>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <UART_SetConfig+0x2d4>)
 8002890:	fba3 1302 	umull	r1, r3, r3, r2
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	2164      	movs	r1, #100	@ 0x64
 8002898:	fb01 f303 	mul.w	r3, r1, r3
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	3332      	adds	r3, #50	@ 0x32
 80028a2:	4a08      	ldr	r2, [pc, #32]	@ (80028c4 <UART_SetConfig+0x2d4>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	f003 0207 	and.w	r2, r3, #7
 80028ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4422      	add	r2, r4
 80028b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028b8:	e106      	b.n	8002ac8 <UART_SetConfig+0x4d8>
 80028ba:	bf00      	nop
 80028bc:	40011000 	.word	0x40011000
 80028c0:	40011400 	.word	0x40011400
 80028c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028cc:	2200      	movs	r2, #0
 80028ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80028d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80028da:	4642      	mov	r2, r8
 80028dc:	464b      	mov	r3, r9
 80028de:	1891      	adds	r1, r2, r2
 80028e0:	6239      	str	r1, [r7, #32]
 80028e2:	415b      	adcs	r3, r3
 80028e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028ea:	4641      	mov	r1, r8
 80028ec:	1854      	adds	r4, r2, r1
 80028ee:	4649      	mov	r1, r9
 80028f0:	eb43 0501 	adc.w	r5, r3, r1
 80028f4:	f04f 0200 	mov.w	r2, #0
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	00eb      	lsls	r3, r5, #3
 80028fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002902:	00e2      	lsls	r2, r4, #3
 8002904:	4614      	mov	r4, r2
 8002906:	461d      	mov	r5, r3
 8002908:	4643      	mov	r3, r8
 800290a:	18e3      	adds	r3, r4, r3
 800290c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002910:	464b      	mov	r3, r9
 8002912:	eb45 0303 	adc.w	r3, r5, r3
 8002916:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002926:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002936:	4629      	mov	r1, r5
 8002938:	008b      	lsls	r3, r1, #2
 800293a:	4621      	mov	r1, r4
 800293c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002940:	4621      	mov	r1, r4
 8002942:	008a      	lsls	r2, r1, #2
 8002944:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002948:	f7fd fc52 	bl	80001f0 <__aeabi_uldivmod>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4b60      	ldr	r3, [pc, #384]	@ (8002ad4 <UART_SetConfig+0x4e4>)
 8002952:	fba3 2302 	umull	r2, r3, r3, r2
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	011c      	lsls	r4, r3, #4
 800295a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800295e:	2200      	movs	r2, #0
 8002960:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002964:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002968:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800296c:	4642      	mov	r2, r8
 800296e:	464b      	mov	r3, r9
 8002970:	1891      	adds	r1, r2, r2
 8002972:	61b9      	str	r1, [r7, #24]
 8002974:	415b      	adcs	r3, r3
 8002976:	61fb      	str	r3, [r7, #28]
 8002978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800297c:	4641      	mov	r1, r8
 800297e:	1851      	adds	r1, r2, r1
 8002980:	6139      	str	r1, [r7, #16]
 8002982:	4649      	mov	r1, r9
 8002984:	414b      	adcs	r3, r1
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002994:	4659      	mov	r1, fp
 8002996:	00cb      	lsls	r3, r1, #3
 8002998:	4651      	mov	r1, sl
 800299a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800299e:	4651      	mov	r1, sl
 80029a0:	00ca      	lsls	r2, r1, #3
 80029a2:	4610      	mov	r0, r2
 80029a4:	4619      	mov	r1, r3
 80029a6:	4603      	mov	r3, r0
 80029a8:	4642      	mov	r2, r8
 80029aa:	189b      	adds	r3, r3, r2
 80029ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029b0:	464b      	mov	r3, r9
 80029b2:	460a      	mov	r2, r1
 80029b4:	eb42 0303 	adc.w	r3, r2, r3
 80029b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80029bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80029d4:	4649      	mov	r1, r9
 80029d6:	008b      	lsls	r3, r1, #2
 80029d8:	4641      	mov	r1, r8
 80029da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029de:	4641      	mov	r1, r8
 80029e0:	008a      	lsls	r2, r1, #2
 80029e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029e6:	f7fd fc03 	bl	80001f0 <__aeabi_uldivmod>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	4611      	mov	r1, r2
 80029f0:	4b38      	ldr	r3, [pc, #224]	@ (8002ad4 <UART_SetConfig+0x4e4>)
 80029f2:	fba3 2301 	umull	r2, r3, r3, r1
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2264      	movs	r2, #100	@ 0x64
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	1acb      	subs	r3, r1, r3
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	3332      	adds	r3, #50	@ 0x32
 8002a04:	4a33      	ldr	r2, [pc, #204]	@ (8002ad4 <UART_SetConfig+0x4e4>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a10:	441c      	add	r4, r3
 8002a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a16:	2200      	movs	r2, #0
 8002a18:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a1a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a1c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002a20:	4642      	mov	r2, r8
 8002a22:	464b      	mov	r3, r9
 8002a24:	1891      	adds	r1, r2, r2
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	415b      	adcs	r3, r3
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a30:	4641      	mov	r1, r8
 8002a32:	1851      	adds	r1, r2, r1
 8002a34:	6039      	str	r1, [r7, #0]
 8002a36:	4649      	mov	r1, r9
 8002a38:	414b      	adcs	r3, r1
 8002a3a:	607b      	str	r3, [r7, #4]
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a48:	4659      	mov	r1, fp
 8002a4a:	00cb      	lsls	r3, r1, #3
 8002a4c:	4651      	mov	r1, sl
 8002a4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a52:	4651      	mov	r1, sl
 8002a54:	00ca      	lsls	r2, r1, #3
 8002a56:	4610      	mov	r0, r2
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4642      	mov	r2, r8
 8002a5e:	189b      	adds	r3, r3, r2
 8002a60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a62:	464b      	mov	r3, r9
 8002a64:	460a      	mov	r2, r1
 8002a66:	eb42 0303 	adc.w	r3, r2, r3
 8002a6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a76:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a84:	4649      	mov	r1, r9
 8002a86:	008b      	lsls	r3, r1, #2
 8002a88:	4641      	mov	r1, r8
 8002a8a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a8e:	4641      	mov	r1, r8
 8002a90:	008a      	lsls	r2, r1, #2
 8002a92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a96:	f7fd fbab 	bl	80001f0 <__aeabi_uldivmod>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad4 <UART_SetConfig+0x4e4>)
 8002aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	2164      	movs	r1, #100	@ 0x64
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	3332      	adds	r3, #50	@ 0x32
 8002ab2:	4a08      	ldr	r2, [pc, #32]	@ (8002ad4 <UART_SetConfig+0x4e4>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	095b      	lsrs	r3, r3, #5
 8002aba:	f003 020f 	and.w	r2, r3, #15
 8002abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4422      	add	r2, r4
 8002ac6:	609a      	str	r2, [r3, #8]
}
 8002ac8:	bf00      	nop
 8002aca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ad4:	51eb851f 	.word	0x51eb851f

08002ad8 <__NVIC_SetPriority>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	6039      	str	r1, [r7, #0]
 8002ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	db0a      	blt.n	8002b02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	490c      	ldr	r1, [pc, #48]	@ (8002b24 <__NVIC_SetPriority+0x4c>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	0112      	lsls	r2, r2, #4
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	440b      	add	r3, r1
 8002afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002b00:	e00a      	b.n	8002b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4908      	ldr	r1, [pc, #32]	@ (8002b28 <__NVIC_SetPriority+0x50>)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	3b04      	subs	r3, #4
 8002b10:	0112      	lsls	r2, r2, #4
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	440b      	add	r3, r1
 8002b16:	761a      	strb	r2, [r3, #24]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	e000e100 	.word	0xe000e100
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002b30:	2100      	movs	r1, #0
 8002b32:	f06f 0004 	mvn.w	r0, #4
 8002b36:	f7ff ffcf 	bl	8002ad8 <__NVIC_SetPriority>
#endif
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b46:	f3ef 8305 	mrs	r3, IPSR
 8002b4a:	603b      	str	r3, [r7, #0]
  return(result);
 8002b4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002b52:	f06f 0305 	mvn.w	r3, #5
 8002b56:	607b      	str	r3, [r7, #4]
 8002b58:	e00c      	b.n	8002b74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b84 <osKernelInitialize+0x44>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d105      	bne.n	8002b6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002b62:	4b08      	ldr	r3, [pc, #32]	@ (8002b84 <osKernelInitialize+0x44>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	e002      	b.n	8002b74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b74:	687b      	ldr	r3, [r7, #4]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000084 	.word	0x20000084

08002b88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b8e:	f3ef 8305 	mrs	r3, IPSR
 8002b92:	603b      	str	r3, [r7, #0]
  return(result);
 8002b94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002b9a:	f06f 0305 	mvn.w	r3, #5
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	e010      	b.n	8002bc4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <osKernelStart+0x48>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d109      	bne.n	8002bbe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002baa:	f7ff ffbf 	bl	8002b2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002bae:	4b08      	ldr	r3, [pc, #32]	@ (8002bd0 <osKernelStart+0x48>)
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002bb4:	f001 f8b6 	bl	8003d24 <vTaskStartScheduler>
      stat = osOK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	607b      	str	r3, [r7, #4]
 8002bbc:	e002      	b.n	8002bc4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002bc4:	687b      	ldr	r3, [r7, #4]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000084 	.word	0x20000084

08002bd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08e      	sub	sp, #56	@ 0x38
 8002bd8:	af04      	add	r7, sp, #16
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002be4:	f3ef 8305 	mrs	r3, IPSR
 8002be8:	617b      	str	r3, [r7, #20]
  return(result);
 8002bea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d17e      	bne.n	8002cee <osThreadNew+0x11a>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d07b      	beq.n	8002cee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002bf6:	2380      	movs	r3, #128	@ 0x80
 8002bf8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002bfa:	2318      	movs	r3, #24
 8002bfc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002c02:	f04f 33ff 	mov.w	r3, #4294967295
 8002c06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d045      	beq.n	8002c9a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <osThreadNew+0x48>
        name = attr->name;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	699b      	ldr	r3, [r3, #24]
 8002c28:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d008      	beq.n	8002c42 <osThreadNew+0x6e>
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	2b38      	cmp	r3, #56	@ 0x38
 8002c34:	d805      	bhi.n	8002c42 <osThreadNew+0x6e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <osThreadNew+0x72>
        return (NULL);
 8002c42:	2300      	movs	r3, #0
 8002c44:	e054      	b.n	8002cf0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	089b      	lsrs	r3, r3, #2
 8002c54:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00e      	beq.n	8002c7c <osThreadNew+0xa8>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2b5b      	cmp	r3, #91	@ 0x5b
 8002c64:	d90a      	bls.n	8002c7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d002      	beq.n	8002c7c <osThreadNew+0xa8>
        mem = 1;
 8002c76:	2301      	movs	r3, #1
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	e010      	b.n	8002c9e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10c      	bne.n	8002c9e <osThreadNew+0xca>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d108      	bne.n	8002c9e <osThreadNew+0xca>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d104      	bne.n	8002c9e <osThreadNew+0xca>
          mem = 0;
 8002c94:	2300      	movs	r3, #0
 8002c96:	61bb      	str	r3, [r7, #24]
 8002c98:	e001      	b.n	8002c9e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d110      	bne.n	8002cc6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002cac:	9202      	str	r2, [sp, #8]
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	6a3a      	ldr	r2, [r7, #32]
 8002cb8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fe56 	bl	800396c <xTaskCreateStatic>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	613b      	str	r3, [r7, #16]
 8002cc4:	e013      	b.n	8002cee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d110      	bne.n	8002cee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	f107 0310 	add.w	r3, r7, #16
 8002cd4:	9301      	str	r3, [sp, #4]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fea4 	bl	8003a2c <xTaskCreate>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d001      	beq.n	8002cee <osThreadNew+0x11a>
            hTask = NULL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002cee:	693b      	ldr	r3, [r7, #16]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3728      	adds	r7, #40	@ 0x28
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d00:	f3ef 8305 	mrs	r3, IPSR
 8002d04:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d06:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <osDelay+0x1c>
    stat = osErrorISR;
 8002d0c:	f06f 0305 	mvn.w	r3, #5
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	e007      	b.n	8002d24 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 ffca 	bl	8003cb8 <vTaskDelay>
    }
  }

  return (stat);
 8002d24:	68fb      	ldr	r3, [r7, #12]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a07      	ldr	r2, [pc, #28]	@ (8002d5c <vApplicationGetIdleTaskMemory+0x2c>)
 8002d40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	4a06      	ldr	r2, [pc, #24]	@ (8002d60 <vApplicationGetIdleTaskMemory+0x30>)
 8002d46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2280      	movs	r2, #128	@ 0x80
 8002d4c:	601a      	str	r2, [r3, #0]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000088 	.word	0x20000088
 8002d60:	200000e4 	.word	0x200000e4

08002d64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4a07      	ldr	r2, [pc, #28]	@ (8002d90 <vApplicationGetTimerTaskMemory+0x2c>)
 8002d74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	4a06      	ldr	r2, [pc, #24]	@ (8002d94 <vApplicationGetTimerTaskMemory+0x30>)
 8002d7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d82:	601a      	str	r2, [r3, #0]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	200002e4 	.word	0x200002e4
 8002d94:	20000340 	.word	0x20000340

08002d98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f103 0208 	add.w	r2, r3, #8
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295
 8002db0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f103 0208 	add.w	r2, r3, #8
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f103 0208 	add.w	r2, r3, #8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	601a      	str	r2, [r3, #0]
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
 8002e42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e50:	d103      	bne.n	8002e5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	e00c      	b.n	8002e74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	60fb      	str	r3, [r7, #12]
 8002e60:	e002      	b.n	8002e68 <vListInsert+0x2e>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d2f6      	bcs.n	8002e62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	601a      	str	r2, [r3, #0]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6892      	ldr	r2, [r2, #8]
 8002ec2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6852      	ldr	r2, [r2, #4]
 8002ecc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d103      	bne.n	8002ee0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	1e5a      	subs	r2, r3, #1
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10b      	bne.n	8002f2c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f2c:	f002 f8b4 	bl	8005098 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f38:	68f9      	ldr	r1, [r7, #12]
 8002f3a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	441a      	add	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	68f9      	ldr	r1, [r7, #12]
 8002f60:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	441a      	add	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	22ff      	movs	r2, #255	@ 0xff
 8002f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	22ff      	movs	r2, #255	@ 0xff
 8002f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d114      	bne.n	8002fac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d01a      	beq.n	8002fc0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	3310      	adds	r3, #16
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f001 f956 	bl	8004240 <xTaskRemoveFromEventList>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d012      	beq.n	8002fc0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd0 <xQueueGenericReset+0xd0>)
 8002f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	f3bf 8f6f 	isb	sy
 8002faa:	e009      	b.n	8002fc0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3310      	adds	r3, #16
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fef1 	bl	8002d98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	3324      	adds	r3, #36	@ 0x24
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff feec 	bl	8002d98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002fc0:	f002 f89c 	bl	80050fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002fc4:	2301      	movs	r3, #1
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	e000ed04 	.word	0xe000ed04

08002fd4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b08e      	sub	sp, #56	@ 0x38
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10b      	bne.n	8003000 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fec:	f383 8811 	msr	BASEPRI, r3
 8002ff0:	f3bf 8f6f 	isb	sy
 8002ff4:	f3bf 8f4f 	dsb	sy
 8002ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ffa:	bf00      	nop
 8002ffc:	bf00      	nop
 8002ffe:	e7fd      	b.n	8002ffc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10b      	bne.n	800301e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	e7fd      	b.n	800301a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d002      	beq.n	800302a <xQueueGenericCreateStatic+0x56>
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <xQueueGenericCreateStatic+0x5a>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <xQueueGenericCreateStatic+0x5c>
 800302e:	2300      	movs	r3, #0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10b      	bne.n	800304c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	623b      	str	r3, [r7, #32]
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	e7fd      	b.n	8003048 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <xQueueGenericCreateStatic+0x84>
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <xQueueGenericCreateStatic+0x88>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <xQueueGenericCreateStatic+0x8a>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10b      	bne.n	800307a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	61fb      	str	r3, [r7, #28]
}
 8003074:	bf00      	nop
 8003076:	bf00      	nop
 8003078:	e7fd      	b.n	8003076 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800307a:	2350      	movs	r3, #80	@ 0x50
 800307c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b50      	cmp	r3, #80	@ 0x50
 8003082:	d00b      	beq.n	800309c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	61bb      	str	r3, [r7, #24]
}
 8003096:	bf00      	nop
 8003098:	bf00      	nop
 800309a:	e7fd      	b.n	8003098 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800309c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80030a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00d      	beq.n	80030c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80030b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f840 	bl	8003144 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3730      	adds	r7, #48	@ 0x30
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b08a      	sub	sp, #40	@ 0x28
 80030d2:	af02      	add	r7, sp, #8
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	4613      	mov	r3, r2
 80030da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <xQueueGenericCreate+0x2c>
	__asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	613b      	str	r3, [r7, #16]
}
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	e7fd      	b.n	80030f6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	fb02 f303 	mul.w	r3, r2, r3
 8003102:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	3350      	adds	r3, #80	@ 0x50
 8003108:	4618      	mov	r0, r3
 800310a:	f002 f8e7 	bl	80052dc <pvPortMalloc>
 800310e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d011      	beq.n	800313a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	3350      	adds	r3, #80	@ 0x50
 800311e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003128:	79fa      	ldrb	r2, [r7, #7]
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	4613      	mov	r3, r2
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 f805 	bl	8003144 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800313a:	69bb      	ldr	r3, [r7, #24]
	}
 800313c:	4618      	mov	r0, r3
 800313e:	3720      	adds	r7, #32
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
 8003150:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d103      	bne.n	8003160 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e002      	b.n	8003166 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	68ba      	ldr	r2, [r7, #8]
 8003170:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003172:	2101      	movs	r1, #1
 8003174:	69b8      	ldr	r0, [r7, #24]
 8003176:	f7ff fec3 	bl	8002f00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08e      	sub	sp, #56	@ 0x38
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800319a:	2300      	movs	r3, #0
 800319c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80031a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <xQueueGenericSend+0x34>
	__asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80031ba:	bf00      	nop
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d103      	bne.n	80031ce <xQueueGenericSend+0x42>
 80031c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <xQueueGenericSend+0x46>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <xQueueGenericSend+0x48>
 80031d2:	2300      	movs	r3, #0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10b      	bne.n	80031f0 <xQueueGenericSend+0x64>
	__asm volatile
 80031d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031dc:	f383 8811 	msr	BASEPRI, r3
 80031e0:	f3bf 8f6f 	isb	sy
 80031e4:	f3bf 8f4f 	dsb	sy
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80031ea:	bf00      	nop
 80031ec:	bf00      	nop
 80031ee:	e7fd      	b.n	80031ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d103      	bne.n	80031fe <xQueueGenericSend+0x72>
 80031f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d101      	bne.n	8003202 <xQueueGenericSend+0x76>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <xQueueGenericSend+0x78>
 8003202:	2300      	movs	r3, #0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d10b      	bne.n	8003220 <xQueueGenericSend+0x94>
	__asm volatile
 8003208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	623b      	str	r3, [r7, #32]
}
 800321a:	bf00      	nop
 800321c:	bf00      	nop
 800321e:	e7fd      	b.n	800321c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003220:	f001 f9ce 	bl	80045c0 <xTaskGetSchedulerState>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <xQueueGenericSend+0xa4>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <xQueueGenericSend+0xa8>
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <xQueueGenericSend+0xaa>
 8003234:	2300      	movs	r3, #0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10b      	bne.n	8003252 <xQueueGenericSend+0xc6>
	__asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	61fb      	str	r3, [r7, #28]
}
 800324c:	bf00      	nop
 800324e:	bf00      	nop
 8003250:	e7fd      	b.n	800324e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003252:	f001 ff21 	bl	8005098 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003258:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800325a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325e:	429a      	cmp	r2, r3
 8003260:	d302      	bcc.n	8003268 <xQueueGenericSend+0xdc>
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d129      	bne.n	80032bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800326e:	f000 fa0f 	bl	8003690 <prvCopyDataToQueue>
 8003272:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003278:	2b00      	cmp	r3, #0
 800327a:	d010      	beq.n	800329e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800327c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800327e:	3324      	adds	r3, #36	@ 0x24
 8003280:	4618      	mov	r0, r3
 8003282:	f000 ffdd 	bl	8004240 <xTaskRemoveFromEventList>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800328c:	4b3f      	ldr	r3, [pc, #252]	@ (800338c <xQueueGenericSend+0x200>)
 800328e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	e00a      	b.n	80032b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800329e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d007      	beq.n	80032b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032a4:	4b39      	ldr	r3, [pc, #228]	@ (800338c <xQueueGenericSend+0x200>)
 80032a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80032b4:	f001 ff22 	bl	80050fc <vPortExitCritical>
				return pdPASS;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e063      	b.n	8003384 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032c2:	f001 ff1b 	bl	80050fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	e05c      	b.n	8003384 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d106      	bne.n	80032de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032d0:	f107 0314 	add.w	r3, r7, #20
 80032d4:	4618      	mov	r0, r3
 80032d6:	f001 f817 	bl	8004308 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032da:	2301      	movs	r3, #1
 80032dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032de:	f001 ff0d 	bl	80050fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032e2:	f000 fd87 	bl	8003df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032e6:	f001 fed7 	bl	8005098 <vPortEnterCritical>
 80032ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032f0:	b25b      	sxtb	r3, r3
 80032f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f6:	d103      	bne.n	8003300 <xQueueGenericSend+0x174>
 80032f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003302:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003306:	b25b      	sxtb	r3, r3
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d103      	bne.n	8003316 <xQueueGenericSend+0x18a>
 800330e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003316:	f001 fef1 	bl	80050fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800331a:	1d3a      	adds	r2, r7, #4
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f001 f806 	bl	8004334 <xTaskCheckForTimeOut>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d124      	bne.n	8003378 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800332e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003330:	f000 faa6 	bl	8003880 <prvIsQueueFull>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d018      	beq.n	800336c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800333a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800333c:	3310      	adds	r3, #16
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	4611      	mov	r1, r2
 8003342:	4618      	mov	r0, r3
 8003344:	f000 ff2a 	bl	800419c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003348:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800334a:	f000 fa31 	bl	80037b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800334e:	f000 fd5f 	bl	8003e10 <xTaskResumeAll>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	f47f af7c 	bne.w	8003252 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800335a:	4b0c      	ldr	r3, [pc, #48]	@ (800338c <xQueueGenericSend+0x200>)
 800335c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	e772      	b.n	8003252 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800336c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800336e:	f000 fa1f 	bl	80037b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003372:	f000 fd4d 	bl	8003e10 <xTaskResumeAll>
 8003376:	e76c      	b.n	8003252 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003378:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800337a:	f000 fa19 	bl	80037b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800337e:	f000 fd47 	bl	8003e10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003382:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003384:	4618      	mov	r0, r3
 8003386:	3738      	adds	r7, #56	@ 0x38
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	e000ed04 	.word	0xe000ed04

08003390 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b090      	sub	sp, #64	@ 0x40
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
 800339c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80033a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
 80033be:	e7fd      	b.n	80033bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d103      	bne.n	80033ce <xQueueGenericSendFromISR+0x3e>
 80033c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <xQueueGenericSendFromISR+0x42>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <xQueueGenericSendFromISR+0x44>
 80033d2:	2300      	movs	r3, #0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10b      	bne.n	80033f0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d103      	bne.n	80033fe <xQueueGenericSendFromISR+0x6e>
 80033f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <xQueueGenericSendFromISR+0x72>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <xQueueGenericSendFromISR+0x74>
 8003402:	2300      	movs	r3, #0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	623b      	str	r3, [r7, #32]
}
 800341a:	bf00      	nop
 800341c:	bf00      	nop
 800341e:	e7fd      	b.n	800341c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003420:	f001 ff1a 	bl	8005258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003424:	f3ef 8211 	mrs	r2, BASEPRI
 8003428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342c:	f383 8811 	msr	BASEPRI, r3
 8003430:	f3bf 8f6f 	isb	sy
 8003434:	f3bf 8f4f 	dsb	sy
 8003438:	61fa      	str	r2, [r7, #28]
 800343a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800343c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800343e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003446:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003448:	429a      	cmp	r2, r3
 800344a:	d302      	bcc.n	8003452 <xQueueGenericSendFromISR+0xc2>
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d12f      	bne.n	80034b2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003454:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003458:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800345c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003460:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003462:	683a      	ldr	r2, [r7, #0]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003468:	f000 f912 	bl	8003690 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800346c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d112      	bne.n	800349c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	2b00      	cmp	r3, #0
 800347c:	d016      	beq.n	80034ac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800347e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003480:	3324      	adds	r3, #36	@ 0x24
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fedc 	bl	8004240 <xTaskRemoveFromEventList>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00e      	beq.n	80034ac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00b      	beq.n	80034ac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e007      	b.n	80034ac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800349c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80034a0:	3301      	adds	r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	b25a      	sxtb	r2, r3
 80034a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80034ac:	2301      	movs	r3, #1
 80034ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80034b0:	e001      	b.n	80034b6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80034c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3740      	adds	r7, #64	@ 0x40
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b08c      	sub	sp, #48	@ 0x30
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034d8:	2300      	movs	r3, #0
 80034da:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10b      	bne.n	80034fe <xQueueReceive+0x32>
	__asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ea:	f383 8811 	msr	BASEPRI, r3
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f3bf 8f4f 	dsb	sy
 80034f6:	623b      	str	r3, [r7, #32]
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	e7fd      	b.n	80034fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d103      	bne.n	800350c <xQueueReceive+0x40>
 8003504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <xQueueReceive+0x44>
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <xQueueReceive+0x46>
 8003510:	2300      	movs	r3, #0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10b      	bne.n	800352e <xQueueReceive+0x62>
	__asm volatile
 8003516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800351a:	f383 8811 	msr	BASEPRI, r3
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	f3bf 8f4f 	dsb	sy
 8003526:	61fb      	str	r3, [r7, #28]
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop
 800352c:	e7fd      	b.n	800352a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800352e:	f001 f847 	bl	80045c0 <xTaskGetSchedulerState>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <xQueueReceive+0x72>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <xQueueReceive+0x76>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <xQueueReceive+0x78>
 8003542:	2300      	movs	r3, #0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d10b      	bne.n	8003560 <xQueueReceive+0x94>
	__asm volatile
 8003548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800354c:	f383 8811 	msr	BASEPRI, r3
 8003550:	f3bf 8f6f 	isb	sy
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	61bb      	str	r3, [r7, #24]
}
 800355a:	bf00      	nop
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003560:	f001 fd9a 	bl	8005098 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	2b00      	cmp	r3, #0
 800356e:	d01f      	beq.n	80035b0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003574:	f000 f8f6 	bl	8003764 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800357a:	1e5a      	subs	r2, r3, #1
 800357c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00f      	beq.n	80035a8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358a:	3310      	adds	r3, #16
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fe57 	bl	8004240 <xTaskRemoveFromEventList>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003598:	4b3c      	ldr	r3, [pc, #240]	@ (800368c <xQueueReceive+0x1c0>)
 800359a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	f3bf 8f4f 	dsb	sy
 80035a4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035a8:	f001 fda8 	bl	80050fc <vPortExitCritical>
				return pdPASS;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e069      	b.n	8003684 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035b6:	f001 fda1 	bl	80050fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035ba:	2300      	movs	r3, #0
 80035bc:	e062      	b.n	8003684 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d106      	bne.n	80035d2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035c4:	f107 0310 	add.w	r3, r7, #16
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fe9d 	bl	8004308 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035ce:	2301      	movs	r3, #1
 80035d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035d2:	f001 fd93 	bl	80050fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035d6:	f000 fc0d 	bl	8003df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035da:	f001 fd5d 	bl	8005098 <vPortEnterCritical>
 80035de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035e4:	b25b      	sxtb	r3, r3
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ea:	d103      	bne.n	80035f4 <xQueueReceive+0x128>
 80035ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035fa:	b25b      	sxtb	r3, r3
 80035fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003600:	d103      	bne.n	800360a <xQueueReceive+0x13e>
 8003602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800360a:	f001 fd77 	bl	80050fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800360e:	1d3a      	adds	r2, r7, #4
 8003610:	f107 0310 	add.w	r3, r7, #16
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fe8c 	bl	8004334 <xTaskCheckForTimeOut>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d123      	bne.n	800366a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003622:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003624:	f000 f916 	bl	8003854 <prvIsQueueEmpty>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d017      	beq.n	800365e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800362e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003630:	3324      	adds	r3, #36	@ 0x24
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4611      	mov	r1, r2
 8003636:	4618      	mov	r0, r3
 8003638:	f000 fdb0 	bl	800419c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800363c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800363e:	f000 f8b7 	bl	80037b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003642:	f000 fbe5 	bl	8003e10 <xTaskResumeAll>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d189      	bne.n	8003560 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800364c:	4b0f      	ldr	r3, [pc, #60]	@ (800368c <xQueueReceive+0x1c0>)
 800364e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	e780      	b.n	8003560 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800365e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003660:	f000 f8a6 	bl	80037b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003664:	f000 fbd4 	bl	8003e10 <xTaskResumeAll>
 8003668:	e77a      	b.n	8003560 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800366a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800366c:	f000 f8a0 	bl	80037b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003670:	f000 fbce 	bl	8003e10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003674:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003676:	f000 f8ed 	bl	8003854 <prvIsQueueEmpty>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	f43f af6f 	beq.w	8003560 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003682:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003684:	4618      	mov	r0, r3
 8003686:	3730      	adds	r7, #48	@ 0x30
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	e000ed04 	.word	0xe000ed04

08003690 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d14d      	bne.n	8003752 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 ff9e 	bl	80045fc <xTaskPriorityDisinherit>
 80036c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	e043      	b.n	8003752 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d119      	bne.n	8003704 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6858      	ldr	r0, [r3, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	461a      	mov	r2, r3
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	f002 f818 	bl	8005710 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	441a      	add	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d32b      	bcc.n	8003752 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	e026      	b.n	8003752 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	68d8      	ldr	r0, [r3, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	461a      	mov	r2, r3
 800370e:	68b9      	ldr	r1, [r7, #8]
 8003710:	f001 fffe 	bl	8005710 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371c:	425b      	negs	r3, r3
 800371e:	441a      	add	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d207      	bcs.n	8003740 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003738:	425b      	negs	r3, r3
 800373a:	441a      	add	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d105      	bne.n	8003752 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	3b01      	subs	r3, #1
 8003750:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1c5a      	adds	r2, r3, #1
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800375a:	697b      	ldr	r3, [r7, #20]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d018      	beq.n	80037a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	441a      	add	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	429a      	cmp	r2, r3
 800378e:	d303      	bcc.n	8003798 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68d9      	ldr	r1, [r3, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a0:	461a      	mov	r2, r3
 80037a2:	6838      	ldr	r0, [r7, #0]
 80037a4:	f001 ffb4 	bl	8005710 <memcpy>
	}
}
 80037a8:	bf00      	nop
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037b8:	f001 fc6e 	bl	8005098 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037c4:	e011      	b.n	80037ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d012      	beq.n	80037f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3324      	adds	r3, #36	@ 0x24
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fd34 	bl	8004240 <xTaskRemoveFromEventList>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037de:	f000 fe0d 	bl	80043fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	dce9      	bgt.n	80037c6 <prvUnlockQueue+0x16>
 80037f2:	e000      	b.n	80037f6 <prvUnlockQueue+0x46>
					break;
 80037f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	22ff      	movs	r2, #255	@ 0xff
 80037fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80037fe:	f001 fc7d 	bl	80050fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003802:	f001 fc49 	bl	8005098 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800380c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800380e:	e011      	b.n	8003834 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d012      	beq.n	800383e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3310      	adds	r3, #16
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fd0f 	bl	8004240 <xTaskRemoveFromEventList>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003828:	f000 fde8 	bl	80043fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800382c:	7bbb      	ldrb	r3, [r7, #14]
 800382e:	3b01      	subs	r3, #1
 8003830:	b2db      	uxtb	r3, r3
 8003832:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003838:	2b00      	cmp	r3, #0
 800383a:	dce9      	bgt.n	8003810 <prvUnlockQueue+0x60>
 800383c:	e000      	b.n	8003840 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800383e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	22ff      	movs	r2, #255	@ 0xff
 8003844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003848:	f001 fc58 	bl	80050fc <vPortExitCritical>
}
 800384c:	bf00      	nop
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800385c:	f001 fc1c 	bl	8005098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003868:	2301      	movs	r3, #1
 800386a:	60fb      	str	r3, [r7, #12]
 800386c:	e001      	b.n	8003872 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003872:	f001 fc43 	bl	80050fc <vPortExitCritical>

	return xReturn;
 8003876:	68fb      	ldr	r3, [r7, #12]
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003888:	f001 fc06 	bl	8005098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003894:	429a      	cmp	r2, r3
 8003896:	d102      	bne.n	800389e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003898:	2301      	movs	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e001      	b.n	80038a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038a2:	f001 fc2b 	bl	80050fc <vPortExitCritical>

	return xReturn;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038b0:	b480      	push	{r7}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e014      	b.n	80038ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003900 <vQueueAddToRegistry+0x50>)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10b      	bne.n	80038e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038cc:	490c      	ldr	r1, [pc, #48]	@ (8003900 <vQueueAddToRegistry+0x50>)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003900 <vQueueAddToRegistry+0x50>)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	4413      	add	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038e2:	e006      	b.n	80038f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	3301      	adds	r3, #1
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b07      	cmp	r3, #7
 80038ee:	d9e7      	bls.n	80038c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038f0:	bf00      	nop
 80038f2:	bf00      	nop
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000740 	.word	0x20000740

08003904 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003914:	f001 fbc0 	bl	8005098 <vPortEnterCritical>
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800391e:	b25b      	sxtb	r3, r3
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d103      	bne.n	800392e <vQueueWaitForMessageRestricted+0x2a>
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003934:	b25b      	sxtb	r3, r3
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393a:	d103      	bne.n	8003944 <vQueueWaitForMessageRestricted+0x40>
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003944:	f001 fbda 	bl	80050fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800394c:	2b00      	cmp	r3, #0
 800394e:	d106      	bne.n	800395e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	3324      	adds	r3, #36	@ 0x24
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	4618      	mov	r0, r3
 800395a:	f000 fc45 	bl	80041e8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800395e:	6978      	ldr	r0, [r7, #20]
 8003960:	f7ff ff26 	bl	80037b0 <prvUnlockQueue>
	}
 8003964:	bf00      	nop
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08e      	sub	sp, #56	@ 0x38
 8003970:	af04      	add	r7, sp, #16
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800397a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	623b      	str	r3, [r7, #32]
}
 8003992:	bf00      	nop
 8003994:	bf00      	nop
 8003996:	e7fd      	b.n	8003994 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10b      	bne.n	80039b6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	61fb      	str	r3, [r7, #28]
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	e7fd      	b.n	80039b2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039b6:	235c      	movs	r3, #92	@ 0x5c
 80039b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80039be:	d00b      	beq.n	80039d8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	61bb      	str	r3, [r7, #24]
}
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	e7fd      	b.n	80039d4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01e      	beq.n	8003a1e <xTaskCreateStatic+0xb2>
 80039e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d01b      	beq.n	8003a1e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039ee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039f8:	2300      	movs	r3, #0
 80039fa:	9303      	str	r3, [sp, #12]
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	9302      	str	r3, [sp, #8]
 8003a00:	f107 0314 	add.w	r3, r7, #20
 8003a04:	9301      	str	r3, [sp, #4]
 8003a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a08:	9300      	str	r3, [sp, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f850 	bl	8003ab6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a18:	f000 f8de 	bl	8003bd8 <prvAddNewTaskToReadyList>
 8003a1c:	e001      	b.n	8003a22 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a22:	697b      	ldr	r3, [r7, #20]
	}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3728      	adds	r7, #40	@ 0x28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08c      	sub	sp, #48	@ 0x30
 8003a30:	af04      	add	r7, sp, #16
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 fc4b 	bl	80052dc <pvPortMalloc>
 8003a46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00e      	beq.n	8003a6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a4e:	205c      	movs	r0, #92	@ 0x5c
 8003a50:	f001 fc44 	bl	80052dc <pvPortMalloc>
 8003a54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	697a      	ldr	r2, [r7, #20]
 8003a60:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a62:	e005      	b.n	8003a70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a64:	6978      	ldr	r0, [r7, #20]
 8003a66:	f001 fd07 	bl	8005478 <vPortFree>
 8003a6a:	e001      	b.n	8003a70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d017      	beq.n	8003aa6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a7e:	88fa      	ldrh	r2, [r7, #6]
 8003a80:	2300      	movs	r3, #0
 8003a82:	9303      	str	r3, [sp, #12]
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	9302      	str	r3, [sp, #8]
 8003a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a8a:	9301      	str	r3, [sp, #4]
 8003a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f80e 	bl	8003ab6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a9a:	69f8      	ldr	r0, [r7, #28]
 8003a9c:	f000 f89c 	bl	8003bd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e002      	b.n	8003aac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aaa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003aac:	69bb      	ldr	r3, [r7, #24]
	}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b088      	sub	sp, #32
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	461a      	mov	r2, r3
 8003ace:	21a5      	movs	r1, #165	@ 0xa5
 8003ad0:	f001 fdf2 	bl	80056b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f023 0307 	bic.w	r3, r3, #7
 8003aec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	617b      	str	r3, [r7, #20]
}
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	e7fd      	b.n	8003b0c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d01f      	beq.n	8003b56 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	e012      	b.n	8003b42 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	7819      	ldrb	r1, [r3, #0]
 8003b24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	4413      	add	r3, r2
 8003b2a:	3334      	adds	r3, #52	@ 0x34
 8003b2c:	460a      	mov	r2, r1
 8003b2e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d006      	beq.n	8003b4a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	3301      	adds	r3, #1
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	2b0f      	cmp	r3, #15
 8003b46:	d9e9      	bls.n	8003b1c <prvInitialiseNewTask+0x66>
 8003b48:	e000      	b.n	8003b4c <prvInitialiseNewTask+0x96>
			{
				break;
 8003b4a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b54:	e003      	b.n	8003b5e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	2b37      	cmp	r3, #55	@ 0x37
 8003b62:	d901      	bls.n	8003b68 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b64:	2337      	movs	r3, #55	@ 0x37
 8003b66:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b6c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b72:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	2200      	movs	r2, #0
 8003b78:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff f92a 	bl	8002dd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b86:	3318      	adds	r3, #24
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff f925 	bl	8002dd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b92:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ba2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	68f9      	ldr	r1, [r7, #12]
 8003bb6:	69b8      	ldr	r0, [r7, #24]
 8003bb8:	f001 f93e 	bl	8004e38 <pxPortInitialiseStack>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bce:	bf00      	nop
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003be0:	f001 fa5a 	bl	8005098 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003be4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c9c <prvAddNewTaskToReadyList+0xc4>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3301      	adds	r3, #1
 8003bea:	4a2c      	ldr	r2, [pc, #176]	@ (8003c9c <prvAddNewTaskToReadyList+0xc4>)
 8003bec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bee:	4b2c      	ldr	r3, [pc, #176]	@ (8003ca0 <prvAddNewTaskToReadyList+0xc8>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8003ca0 <prvAddNewTaskToReadyList+0xc8>)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bfc:	4b27      	ldr	r3, [pc, #156]	@ (8003c9c <prvAddNewTaskToReadyList+0xc4>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d110      	bne.n	8003c26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c04:	f000 fc1e 	bl	8004444 <prvInitialiseTaskLists>
 8003c08:	e00d      	b.n	8003c26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c0a:	4b26      	ldr	r3, [pc, #152]	@ (8003ca4 <prvAddNewTaskToReadyList+0xcc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d109      	bne.n	8003c26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c12:	4b23      	ldr	r3, [pc, #140]	@ (8003ca0 <prvAddNewTaskToReadyList+0xc8>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d802      	bhi.n	8003c26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c20:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca0 <prvAddNewTaskToReadyList+0xc8>)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c26:	4b20      	ldr	r3, [pc, #128]	@ (8003ca8 <prvAddNewTaskToReadyList+0xd0>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ca8 <prvAddNewTaskToReadyList+0xd0>)
 8003c2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ca8 <prvAddNewTaskToReadyList+0xd0>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cac <prvAddNewTaskToReadyList+0xd4>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d903      	bls.n	8003c4c <prvAddNewTaskToReadyList+0x74>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c48:	4a18      	ldr	r2, [pc, #96]	@ (8003cac <prvAddNewTaskToReadyList+0xd4>)
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4a15      	ldr	r2, [pc, #84]	@ (8003cb0 <prvAddNewTaskToReadyList+0xd8>)
 8003c5a:	441a      	add	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f7ff f8c5 	bl	8002df2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c68:	f001 fa48 	bl	80050fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca4 <prvAddNewTaskToReadyList+0xcc>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00e      	beq.n	8003c92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca0 <prvAddNewTaskToReadyList+0xc8>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d207      	bcs.n	8003c92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c82:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb4 <prvAddNewTaskToReadyList+0xdc>)
 8003c84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c88:	601a      	str	r2, [r3, #0]
 8003c8a:	f3bf 8f4f 	dsb	sy
 8003c8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000c54 	.word	0x20000c54
 8003ca0:	20000780 	.word	0x20000780
 8003ca4:	20000c60 	.word	0x20000c60
 8003ca8:	20000c70 	.word	0x20000c70
 8003cac:	20000c5c 	.word	0x20000c5c
 8003cb0:	20000784 	.word	0x20000784
 8003cb4:	e000ed04 	.word	0xe000ed04

08003cb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d018      	beq.n	8003cfc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cca:	4b14      	ldr	r3, [pc, #80]	@ (8003d1c <vTaskDelay+0x64>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00b      	beq.n	8003cea <vTaskDelay+0x32>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	60bb      	str	r3, [r7, #8]
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	e7fd      	b.n	8003ce6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cea:	f000 f883 	bl	8003df4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cee:	2100      	movs	r1, #0
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 fcf3 	bl	80046dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cf6:	f000 f88b 	bl	8003e10 <xTaskResumeAll>
 8003cfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d107      	bne.n	8003d12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003d02:	4b07      	ldr	r3, [pc, #28]	@ (8003d20 <vTaskDelay+0x68>)
 8003d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d12:	bf00      	nop
 8003d14:	3710      	adds	r7, #16
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000c7c 	.word	0x20000c7c
 8003d20:	e000ed04 	.word	0xe000ed04

08003d24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b08a      	sub	sp, #40	@ 0x28
 8003d28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d32:	463a      	mov	r2, r7
 8003d34:	1d39      	adds	r1, r7, #4
 8003d36:	f107 0308 	add.w	r3, r7, #8
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe fff8 	bl	8002d30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d40:	6839      	ldr	r1, [r7, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	9202      	str	r2, [sp, #8]
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	460a      	mov	r2, r1
 8003d52:	4922      	ldr	r1, [pc, #136]	@ (8003ddc <vTaskStartScheduler+0xb8>)
 8003d54:	4822      	ldr	r0, [pc, #136]	@ (8003de0 <vTaskStartScheduler+0xbc>)
 8003d56:	f7ff fe09 	bl	800396c <xTaskCreateStatic>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4a21      	ldr	r2, [pc, #132]	@ (8003de4 <vTaskStartScheduler+0xc0>)
 8003d5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d60:	4b20      	ldr	r3, [pc, #128]	@ (8003de4 <vTaskStartScheduler+0xc0>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	e001      	b.n	8003d72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d102      	bne.n	8003d7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d78:	f000 fd04 	bl	8004784 <xTimerCreateTimerTask>
 8003d7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d116      	bne.n	8003db2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	613b      	str	r3, [r7, #16]
}
 8003d96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d98:	4b13      	ldr	r3, [pc, #76]	@ (8003de8 <vTaskStartScheduler+0xc4>)
 8003d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003da0:	4b12      	ldr	r3, [pc, #72]	@ (8003dec <vTaskStartScheduler+0xc8>)
 8003da2:	2201      	movs	r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003da6:	4b12      	ldr	r3, [pc, #72]	@ (8003df0 <vTaskStartScheduler+0xcc>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dac:	f001 f8d0 	bl	8004f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003db0:	e00f      	b.n	8003dd2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d10b      	bne.n	8003dd2 <vTaskStartScheduler+0xae>
	__asm volatile
 8003dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	60fb      	str	r3, [r7, #12]
}
 8003dcc:	bf00      	nop
 8003dce:	bf00      	nop
 8003dd0:	e7fd      	b.n	8003dce <vTaskStartScheduler+0xaa>
}
 8003dd2:	bf00      	nop
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	08005788 	.word	0x08005788
 8003de0:	08004415 	.word	0x08004415
 8003de4:	20000c78 	.word	0x20000c78
 8003de8:	20000c74 	.word	0x20000c74
 8003dec:	20000c60 	.word	0x20000c60
 8003df0:	20000c58 	.word	0x20000c58

08003df4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003df8:	4b04      	ldr	r3, [pc, #16]	@ (8003e0c <vTaskSuspendAll+0x18>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	4a03      	ldr	r2, [pc, #12]	@ (8003e0c <vTaskSuspendAll+0x18>)
 8003e00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e02:	bf00      	nop
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	20000c7c 	.word	0x20000c7c

08003e10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e1e:	4b42      	ldr	r3, [pc, #264]	@ (8003f28 <xTaskResumeAll+0x118>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10b      	bne.n	8003e3e <xTaskResumeAll+0x2e>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	603b      	str	r3, [r7, #0]
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	e7fd      	b.n	8003e3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e3e:	f001 f92b 	bl	8005098 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e42:	4b39      	ldr	r3, [pc, #228]	@ (8003f28 <xTaskResumeAll+0x118>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	3b01      	subs	r3, #1
 8003e48:	4a37      	ldr	r2, [pc, #220]	@ (8003f28 <xTaskResumeAll+0x118>)
 8003e4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e4c:	4b36      	ldr	r3, [pc, #216]	@ (8003f28 <xTaskResumeAll+0x118>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d162      	bne.n	8003f1a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e54:	4b35      	ldr	r3, [pc, #212]	@ (8003f2c <xTaskResumeAll+0x11c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d05e      	beq.n	8003f1a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e5c:	e02f      	b.n	8003ebe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e5e:	4b34      	ldr	r3, [pc, #208]	@ (8003f30 <xTaskResumeAll+0x120>)
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	3318      	adds	r3, #24
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff f81e 	bl	8002eac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3304      	adds	r3, #4
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff f819 	bl	8002eac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8003f34 <xTaskResumeAll+0x124>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d903      	bls.n	8003e8e <xTaskResumeAll+0x7e>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f34 <xTaskResumeAll+0x124>)
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e92:	4613      	mov	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4413      	add	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4a27      	ldr	r2, [pc, #156]	@ (8003f38 <xTaskResumeAll+0x128>)
 8003e9c:	441a      	add	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7fe ffa4 	bl	8002df2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eae:	4b23      	ldr	r3, [pc, #140]	@ (8003f3c <xTaskResumeAll+0x12c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003eb8:	4b21      	ldr	r3, [pc, #132]	@ (8003f40 <xTaskResumeAll+0x130>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8003f30 <xTaskResumeAll+0x120>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1cb      	bne.n	8003e5e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ecc:	f000 fb58 	bl	8004580 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f44 <xTaskResumeAll+0x134>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d010      	beq.n	8003efe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003edc:	f000 f846 	bl	8003f6c <xTaskIncrementTick>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003ee6:	4b16      	ldr	r3, [pc, #88]	@ (8003f40 <xTaskResumeAll+0x130>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1f1      	bne.n	8003edc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003ef8:	4b12      	ldr	r3, [pc, #72]	@ (8003f44 <xTaskResumeAll+0x134>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003efe:	4b10      	ldr	r3, [pc, #64]	@ (8003f40 <xTaskResumeAll+0x130>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f06:	2301      	movs	r3, #1
 8003f08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003f48 <xTaskResumeAll+0x138>)
 8003f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f1a:	f001 f8ef 	bl	80050fc <vPortExitCritical>

	return xAlreadyYielded;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20000c7c 	.word	0x20000c7c
 8003f2c:	20000c54 	.word	0x20000c54
 8003f30:	20000c14 	.word	0x20000c14
 8003f34:	20000c5c 	.word	0x20000c5c
 8003f38:	20000784 	.word	0x20000784
 8003f3c:	20000780 	.word	0x20000780
 8003f40:	20000c68 	.word	0x20000c68
 8003f44:	20000c64 	.word	0x20000c64
 8003f48:	e000ed04 	.word	0xe000ed04

08003f4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f52:	4b05      	ldr	r3, [pc, #20]	@ (8003f68 <xTaskGetTickCount+0x1c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f58:	687b      	ldr	r3, [r7, #4]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	20000c58 	.word	0x20000c58

08003f6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f72:	2300      	movs	r3, #0
 8003f74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f76:	4b4f      	ldr	r3, [pc, #316]	@ (80040b4 <xTaskIncrementTick+0x148>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f040 8090 	bne.w	80040a0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f80:	4b4d      	ldr	r3, [pc, #308]	@ (80040b8 <xTaskIncrementTick+0x14c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3301      	adds	r3, #1
 8003f86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f88:	4a4b      	ldr	r2, [pc, #300]	@ (80040b8 <xTaskIncrementTick+0x14c>)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d121      	bne.n	8003fd8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f94:	4b49      	ldr	r3, [pc, #292]	@ (80040bc <xTaskIncrementTick+0x150>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	603b      	str	r3, [r7, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	e7fd      	b.n	8003fb2 <xTaskIncrementTick+0x46>
 8003fb6:	4b41      	ldr	r3, [pc, #260]	@ (80040bc <xTaskIncrementTick+0x150>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	4b40      	ldr	r3, [pc, #256]	@ (80040c0 <xTaskIncrementTick+0x154>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a3e      	ldr	r2, [pc, #248]	@ (80040bc <xTaskIncrementTick+0x150>)
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	4a3e      	ldr	r2, [pc, #248]	@ (80040c0 <xTaskIncrementTick+0x154>)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	4b3e      	ldr	r3, [pc, #248]	@ (80040c4 <xTaskIncrementTick+0x158>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	4a3c      	ldr	r2, [pc, #240]	@ (80040c4 <xTaskIncrementTick+0x158>)
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	f000 fad4 	bl	8004580 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80040c8 <xTaskIncrementTick+0x15c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d349      	bcc.n	8004076 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fe2:	4b36      	ldr	r3, [pc, #216]	@ (80040bc <xTaskIncrementTick+0x150>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d104      	bne.n	8003ff6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fec:	4b36      	ldr	r3, [pc, #216]	@ (80040c8 <xTaskIncrementTick+0x15c>)
 8003fee:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff2:	601a      	str	r2, [r3, #0]
					break;
 8003ff4:	e03f      	b.n	8004076 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff6:	4b31      	ldr	r3, [pc, #196]	@ (80040bc <xTaskIncrementTick+0x150>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004006:	693a      	ldr	r2, [r7, #16]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	429a      	cmp	r2, r3
 800400c:	d203      	bcs.n	8004016 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800400e:	4a2e      	ldr	r2, [pc, #184]	@ (80040c8 <xTaskIncrementTick+0x15c>)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004014:	e02f      	b.n	8004076 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	3304      	adds	r3, #4
 800401a:	4618      	mov	r0, r3
 800401c:	f7fe ff46 	bl	8002eac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004024:	2b00      	cmp	r3, #0
 8004026:	d004      	beq.n	8004032 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	3318      	adds	r3, #24
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe ff3d 	bl	8002eac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004036:	4b25      	ldr	r3, [pc, #148]	@ (80040cc <xTaskIncrementTick+0x160>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	429a      	cmp	r2, r3
 800403c:	d903      	bls.n	8004046 <xTaskIncrementTick+0xda>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004042:	4a22      	ldr	r2, [pc, #136]	@ (80040cc <xTaskIncrementTick+0x160>)
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4a1f      	ldr	r2, [pc, #124]	@ (80040d0 <xTaskIncrementTick+0x164>)
 8004054:	441a      	add	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	3304      	adds	r3, #4
 800405a:	4619      	mov	r1, r3
 800405c:	4610      	mov	r0, r2
 800405e:	f7fe fec8 	bl	8002df2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004066:	4b1b      	ldr	r3, [pc, #108]	@ (80040d4 <xTaskIncrementTick+0x168>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406c:	429a      	cmp	r2, r3
 800406e:	d3b8      	bcc.n	8003fe2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004070:	2301      	movs	r3, #1
 8004072:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004074:	e7b5      	b.n	8003fe2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004076:	4b17      	ldr	r3, [pc, #92]	@ (80040d4 <xTaskIncrementTick+0x168>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800407c:	4914      	ldr	r1, [pc, #80]	@ (80040d0 <xTaskIncrementTick+0x164>)
 800407e:	4613      	mov	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d901      	bls.n	8004092 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800408e:	2301      	movs	r3, #1
 8004090:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004092:	4b11      	ldr	r3, [pc, #68]	@ (80040d8 <xTaskIncrementTick+0x16c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800409a:	2301      	movs	r3, #1
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e004      	b.n	80040aa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80040a0:	4b0e      	ldr	r3, [pc, #56]	@ (80040dc <xTaskIncrementTick+0x170>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3301      	adds	r3, #1
 80040a6:	4a0d      	ldr	r2, [pc, #52]	@ (80040dc <xTaskIncrementTick+0x170>)
 80040a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80040aa:	697b      	ldr	r3, [r7, #20]
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000c7c 	.word	0x20000c7c
 80040b8:	20000c58 	.word	0x20000c58
 80040bc:	20000c0c 	.word	0x20000c0c
 80040c0:	20000c10 	.word	0x20000c10
 80040c4:	20000c6c 	.word	0x20000c6c
 80040c8:	20000c74 	.word	0x20000c74
 80040cc:	20000c5c 	.word	0x20000c5c
 80040d0:	20000784 	.word	0x20000784
 80040d4:	20000780 	.word	0x20000780
 80040d8:	20000c68 	.word	0x20000c68
 80040dc:	20000c64 	.word	0x20000c64

080040e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040e6:	4b28      	ldr	r3, [pc, #160]	@ (8004188 <vTaskSwitchContext+0xa8>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040ee:	4b27      	ldr	r3, [pc, #156]	@ (800418c <vTaskSwitchContext+0xac>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040f4:	e042      	b.n	800417c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80040f6:	4b25      	ldr	r3, [pc, #148]	@ (800418c <vTaskSwitchContext+0xac>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040fc:	4b24      	ldr	r3, [pc, #144]	@ (8004190 <vTaskSwitchContext+0xb0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	e011      	b.n	8004128 <vTaskSwitchContext+0x48>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10b      	bne.n	8004122 <vTaskSwitchContext+0x42>
	__asm volatile
 800410a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	607b      	str	r3, [r7, #4]
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	e7fd      	b.n	800411e <vTaskSwitchContext+0x3e>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3b01      	subs	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	491a      	ldr	r1, [pc, #104]	@ (8004194 <vTaskSwitchContext+0xb4>)
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	440b      	add	r3, r1
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0e3      	beq.n	8004104 <vTaskSwitchContext+0x24>
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4a13      	ldr	r2, [pc, #76]	@ (8004194 <vTaskSwitchContext+0xb4>)
 8004148:	4413      	add	r3, r2
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	605a      	str	r2, [r3, #4]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	3308      	adds	r3, #8
 800415e:	429a      	cmp	r2, r3
 8004160:	d104      	bne.n	800416c <vTaskSwitchContext+0x8c>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	685a      	ldr	r2, [r3, #4]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	605a      	str	r2, [r3, #4]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	4a09      	ldr	r2, [pc, #36]	@ (8004198 <vTaskSwitchContext+0xb8>)
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	4a06      	ldr	r2, [pc, #24]	@ (8004190 <vTaskSwitchContext+0xb0>)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6013      	str	r3, [r2, #0]
}
 800417c:	bf00      	nop
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	20000c7c 	.word	0x20000c7c
 800418c:	20000c68 	.word	0x20000c68
 8004190:	20000c5c 	.word	0x20000c5c
 8004194:	20000784 	.word	0x20000784
 8004198:	20000780 	.word	0x20000780

0800419c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10b      	bne.n	80041c4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80041ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b0:	f383 8811 	msr	BASEPRI, r3
 80041b4:	f3bf 8f6f 	isb	sy
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	60fb      	str	r3, [r7, #12]
}
 80041be:	bf00      	nop
 80041c0:	bf00      	nop
 80041c2:	e7fd      	b.n	80041c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041c4:	4b07      	ldr	r3, [pc, #28]	@ (80041e4 <vTaskPlaceOnEventList+0x48>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3318      	adds	r3, #24
 80041ca:	4619      	mov	r1, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7fe fe34 	bl	8002e3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041d2:	2101      	movs	r1, #1
 80041d4:	6838      	ldr	r0, [r7, #0]
 80041d6:	f000 fa81 	bl	80046dc <prvAddCurrentTaskToDelayedList>
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000780 	.word	0x20000780

080041e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10b      	bne.n	8004212 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	617b      	str	r3, [r7, #20]
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	e7fd      	b.n	800420e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004212:	4b0a      	ldr	r3, [pc, #40]	@ (800423c <vTaskPlaceOnEventListRestricted+0x54>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3318      	adds	r3, #24
 8004218:	4619      	mov	r1, r3
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7fe fde9 	bl	8002df2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004226:	f04f 33ff 	mov.w	r3, #4294967295
 800422a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	68b8      	ldr	r0, [r7, #8]
 8004230:	f000 fa54 	bl	80046dc <prvAddCurrentTaskToDelayedList>
	}
 8004234:	bf00      	nop
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	20000780 	.word	0x20000780

08004240 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425a:	f383 8811 	msr	BASEPRI, r3
 800425e:	f3bf 8f6f 	isb	sy
 8004262:	f3bf 8f4f 	dsb	sy
 8004266:	60fb      	str	r3, [r7, #12]
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	e7fd      	b.n	800426a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	3318      	adds	r3, #24
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe fe1a 	bl	8002eac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004278:	4b1d      	ldr	r3, [pc, #116]	@ (80042f0 <xTaskRemoveFromEventList+0xb0>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d11d      	bne.n	80042bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	3304      	adds	r3, #4
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe fe11 	bl	8002eac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428e:	4b19      	ldr	r3, [pc, #100]	@ (80042f4 <xTaskRemoveFromEventList+0xb4>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d903      	bls.n	800429e <xTaskRemoveFromEventList+0x5e>
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800429a:	4a16      	ldr	r2, [pc, #88]	@ (80042f4 <xTaskRemoveFromEventList+0xb4>)
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4a13      	ldr	r2, [pc, #76]	@ (80042f8 <xTaskRemoveFromEventList+0xb8>)
 80042ac:	441a      	add	r2, r3
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f7fe fd9c 	bl	8002df2 <vListInsertEnd>
 80042ba:	e005      	b.n	80042c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	3318      	adds	r3, #24
 80042c0:	4619      	mov	r1, r3
 80042c2:	480e      	ldr	r0, [pc, #56]	@ (80042fc <xTaskRemoveFromEventList+0xbc>)
 80042c4:	f7fe fd95 	bl	8002df2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042cc:	4b0c      	ldr	r3, [pc, #48]	@ (8004300 <xTaskRemoveFromEventList+0xc0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d905      	bls.n	80042e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042d6:	2301      	movs	r3, #1
 80042d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042da:	4b0a      	ldr	r3, [pc, #40]	@ (8004304 <xTaskRemoveFromEventList+0xc4>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e001      	b.n	80042e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80042e6:	697b      	ldr	r3, [r7, #20]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20000c7c 	.word	0x20000c7c
 80042f4:	20000c5c 	.word	0x20000c5c
 80042f8:	20000784 	.word	0x20000784
 80042fc:	20000c14 	.word	0x20000c14
 8004300:	20000780 	.word	0x20000780
 8004304:	20000c68 	.word	0x20000c68

08004308 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004310:	4b06      	ldr	r3, [pc, #24]	@ (800432c <vTaskInternalSetTimeOutState+0x24>)
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004318:	4b05      	ldr	r3, [pc, #20]	@ (8004330 <vTaskInternalSetTimeOutState+0x28>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	605a      	str	r2, [r3, #4]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	20000c6c 	.word	0x20000c6c
 8004330:	20000c58 	.word	0x20000c58

08004334 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10b      	bne.n	800435c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	613b      	str	r3, [r7, #16]
}
 8004356:	bf00      	nop
 8004358:	bf00      	nop
 800435a:	e7fd      	b.n	8004358 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10b      	bne.n	800437a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	60fb      	str	r3, [r7, #12]
}
 8004374:	bf00      	nop
 8004376:	bf00      	nop
 8004378:	e7fd      	b.n	8004376 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800437a:	f000 fe8d 	bl	8005098 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800437e:	4b1d      	ldr	r3, [pc, #116]	@ (80043f4 <xTaskCheckForTimeOut+0xc0>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004396:	d102      	bne.n	800439e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004398:	2300      	movs	r3, #0
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	e023      	b.n	80043e6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	4b15      	ldr	r3, [pc, #84]	@ (80043f8 <xTaskCheckForTimeOut+0xc4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d007      	beq.n	80043ba <xTaskCheckForTimeOut+0x86>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d302      	bcc.n	80043ba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80043b4:	2301      	movs	r3, #1
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	e015      	b.n	80043e6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d20b      	bcs.n	80043dc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	1ad2      	subs	r2, r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ff99 	bl	8004308 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
 80043da:	e004      	b.n	80043e6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043e2:	2301      	movs	r3, #1
 80043e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043e6:	f000 fe89 	bl	80050fc <vPortExitCritical>

	return xReturn;
 80043ea:	69fb      	ldr	r3, [r7, #28]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000c58 	.word	0x20000c58
 80043f8:	20000c6c 	.word	0x20000c6c

080043fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004400:	4b03      	ldr	r3, [pc, #12]	@ (8004410 <vTaskMissedYield+0x14>)
 8004402:	2201      	movs	r2, #1
 8004404:	601a      	str	r2, [r3, #0]
}
 8004406:	bf00      	nop
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	20000c68 	.word	0x20000c68

08004414 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800441c:	f000 f852 	bl	80044c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004420:	4b06      	ldr	r3, [pc, #24]	@ (800443c <prvIdleTask+0x28>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d9f9      	bls.n	800441c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004428:	4b05      	ldr	r3, [pc, #20]	@ (8004440 <prvIdleTask+0x2c>)
 800442a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004438:	e7f0      	b.n	800441c <prvIdleTask+0x8>
 800443a:	bf00      	nop
 800443c:	20000784 	.word	0x20000784
 8004440:	e000ed04 	.word	0xe000ed04

08004444 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800444a:	2300      	movs	r3, #0
 800444c:	607b      	str	r3, [r7, #4]
 800444e:	e00c      	b.n	800446a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	4613      	mov	r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4413      	add	r3, r2
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4a12      	ldr	r2, [pc, #72]	@ (80044a4 <prvInitialiseTaskLists+0x60>)
 800445c:	4413      	add	r3, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fc9a 	bl	8002d98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	3301      	adds	r3, #1
 8004468:	607b      	str	r3, [r7, #4]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b37      	cmp	r3, #55	@ 0x37
 800446e:	d9ef      	bls.n	8004450 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004470:	480d      	ldr	r0, [pc, #52]	@ (80044a8 <prvInitialiseTaskLists+0x64>)
 8004472:	f7fe fc91 	bl	8002d98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004476:	480d      	ldr	r0, [pc, #52]	@ (80044ac <prvInitialiseTaskLists+0x68>)
 8004478:	f7fe fc8e 	bl	8002d98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800447c:	480c      	ldr	r0, [pc, #48]	@ (80044b0 <prvInitialiseTaskLists+0x6c>)
 800447e:	f7fe fc8b 	bl	8002d98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004482:	480c      	ldr	r0, [pc, #48]	@ (80044b4 <prvInitialiseTaskLists+0x70>)
 8004484:	f7fe fc88 	bl	8002d98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004488:	480b      	ldr	r0, [pc, #44]	@ (80044b8 <prvInitialiseTaskLists+0x74>)
 800448a:	f7fe fc85 	bl	8002d98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800448e:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <prvInitialiseTaskLists+0x78>)
 8004490:	4a05      	ldr	r2, [pc, #20]	@ (80044a8 <prvInitialiseTaskLists+0x64>)
 8004492:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004494:	4b0a      	ldr	r3, [pc, #40]	@ (80044c0 <prvInitialiseTaskLists+0x7c>)
 8004496:	4a05      	ldr	r2, [pc, #20]	@ (80044ac <prvInitialiseTaskLists+0x68>)
 8004498:	601a      	str	r2, [r3, #0]
}
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000784 	.word	0x20000784
 80044a8:	20000be4 	.word	0x20000be4
 80044ac:	20000bf8 	.word	0x20000bf8
 80044b0:	20000c14 	.word	0x20000c14
 80044b4:	20000c28 	.word	0x20000c28
 80044b8:	20000c40 	.word	0x20000c40
 80044bc:	20000c0c 	.word	0x20000c0c
 80044c0:	20000c10 	.word	0x20000c10

080044c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044ca:	e019      	b.n	8004500 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80044cc:	f000 fde4 	bl	8005098 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d0:	4b10      	ldr	r3, [pc, #64]	@ (8004514 <prvCheckTasksWaitingTermination+0x50>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3304      	adds	r3, #4
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe fce5 	bl	8002eac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004518 <prvCheckTasksWaitingTermination+0x54>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004518 <prvCheckTasksWaitingTermination+0x54>)
 80044ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044ec:	4b0b      	ldr	r3, [pc, #44]	@ (800451c <prvCheckTasksWaitingTermination+0x58>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	4a0a      	ldr	r2, [pc, #40]	@ (800451c <prvCheckTasksWaitingTermination+0x58>)
 80044f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044f6:	f000 fe01 	bl	80050fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f810 	bl	8004520 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004500:	4b06      	ldr	r3, [pc, #24]	@ (800451c <prvCheckTasksWaitingTermination+0x58>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e1      	bne.n	80044cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000c28 	.word	0x20000c28
 8004518:	20000c54 	.word	0x20000c54
 800451c:	20000c3c 	.word	0x20000c3c

08004520 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800452e:	2b00      	cmp	r3, #0
 8004530:	d108      	bne.n	8004544 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004536:	4618      	mov	r0, r3
 8004538:	f000 ff9e 	bl	8005478 <vPortFree>
				vPortFree( pxTCB );
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 ff9b 	bl	8005478 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004542:	e019      	b.n	8004578 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800454a:	2b01      	cmp	r3, #1
 800454c:	d103      	bne.n	8004556 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 ff92 	bl	8005478 <vPortFree>
	}
 8004554:	e010      	b.n	8004578 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800455c:	2b02      	cmp	r3, #2
 800455e:	d00b      	beq.n	8004578 <prvDeleteTCB+0x58>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	60fb      	str	r3, [r7, #12]
}
 8004572:	bf00      	nop
 8004574:	bf00      	nop
 8004576:	e7fd      	b.n	8004574 <prvDeleteTCB+0x54>
	}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004586:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <prvResetNextTaskUnblockTime+0x38>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d104      	bne.n	800459a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004590:	4b0a      	ldr	r3, [pc, #40]	@ (80045bc <prvResetNextTaskUnblockTime+0x3c>)
 8004592:	f04f 32ff 	mov.w	r2, #4294967295
 8004596:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004598:	e008      	b.n	80045ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800459a:	4b07      	ldr	r3, [pc, #28]	@ (80045b8 <prvResetNextTaskUnblockTime+0x38>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4a04      	ldr	r2, [pc, #16]	@ (80045bc <prvResetNextTaskUnblockTime+0x3c>)
 80045aa:	6013      	str	r3, [r2, #0]
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr
 80045b8:	20000c0c 	.word	0x20000c0c
 80045bc:	20000c74 	.word	0x20000c74

080045c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80045c6:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <xTaskGetSchedulerState+0x34>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d102      	bne.n	80045d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80045ce:	2301      	movs	r3, #1
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	e008      	b.n	80045e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045d4:	4b08      	ldr	r3, [pc, #32]	@ (80045f8 <xTaskGetSchedulerState+0x38>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d102      	bne.n	80045e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045dc:	2302      	movs	r3, #2
 80045de:	607b      	str	r3, [r7, #4]
 80045e0:	e001      	b.n	80045e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045e6:	687b      	ldr	r3, [r7, #4]
	}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	20000c60 	.word	0x20000c60
 80045f8:	20000c7c 	.word	0x20000c7c

080045fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d058      	beq.n	80046c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004612:	4b2f      	ldr	r3, [pc, #188]	@ (80046d0 <xTaskPriorityDisinherit+0xd4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	693a      	ldr	r2, [r7, #16]
 8004618:	429a      	cmp	r2, r3
 800461a:	d00b      	beq.n	8004634 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	60fb      	str	r3, [r7, #12]
}
 800462e:	bf00      	nop
 8004630:	bf00      	nop
 8004632:	e7fd      	b.n	8004630 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10b      	bne.n	8004654 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800463c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004640:	f383 8811 	msr	BASEPRI, r3
 8004644:	f3bf 8f6f 	isb	sy
 8004648:	f3bf 8f4f 	dsb	sy
 800464c:	60bb      	str	r3, [r7, #8]
}
 800464e:	bf00      	nop
 8004650:	bf00      	nop
 8004652:	e7fd      	b.n	8004650 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004658:	1e5a      	subs	r2, r3, #1
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004666:	429a      	cmp	r2, r3
 8004668:	d02c      	beq.n	80046c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800466e:	2b00      	cmp	r3, #0
 8004670:	d128      	bne.n	80046c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	3304      	adds	r3, #4
 8004676:	4618      	mov	r0, r3
 8004678:	f7fe fc18 	bl	8002eac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004688:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004694:	4b0f      	ldr	r3, [pc, #60]	@ (80046d4 <xTaskPriorityDisinherit+0xd8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d903      	bls.n	80046a4 <xTaskPriorityDisinherit+0xa8>
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a0:	4a0c      	ldr	r2, [pc, #48]	@ (80046d4 <xTaskPriorityDisinherit+0xd8>)
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4a09      	ldr	r2, [pc, #36]	@ (80046d8 <xTaskPriorityDisinherit+0xdc>)
 80046b2:	441a      	add	r2, r3
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f7fe fb99 	bl	8002df2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046c0:	2301      	movs	r3, #1
 80046c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046c4:	697b      	ldr	r3, [r7, #20]
	}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000780 	.word	0x20000780
 80046d4:	20000c5c 	.word	0x20000c5c
 80046d8:	20000784 	.word	0x20000784

080046dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046e6:	4b21      	ldr	r3, [pc, #132]	@ (800476c <prvAddCurrentTaskToDelayedList+0x90>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046ec:	4b20      	ldr	r3, [pc, #128]	@ (8004770 <prvAddCurrentTaskToDelayedList+0x94>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3304      	adds	r3, #4
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe fbda 	bl	8002eac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fe:	d10a      	bne.n	8004716 <prvAddCurrentTaskToDelayedList+0x3a>
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d007      	beq.n	8004716 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004706:	4b1a      	ldr	r3, [pc, #104]	@ (8004770 <prvAddCurrentTaskToDelayedList+0x94>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3304      	adds	r3, #4
 800470c:	4619      	mov	r1, r3
 800470e:	4819      	ldr	r0, [pc, #100]	@ (8004774 <prvAddCurrentTaskToDelayedList+0x98>)
 8004710:	f7fe fb6f 	bl	8002df2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004714:	e026      	b.n	8004764 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4413      	add	r3, r2
 800471c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800471e:	4b14      	ldr	r3, [pc, #80]	@ (8004770 <prvAddCurrentTaskToDelayedList+0x94>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	429a      	cmp	r2, r3
 800472c:	d209      	bcs.n	8004742 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800472e:	4b12      	ldr	r3, [pc, #72]	@ (8004778 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b0f      	ldr	r3, [pc, #60]	@ (8004770 <prvAddCurrentTaskToDelayedList+0x94>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f7fe fb7d 	bl	8002e3a <vListInsert>
}
 8004740:	e010      	b.n	8004764 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004742:	4b0e      	ldr	r3, [pc, #56]	@ (800477c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4b0a      	ldr	r3, [pc, #40]	@ (8004770 <prvAddCurrentTaskToDelayedList+0x94>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7fe fb73 	bl	8002e3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004754:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	429a      	cmp	r2, r3
 800475c:	d202      	bcs.n	8004764 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800475e:	4a08      	ldr	r2, [pc, #32]	@ (8004780 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	6013      	str	r3, [r2, #0]
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	20000c58 	.word	0x20000c58
 8004770:	20000780 	.word	0x20000780
 8004774:	20000c40 	.word	0x20000c40
 8004778:	20000c10 	.word	0x20000c10
 800477c:	20000c0c 	.word	0x20000c0c
 8004780:	20000c74 	.word	0x20000c74

08004784 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b08a      	sub	sp, #40	@ 0x28
 8004788:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800478e:	f000 fb13 	bl	8004db8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004792:	4b1d      	ldr	r3, [pc, #116]	@ (8004808 <xTimerCreateTimerTask+0x84>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d021      	beq.n	80047de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047a2:	1d3a      	adds	r2, r7, #4
 80047a4:	f107 0108 	add.w	r1, r7, #8
 80047a8:	f107 030c 	add.w	r3, r7, #12
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe fad9 	bl	8002d64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	9202      	str	r2, [sp, #8]
 80047ba:	9301      	str	r3, [sp, #4]
 80047bc:	2302      	movs	r3, #2
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	2300      	movs	r3, #0
 80047c2:	460a      	mov	r2, r1
 80047c4:	4911      	ldr	r1, [pc, #68]	@ (800480c <xTimerCreateTimerTask+0x88>)
 80047c6:	4812      	ldr	r0, [pc, #72]	@ (8004810 <xTimerCreateTimerTask+0x8c>)
 80047c8:	f7ff f8d0 	bl	800396c <xTaskCreateStatic>
 80047cc:	4603      	mov	r3, r0
 80047ce:	4a11      	ldr	r2, [pc, #68]	@ (8004814 <xTimerCreateTimerTask+0x90>)
 80047d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80047d2:	4b10      	ldr	r3, [pc, #64]	@ (8004814 <xTimerCreateTimerTask+0x90>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80047da:	2301      	movs	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d10b      	bne.n	80047fc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80047e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	613b      	str	r3, [r7, #16]
}
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	e7fd      	b.n	80047f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80047fc:	697b      	ldr	r3, [r7, #20]
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3718      	adds	r7, #24
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000cb0 	.word	0x20000cb0
 800480c:	08005790 	.word	0x08005790
 8004810:	08004951 	.word	0x08004951
 8004814:	20000cb4 	.word	0x20000cb4

08004818 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	@ 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
 8004824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004826:	2300      	movs	r3, #0
 8004828:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10b      	bne.n	8004848 <xTimerGenericCommand+0x30>
	__asm volatile
 8004830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004834:	f383 8811 	msr	BASEPRI, r3
 8004838:	f3bf 8f6f 	isb	sy
 800483c:	f3bf 8f4f 	dsb	sy
 8004840:	623b      	str	r3, [r7, #32]
}
 8004842:	bf00      	nop
 8004844:	bf00      	nop
 8004846:	e7fd      	b.n	8004844 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004848:	4b19      	ldr	r3, [pc, #100]	@ (80048b0 <xTimerGenericCommand+0x98>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d02a      	beq.n	80048a6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b05      	cmp	r3, #5
 8004860:	dc18      	bgt.n	8004894 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004862:	f7ff fead 	bl	80045c0 <xTaskGetSchedulerState>
 8004866:	4603      	mov	r3, r0
 8004868:	2b02      	cmp	r3, #2
 800486a:	d109      	bne.n	8004880 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800486c:	4b10      	ldr	r3, [pc, #64]	@ (80048b0 <xTimerGenericCommand+0x98>)
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	f107 0110 	add.w	r1, r7, #16
 8004874:	2300      	movs	r3, #0
 8004876:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004878:	f7fe fc88 	bl	800318c <xQueueGenericSend>
 800487c:	6278      	str	r0, [r7, #36]	@ 0x24
 800487e:	e012      	b.n	80048a6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004880:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <xTimerGenericCommand+0x98>)
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	f107 0110 	add.w	r1, r7, #16
 8004888:	2300      	movs	r3, #0
 800488a:	2200      	movs	r2, #0
 800488c:	f7fe fc7e 	bl	800318c <xQueueGenericSend>
 8004890:	6278      	str	r0, [r7, #36]	@ 0x24
 8004892:	e008      	b.n	80048a6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004894:	4b06      	ldr	r3, [pc, #24]	@ (80048b0 <xTimerGenericCommand+0x98>)
 8004896:	6818      	ldr	r0, [r3, #0]
 8004898:	f107 0110 	add.w	r1, r7, #16
 800489c:	2300      	movs	r3, #0
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	f7fe fd76 	bl	8003390 <xQueueGenericSendFromISR>
 80048a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80048a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3728      	adds	r7, #40	@ 0x28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000cb0 	.word	0x20000cb0

080048b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af02      	add	r7, sp, #8
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048be:	4b23      	ldr	r3, [pc, #140]	@ (800494c <prvProcessExpiredTimer+0x98>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	3304      	adds	r3, #4
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fe faed 	bl	8002eac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d023      	beq.n	8004928 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	699a      	ldr	r2, [r3, #24]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	18d1      	adds	r1, r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	683a      	ldr	r2, [r7, #0]
 80048ec:	6978      	ldr	r0, [r7, #20]
 80048ee:	f000 f8d5 	bl	8004a9c <prvInsertTimerInActiveList>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d020      	beq.n	800493a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80048f8:	2300      	movs	r3, #0
 80048fa:	9300      	str	r3, [sp, #0]
 80048fc:	2300      	movs	r3, #0
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	2100      	movs	r1, #0
 8004902:	6978      	ldr	r0, [r7, #20]
 8004904:	f7ff ff88 	bl	8004818 <xTimerGenericCommand>
 8004908:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d114      	bne.n	800493a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	60fb      	str	r3, [r7, #12]
}
 8004922:	bf00      	nop
 8004924:	bf00      	nop
 8004926:	e7fd      	b.n	8004924 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800492e:	f023 0301 	bic.w	r3, r3, #1
 8004932:	b2da      	uxtb	r2, r3
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	6978      	ldr	r0, [r7, #20]
 8004940:	4798      	blx	r3
}
 8004942:	bf00      	nop
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000ca8 	.word	0x20000ca8

08004950 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004958:	f107 0308 	add.w	r3, r7, #8
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f859 	bl	8004a14 <prvGetNextExpireTime>
 8004962:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4619      	mov	r1, r3
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f805 	bl	8004978 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800496e:	f000 f8d7 	bl	8004b20 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004972:	bf00      	nop
 8004974:	e7f0      	b.n	8004958 <prvTimerTask+0x8>
	...

08004978 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004982:	f7ff fa37 	bl	8003df4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004986:	f107 0308 	add.w	r3, r7, #8
 800498a:	4618      	mov	r0, r3
 800498c:	f000 f866 	bl	8004a5c <prvSampleTimeNow>
 8004990:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d130      	bne.n	80049fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <prvProcessTimerOrBlockTask+0x3c>
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d806      	bhi.n	80049b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80049a6:	f7ff fa33 	bl	8003e10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80049aa:	68f9      	ldr	r1, [r7, #12]
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff ff81 	bl	80048b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80049b2:	e024      	b.n	80049fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d008      	beq.n	80049cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80049ba:	4b13      	ldr	r3, [pc, #76]	@ (8004a08 <prvProcessTimerOrBlockTask+0x90>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <prvProcessTimerOrBlockTask+0x50>
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <prvProcessTimerOrBlockTask+0x52>
 80049c8:	2300      	movs	r3, #0
 80049ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80049cc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a0c <prvProcessTimerOrBlockTask+0x94>)
 80049ce:	6818      	ldr	r0, [r3, #0]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	4619      	mov	r1, r3
 80049da:	f7fe ff93 	bl	8003904 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80049de:	f7ff fa17 	bl	8003e10 <xTaskResumeAll>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10a      	bne.n	80049fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80049e8:	4b09      	ldr	r3, [pc, #36]	@ (8004a10 <prvProcessTimerOrBlockTask+0x98>)
 80049ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	f3bf 8f6f 	isb	sy
}
 80049f8:	e001      	b.n	80049fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80049fa:	f7ff fa09 	bl	8003e10 <xTaskResumeAll>
}
 80049fe:	bf00      	nop
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000cac 	.word	0x20000cac
 8004a0c:	20000cb0 	.word	0x20000cb0
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a58 <prvGetNextExpireTime+0x44>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <prvGetNextExpireTime+0x16>
 8004a26:	2201      	movs	r2, #1
 8004a28:	e000      	b.n	8004a2c <prvGetNextExpireTime+0x18>
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a38:	4b07      	ldr	r3, [pc, #28]	@ (8004a58 <prvGetNextExpireTime+0x44>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	60fb      	str	r3, [r7, #12]
 8004a42:	e001      	b.n	8004a48 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004a48:	68fb      	ldr	r3, [r7, #12]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3714      	adds	r7, #20
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000ca8 	.word	0x20000ca8

08004a5c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a64:	f7ff fa72 	bl	8003f4c <xTaskGetTickCount>
 8004a68:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a98 <prvSampleTimeNow+0x3c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d205      	bcs.n	8004a80 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a74:	f000 f93a 	bl	8004cec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e002      	b.n	8004a86 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a86:	4a04      	ldr	r2, [pc, #16]	@ (8004a98 <prvSampleTimeNow+0x3c>)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000cb8 	.word	0x20000cb8

08004a9c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d812      	bhi.n	8004ae8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	1ad2      	subs	r2, r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d302      	bcc.n	8004ad6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	e01b      	b.n	8004b0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004ad6:	4b10      	ldr	r3, [pc, #64]	@ (8004b18 <prvInsertTimerInActiveList+0x7c>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	3304      	adds	r3, #4
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f7fe f9aa 	bl	8002e3a <vListInsert>
 8004ae6:	e012      	b.n	8004b0e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d206      	bcs.n	8004afe <prvInsertTimerInActiveList+0x62>
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d302      	bcc.n	8004afe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004af8:	2301      	movs	r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	e007      	b.n	8004b0e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004afe:	4b07      	ldr	r3, [pc, #28]	@ (8004b1c <prvInsertTimerInActiveList+0x80>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	3304      	adds	r3, #4
 8004b06:	4619      	mov	r1, r3
 8004b08:	4610      	mov	r0, r2
 8004b0a:	f7fe f996 	bl	8002e3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004b0e:	697b      	ldr	r3, [r7, #20]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20000cac 	.word	0x20000cac
 8004b1c:	20000ca8 	.word	0x20000ca8

08004b20 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08e      	sub	sp, #56	@ 0x38
 8004b24:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b26:	e0ce      	b.n	8004cc6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	da19      	bge.n	8004b62 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004b2e:	1d3b      	adds	r3, r7, #4
 8004b30:	3304      	adds	r3, #4
 8004b32:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10b      	bne.n	8004b52 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	61fb      	str	r3, [r7, #28]
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	e7fd      	b.n	8004b4e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b58:	6850      	ldr	r0, [r2, #4]
 8004b5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b5c:	6892      	ldr	r2, [r2, #8]
 8004b5e:	4611      	mov	r1, r2
 8004b60:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f2c0 80ae 	blt.w	8004cc6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d004      	beq.n	8004b80 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fe f996 	bl	8002eac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b80:	463b      	mov	r3, r7
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff ff6a 	bl	8004a5c <prvSampleTimeNow>
 8004b88:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b09      	cmp	r3, #9
 8004b8e:	f200 8097 	bhi.w	8004cc0 <prvProcessReceivedCommands+0x1a0>
 8004b92:	a201      	add	r2, pc, #4	@ (adr r2, 8004b98 <prvProcessReceivedCommands+0x78>)
 8004b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b98:	08004bc1 	.word	0x08004bc1
 8004b9c:	08004bc1 	.word	0x08004bc1
 8004ba0:	08004bc1 	.word	0x08004bc1
 8004ba4:	08004c37 	.word	0x08004c37
 8004ba8:	08004c4b 	.word	0x08004c4b
 8004bac:	08004c97 	.word	0x08004c97
 8004bb0:	08004bc1 	.word	0x08004bc1
 8004bb4:	08004bc1 	.word	0x08004bc1
 8004bb8:	08004c37 	.word	0x08004c37
 8004bbc:	08004c4b 	.word	0x08004c4b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	18d1      	adds	r1, r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004be0:	f7ff ff5c 	bl	8004a9c <prvInsertTimerInActiveList>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d06c      	beq.n	8004cc4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bf0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bf8:	f003 0304 	and.w	r3, r3, #4
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d061      	beq.n	8004cc4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	441a      	add	r2, r3
 8004c08:	2300      	movs	r3, #0
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2100      	movs	r1, #0
 8004c10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c12:	f7ff fe01 	bl	8004818 <xTimerGenericCommand>
 8004c16:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d152      	bne.n	8004cc4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	61bb      	str	r3, [r7, #24]
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	e7fd      	b.n	8004c32 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c3c:	f023 0301 	bic.w	r3, r3, #1
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004c48:	e03d      	b.n	8004cc6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c50:	f043 0301 	orr.w	r3, r3, #1
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c60:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10b      	bne.n	8004c82 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	617b      	str	r3, [r7, #20]
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	e7fd      	b.n	8004c7e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	18d1      	adds	r1, r2, r3
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c90:	f7ff ff04 	bl	8004a9c <prvInsertTimerInActiveList>
					break;
 8004c94:	e017      	b.n	8004cc6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004ca4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ca6:	f000 fbe7 	bl	8005478 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004caa:	e00c      	b.n	8004cc6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cb2:	f023 0301 	bic.w	r3, r3, #1
 8004cb6:	b2da      	uxtb	r2, r3
 8004cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004cbe:	e002      	b.n	8004cc6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004cc0:	bf00      	nop
 8004cc2:	e000      	b.n	8004cc6 <prvProcessReceivedCommands+0x1a6>
					break;
 8004cc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cc6:	4b08      	ldr	r3, [pc, #32]	@ (8004ce8 <prvProcessReceivedCommands+0x1c8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	1d39      	adds	r1, r7, #4
 8004ccc:	2200      	movs	r2, #0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe fbfc 	bl	80034cc <xQueueReceive>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f47f af26 	bne.w	8004b28 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	3730      	adds	r7, #48	@ 0x30
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20000cb0 	.word	0x20000cb0

08004cec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b088      	sub	sp, #32
 8004cf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cf2:	e049      	b.n	8004d88 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8004db0 <prvSwitchTimerLists+0xc4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cfe:	4b2c      	ldr	r3, [pc, #176]	@ (8004db0 <prvSwitchTimerLists+0xc4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3304      	adds	r3, #4
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fe f8cd 	bl	8002eac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d02f      	beq.n	8004d88 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	693a      	ldr	r2, [r7, #16]
 8004d2e:	4413      	add	r3, r2
 8004d30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d90e      	bls.n	8004d58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d46:	4b1a      	ldr	r3, [pc, #104]	@ (8004db0 <prvSwitchTimerLists+0xc4>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4610      	mov	r0, r2
 8004d52:	f7fe f872 	bl	8002e3a <vListInsert>
 8004d56:	e017      	b.n	8004d88 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d58:	2300      	movs	r3, #0
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	2100      	movs	r1, #0
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f7ff fd58 	bl	8004818 <xTimerGenericCommand>
 8004d68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10b      	bne.n	8004d88 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	603b      	str	r3, [r7, #0]
}
 8004d82:	bf00      	nop
 8004d84:	bf00      	nop
 8004d86:	e7fd      	b.n	8004d84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d88:	4b09      	ldr	r3, [pc, #36]	@ (8004db0 <prvSwitchTimerLists+0xc4>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1b0      	bne.n	8004cf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d92:	4b07      	ldr	r3, [pc, #28]	@ (8004db0 <prvSwitchTimerLists+0xc4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d98:	4b06      	ldr	r3, [pc, #24]	@ (8004db4 <prvSwitchTimerLists+0xc8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a04      	ldr	r2, [pc, #16]	@ (8004db0 <prvSwitchTimerLists+0xc4>)
 8004d9e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004da0:	4a04      	ldr	r2, [pc, #16]	@ (8004db4 <prvSwitchTimerLists+0xc8>)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	6013      	str	r3, [r2, #0]
}
 8004da6:	bf00      	nop
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	20000ca8 	.word	0x20000ca8
 8004db4:	20000cac 	.word	0x20000cac

08004db8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004dbe:	f000 f96b 	bl	8005098 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004dc2:	4b15      	ldr	r3, [pc, #84]	@ (8004e18 <prvCheckForValidListAndQueue+0x60>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d120      	bne.n	8004e0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004dca:	4814      	ldr	r0, [pc, #80]	@ (8004e1c <prvCheckForValidListAndQueue+0x64>)
 8004dcc:	f7fd ffe4 	bl	8002d98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004dd0:	4813      	ldr	r0, [pc, #76]	@ (8004e20 <prvCheckForValidListAndQueue+0x68>)
 8004dd2:	f7fd ffe1 	bl	8002d98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004dd6:	4b13      	ldr	r3, [pc, #76]	@ (8004e24 <prvCheckForValidListAndQueue+0x6c>)
 8004dd8:	4a10      	ldr	r2, [pc, #64]	@ (8004e1c <prvCheckForValidListAndQueue+0x64>)
 8004dda:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ddc:	4b12      	ldr	r3, [pc, #72]	@ (8004e28 <prvCheckForValidListAndQueue+0x70>)
 8004dde:	4a10      	ldr	r2, [pc, #64]	@ (8004e20 <prvCheckForValidListAndQueue+0x68>)
 8004de0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004de2:	2300      	movs	r3, #0
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	4b11      	ldr	r3, [pc, #68]	@ (8004e2c <prvCheckForValidListAndQueue+0x74>)
 8004de8:	4a11      	ldr	r2, [pc, #68]	@ (8004e30 <prvCheckForValidListAndQueue+0x78>)
 8004dea:	2110      	movs	r1, #16
 8004dec:	200a      	movs	r0, #10
 8004dee:	f7fe f8f1 	bl	8002fd4 <xQueueGenericCreateStatic>
 8004df2:	4603      	mov	r3, r0
 8004df4:	4a08      	ldr	r2, [pc, #32]	@ (8004e18 <prvCheckForValidListAndQueue+0x60>)
 8004df6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004df8:	4b07      	ldr	r3, [pc, #28]	@ (8004e18 <prvCheckForValidListAndQueue+0x60>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e00:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <prvCheckForValidListAndQueue+0x60>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	490b      	ldr	r1, [pc, #44]	@ (8004e34 <prvCheckForValidListAndQueue+0x7c>)
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fe fd52 	bl	80038b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e0c:	f000 f976 	bl	80050fc <vPortExitCritical>
}
 8004e10:	bf00      	nop
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000cb0 	.word	0x20000cb0
 8004e1c:	20000c80 	.word	0x20000c80
 8004e20:	20000c94 	.word	0x20000c94
 8004e24:	20000ca8 	.word	0x20000ca8
 8004e28:	20000cac 	.word	0x20000cac
 8004e2c:	20000d5c 	.word	0x20000d5c
 8004e30:	20000cbc 	.word	0x20000cbc
 8004e34:	08005798 	.word	0x08005798

08004e38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	3b04      	subs	r3, #4
 8004e48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3b04      	subs	r3, #4
 8004e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f023 0201 	bic.w	r2, r3, #1
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	3b04      	subs	r3, #4
 8004e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e68:	4a0c      	ldr	r2, [pc, #48]	@ (8004e9c <pxPortInitialiseStack+0x64>)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3b14      	subs	r3, #20
 8004e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3b04      	subs	r3, #4
 8004e7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f06f 0202 	mvn.w	r2, #2
 8004e86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	3b20      	subs	r3, #32
 8004e8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	08004ea1 	.word	0x08004ea1

08004ea0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004eaa:	4b13      	ldr	r3, [pc, #76]	@ (8004ef8 <prvTaskExitError+0x58>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb2:	d00b      	beq.n	8004ecc <prvTaskExitError+0x2c>
	__asm volatile
 8004eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	60fb      	str	r3, [r7, #12]
}
 8004ec6:	bf00      	nop
 8004ec8:	bf00      	nop
 8004eca:	e7fd      	b.n	8004ec8 <prvTaskExitError+0x28>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	60bb      	str	r3, [r7, #8]
}
 8004ede:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004ee0:	bf00      	nop
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d0fc      	beq.n	8004ee2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ee8:	bf00      	nop
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	2000000c 	.word	0x2000000c
 8004efc:	00000000 	.word	0x00000000

08004f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f00:	4b07      	ldr	r3, [pc, #28]	@ (8004f20 <pxCurrentTCBConst2>)
 8004f02:	6819      	ldr	r1, [r3, #0]
 8004f04:	6808      	ldr	r0, [r1, #0]
 8004f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0a:	f380 8809 	msr	PSP, r0
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f04f 0000 	mov.w	r0, #0
 8004f16:	f380 8811 	msr	BASEPRI, r0
 8004f1a:	4770      	bx	lr
 8004f1c:	f3af 8000 	nop.w

08004f20 <pxCurrentTCBConst2>:
 8004f20:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f24:	bf00      	nop
 8004f26:	bf00      	nop

08004f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004f28:	4808      	ldr	r0, [pc, #32]	@ (8004f4c <prvPortStartFirstTask+0x24>)
 8004f2a:	6800      	ldr	r0, [r0, #0]
 8004f2c:	6800      	ldr	r0, [r0, #0]
 8004f2e:	f380 8808 	msr	MSP, r0
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f380 8814 	msr	CONTROL, r0
 8004f3a:	b662      	cpsie	i
 8004f3c:	b661      	cpsie	f
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	df00      	svc	0
 8004f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f4a:	bf00      	nop
 8004f4c:	e000ed08 	.word	0xe000ed08

08004f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b086      	sub	sp, #24
 8004f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004f56:	4b47      	ldr	r3, [pc, #284]	@ (8005074 <xPortStartScheduler+0x124>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a47      	ldr	r2, [pc, #284]	@ (8005078 <xPortStartScheduler+0x128>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d10b      	bne.n	8004f78 <xPortStartScheduler+0x28>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	613b      	str	r3, [r7, #16]
}
 8004f72:	bf00      	nop
 8004f74:	bf00      	nop
 8004f76:	e7fd      	b.n	8004f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f78:	4b3e      	ldr	r3, [pc, #248]	@ (8005074 <xPortStartScheduler+0x124>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a3f      	ldr	r2, [pc, #252]	@ (800507c <xPortStartScheduler+0x12c>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d10b      	bne.n	8004f9a <xPortStartScheduler+0x4a>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	60fb      	str	r3, [r7, #12]
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	e7fd      	b.n	8004f96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f9a:	4b39      	ldr	r3, [pc, #228]	@ (8005080 <xPortStartScheduler+0x130>)
 8004f9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	22ff      	movs	r2, #255	@ 0xff
 8004faa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	4b31      	ldr	r3, [pc, #196]	@ (8005084 <xPortStartScheduler+0x134>)
 8004fc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004fc2:	4b31      	ldr	r3, [pc, #196]	@ (8005088 <xPortStartScheduler+0x138>)
 8004fc4:	2207      	movs	r2, #7
 8004fc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fc8:	e009      	b.n	8004fde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004fca:	4b2f      	ldr	r3, [pc, #188]	@ (8005088 <xPortStartScheduler+0x138>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8005088 <xPortStartScheduler+0x138>)
 8004fd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fd4:	78fb      	ldrb	r3, [r7, #3]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fde:	78fb      	ldrb	r3, [r7, #3]
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fe6:	2b80      	cmp	r3, #128	@ 0x80
 8004fe8:	d0ef      	beq.n	8004fca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fea:	4b27      	ldr	r3, [pc, #156]	@ (8005088 <xPortStartScheduler+0x138>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f1c3 0307 	rsb	r3, r3, #7
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d00b      	beq.n	800500e <xPortStartScheduler+0xbe>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	60bb      	str	r3, [r7, #8]
}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	e7fd      	b.n	800500a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800500e:	4b1e      	ldr	r3, [pc, #120]	@ (8005088 <xPortStartScheduler+0x138>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	021b      	lsls	r3, r3, #8
 8005014:	4a1c      	ldr	r2, [pc, #112]	@ (8005088 <xPortStartScheduler+0x138>)
 8005016:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005018:	4b1b      	ldr	r3, [pc, #108]	@ (8005088 <xPortStartScheduler+0x138>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005020:	4a19      	ldr	r2, [pc, #100]	@ (8005088 <xPortStartScheduler+0x138>)
 8005022:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	b2da      	uxtb	r2, r3
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800502c:	4b17      	ldr	r3, [pc, #92]	@ (800508c <xPortStartScheduler+0x13c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a16      	ldr	r2, [pc, #88]	@ (800508c <xPortStartScheduler+0x13c>)
 8005032:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005036:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005038:	4b14      	ldr	r3, [pc, #80]	@ (800508c <xPortStartScheduler+0x13c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a13      	ldr	r2, [pc, #76]	@ (800508c <xPortStartScheduler+0x13c>)
 800503e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005042:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005044:	f000 f8da 	bl	80051fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005048:	4b11      	ldr	r3, [pc, #68]	@ (8005090 <xPortStartScheduler+0x140>)
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800504e:	f000 f8f9 	bl	8005244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005052:	4b10      	ldr	r3, [pc, #64]	@ (8005094 <xPortStartScheduler+0x144>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a0f      	ldr	r2, [pc, #60]	@ (8005094 <xPortStartScheduler+0x144>)
 8005058:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800505c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800505e:	f7ff ff63 	bl	8004f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005062:	f7ff f83d 	bl	80040e0 <vTaskSwitchContext>
	prvTaskExitError();
 8005066:	f7ff ff1b 	bl	8004ea0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	e000ed00 	.word	0xe000ed00
 8005078:	410fc271 	.word	0x410fc271
 800507c:	410fc270 	.word	0x410fc270
 8005080:	e000e400 	.word	0xe000e400
 8005084:	20000dac 	.word	0x20000dac
 8005088:	20000db0 	.word	0x20000db0
 800508c:	e000ed20 	.word	0xe000ed20
 8005090:	2000000c 	.word	0x2000000c
 8005094:	e000ef34 	.word	0xe000ef34

08005098 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	607b      	str	r3, [r7, #4]
}
 80050b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80050b2:	4b10      	ldr	r3, [pc, #64]	@ (80050f4 <vPortEnterCritical+0x5c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3301      	adds	r3, #1
 80050b8:	4a0e      	ldr	r2, [pc, #56]	@ (80050f4 <vPortEnterCritical+0x5c>)
 80050ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80050bc:	4b0d      	ldr	r3, [pc, #52]	@ (80050f4 <vPortEnterCritical+0x5c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d110      	bne.n	80050e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80050c4:	4b0c      	ldr	r3, [pc, #48]	@ (80050f8 <vPortEnterCritical+0x60>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	603b      	str	r3, [r7, #0]
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	e7fd      	b.n	80050e2 <vPortEnterCritical+0x4a>
	}
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	2000000c 	.word	0x2000000c
 80050f8:	e000ed04 	.word	0xe000ed04

080050fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005102:	4b12      	ldr	r3, [pc, #72]	@ (800514c <vPortExitCritical+0x50>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10b      	bne.n	8005122 <vPortExitCritical+0x26>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	607b      	str	r3, [r7, #4]
}
 800511c:	bf00      	nop
 800511e:	bf00      	nop
 8005120:	e7fd      	b.n	800511e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005122:	4b0a      	ldr	r3, [pc, #40]	@ (800514c <vPortExitCritical+0x50>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	3b01      	subs	r3, #1
 8005128:	4a08      	ldr	r2, [pc, #32]	@ (800514c <vPortExitCritical+0x50>)
 800512a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800512c:	4b07      	ldr	r3, [pc, #28]	@ (800514c <vPortExitCritical+0x50>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d105      	bne.n	8005140 <vPortExitCritical+0x44>
 8005134:	2300      	movs	r3, #0
 8005136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	f383 8811 	msr	BASEPRI, r3
}
 800513e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	2000000c 	.word	0x2000000c

08005150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005150:	f3ef 8009 	mrs	r0, PSP
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	4b15      	ldr	r3, [pc, #84]	@ (80051b0 <pxCurrentTCBConst>)
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	f01e 0f10 	tst.w	lr, #16
 8005160:	bf08      	it	eq
 8005162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516a:	6010      	str	r0, [r2, #0]
 800516c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005170:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005174:	f380 8811 	msr	BASEPRI, r0
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f7fe ffae 	bl	80040e0 <vTaskSwitchContext>
 8005184:	f04f 0000 	mov.w	r0, #0
 8005188:	f380 8811 	msr	BASEPRI, r0
 800518c:	bc09      	pop	{r0, r3}
 800518e:	6819      	ldr	r1, [r3, #0]
 8005190:	6808      	ldr	r0, [r1, #0]
 8005192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005196:	f01e 0f10 	tst.w	lr, #16
 800519a:	bf08      	it	eq
 800519c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80051a0:	f380 8809 	msr	PSP, r0
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	f3af 8000 	nop.w

080051b0 <pxCurrentTCBConst>:
 80051b0:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop

080051b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	607b      	str	r3, [r7, #4]
}
 80051d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80051d2:	f7fe fecb 	bl	8003f6c <xTaskIncrementTick>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80051dc:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <xPortSysTickHandler+0x40>)
 80051de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	2300      	movs	r3, #0
 80051e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	f383 8811 	msr	BASEPRI, r3
}
 80051ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80051f0:	bf00      	nop
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	e000ed04 	.word	0xe000ed04

080051fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005200:	4b0b      	ldr	r3, [pc, #44]	@ (8005230 <vPortSetupTimerInterrupt+0x34>)
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005206:	4b0b      	ldr	r3, [pc, #44]	@ (8005234 <vPortSetupTimerInterrupt+0x38>)
 8005208:	2200      	movs	r2, #0
 800520a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800520c:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <vPortSetupTimerInterrupt+0x3c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a0a      	ldr	r2, [pc, #40]	@ (800523c <vPortSetupTimerInterrupt+0x40>)
 8005212:	fba2 2303 	umull	r2, r3, r2, r3
 8005216:	099b      	lsrs	r3, r3, #6
 8005218:	4a09      	ldr	r2, [pc, #36]	@ (8005240 <vPortSetupTimerInterrupt+0x44>)
 800521a:	3b01      	subs	r3, #1
 800521c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800521e:	4b04      	ldr	r3, [pc, #16]	@ (8005230 <vPortSetupTimerInterrupt+0x34>)
 8005220:	2207      	movs	r2, #7
 8005222:	601a      	str	r2, [r3, #0]
}
 8005224:	bf00      	nop
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	e000e010 	.word	0xe000e010
 8005234:	e000e018 	.word	0xe000e018
 8005238:	20000000 	.word	0x20000000
 800523c:	10624dd3 	.word	0x10624dd3
 8005240:	e000e014 	.word	0xe000e014

08005244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005244:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005254 <vPortEnableVFP+0x10>
 8005248:	6801      	ldr	r1, [r0, #0]
 800524a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800524e:	6001      	str	r1, [r0, #0]
 8005250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005252:	bf00      	nop
 8005254:	e000ed88 	.word	0xe000ed88

08005258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005258:	b480      	push	{r7}
 800525a:	b085      	sub	sp, #20
 800525c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800525e:	f3ef 8305 	mrs	r3, IPSR
 8005262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2b0f      	cmp	r3, #15
 8005268:	d915      	bls.n	8005296 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800526a:	4a18      	ldr	r2, [pc, #96]	@ (80052cc <vPortValidateInterruptPriority+0x74>)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4413      	add	r3, r2
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005274:	4b16      	ldr	r3, [pc, #88]	@ (80052d0 <vPortValidateInterruptPriority+0x78>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	7afa      	ldrb	r2, [r7, #11]
 800527a:	429a      	cmp	r2, r3
 800527c:	d20b      	bcs.n	8005296 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	607b      	str	r3, [r7, #4]
}
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	e7fd      	b.n	8005292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005296:	4b0f      	ldr	r3, [pc, #60]	@ (80052d4 <vPortValidateInterruptPriority+0x7c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800529e:	4b0e      	ldr	r3, [pc, #56]	@ (80052d8 <vPortValidateInterruptPriority+0x80>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d90b      	bls.n	80052be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	603b      	str	r3, [r7, #0]
}
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	e7fd      	b.n	80052ba <vPortValidateInterruptPriority+0x62>
	}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
 80052ca:	bf00      	nop
 80052cc:	e000e3f0 	.word	0xe000e3f0
 80052d0:	20000dac 	.word	0x20000dac
 80052d4:	e000ed0c 	.word	0xe000ed0c
 80052d8:	20000db0 	.word	0x20000db0

080052dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08a      	sub	sp, #40	@ 0x28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052e4:	2300      	movs	r3, #0
 80052e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052e8:	f7fe fd84 	bl	8003df4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80052ec:	4b5c      	ldr	r3, [pc, #368]	@ (8005460 <pvPortMalloc+0x184>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80052f4:	f000 f924 	bl	8005540 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80052f8:	4b5a      	ldr	r3, [pc, #360]	@ (8005464 <pvPortMalloc+0x188>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4013      	ands	r3, r2
 8005300:	2b00      	cmp	r3, #0
 8005302:	f040 8095 	bne.w	8005430 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01e      	beq.n	800534a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800530c:	2208      	movs	r2, #8
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4413      	add	r3, r2
 8005312:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	2b00      	cmp	r3, #0
 800531c:	d015      	beq.n	800534a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f023 0307 	bic.w	r3, r3, #7
 8005324:	3308      	adds	r3, #8
 8005326:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <pvPortMalloc+0x6e>
	__asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	617b      	str	r3, [r7, #20]
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop
 8005348:	e7fd      	b.n	8005346 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d06f      	beq.n	8005430 <pvPortMalloc+0x154>
 8005350:	4b45      	ldr	r3, [pc, #276]	@ (8005468 <pvPortMalloc+0x18c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d86a      	bhi.n	8005430 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800535a:	4b44      	ldr	r3, [pc, #272]	@ (800546c <pvPortMalloc+0x190>)
 800535c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800535e:	4b43      	ldr	r3, [pc, #268]	@ (800546c <pvPortMalloc+0x190>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005364:	e004      	b.n	8005370 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	429a      	cmp	r2, r3
 8005378:	d903      	bls.n	8005382 <pvPortMalloc+0xa6>
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f1      	bne.n	8005366 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005382:	4b37      	ldr	r3, [pc, #220]	@ (8005460 <pvPortMalloc+0x184>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005388:	429a      	cmp	r2, r3
 800538a:	d051      	beq.n	8005430 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2208      	movs	r2, #8
 8005392:	4413      	add	r3, r2
 8005394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800539e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	1ad2      	subs	r2, r2, r3
 80053a6:	2308      	movs	r3, #8
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d920      	bls.n	80053f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4413      	add	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00b      	beq.n	80053d8 <pvPortMalloc+0xfc>
	__asm volatile
 80053c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c4:	f383 8811 	msr	BASEPRI, r3
 80053c8:	f3bf 8f6f 	isb	sy
 80053cc:	f3bf 8f4f 	dsb	sy
 80053d0:	613b      	str	r3, [r7, #16]
}
 80053d2:	bf00      	nop
 80053d4:	bf00      	nop
 80053d6:	e7fd      	b.n	80053d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053da:	685a      	ldr	r2, [r3, #4]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	1ad2      	subs	r2, r2, r3
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053ea:	69b8      	ldr	r0, [r7, #24]
 80053ec:	f000 f90a 	bl	8005604 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005468 <pvPortMalloc+0x18c>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005468 <pvPortMalloc+0x18c>)
 80053fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005468 <pvPortMalloc+0x18c>)
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	4b1b      	ldr	r3, [pc, #108]	@ (8005470 <pvPortMalloc+0x194>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d203      	bcs.n	8005412 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800540a:	4b17      	ldr	r3, [pc, #92]	@ (8005468 <pvPortMalloc+0x18c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a18      	ldr	r2, [pc, #96]	@ (8005470 <pvPortMalloc+0x194>)
 8005410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	4b13      	ldr	r3, [pc, #76]	@ (8005464 <pvPortMalloc+0x188>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	431a      	orrs	r2, r3
 800541c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800541e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005426:	4b13      	ldr	r3, [pc, #76]	@ (8005474 <pvPortMalloc+0x198>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3301      	adds	r3, #1
 800542c:	4a11      	ldr	r2, [pc, #68]	@ (8005474 <pvPortMalloc+0x198>)
 800542e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005430:	f7fe fcee 	bl	8003e10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00b      	beq.n	8005456 <pvPortMalloc+0x17a>
	__asm volatile
 800543e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005442:	f383 8811 	msr	BASEPRI, r3
 8005446:	f3bf 8f6f 	isb	sy
 800544a:	f3bf 8f4f 	dsb	sy
 800544e:	60fb      	str	r3, [r7, #12]
}
 8005450:	bf00      	nop
 8005452:	bf00      	nop
 8005454:	e7fd      	b.n	8005452 <pvPortMalloc+0x176>
	return pvReturn;
 8005456:	69fb      	ldr	r3, [r7, #28]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3728      	adds	r7, #40	@ 0x28
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	200049bc 	.word	0x200049bc
 8005464:	200049d0 	.word	0x200049d0
 8005468:	200049c0 	.word	0x200049c0
 800546c:	200049b4 	.word	0x200049b4
 8005470:	200049c4 	.word	0x200049c4
 8005474:	200049c8 	.word	0x200049c8

08005478 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d04f      	beq.n	800552a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800548a:	2308      	movs	r3, #8
 800548c:	425b      	negs	r3, r3
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4413      	add	r3, r2
 8005492:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	4b25      	ldr	r3, [pc, #148]	@ (8005534 <vPortFree+0xbc>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4013      	ands	r3, r2
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10b      	bne.n	80054be <vPortFree+0x46>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	60fb      	str	r3, [r7, #12]
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	e7fd      	b.n	80054ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00b      	beq.n	80054de <vPortFree+0x66>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	60bb      	str	r3, [r7, #8]
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop
 80054dc:	e7fd      	b.n	80054da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <vPortFree+0xbc>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d01e      	beq.n	800552a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d11a      	bne.n	800552a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005534 <vPortFree+0xbc>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	43db      	mvns	r3, r3
 80054fe:	401a      	ands	r2, r3
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005504:	f7fe fc76 	bl	8003df4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	4b0a      	ldr	r3, [pc, #40]	@ (8005538 <vPortFree+0xc0>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4413      	add	r3, r2
 8005512:	4a09      	ldr	r2, [pc, #36]	@ (8005538 <vPortFree+0xc0>)
 8005514:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005516:	6938      	ldr	r0, [r7, #16]
 8005518:	f000 f874 	bl	8005604 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800551c:	4b07      	ldr	r3, [pc, #28]	@ (800553c <vPortFree+0xc4>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	3301      	adds	r3, #1
 8005522:	4a06      	ldr	r2, [pc, #24]	@ (800553c <vPortFree+0xc4>)
 8005524:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005526:	f7fe fc73 	bl	8003e10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800552a:	bf00      	nop
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	200049d0 	.word	0x200049d0
 8005538:	200049c0 	.word	0x200049c0
 800553c:	200049cc 	.word	0x200049cc

08005540 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005546:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800554a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800554c:	4b27      	ldr	r3, [pc, #156]	@ (80055ec <prvHeapInit+0xac>)
 800554e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00c      	beq.n	8005574 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3307      	adds	r3, #7
 800555e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0307 	bic.w	r3, r3, #7
 8005566:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005568:	68ba      	ldr	r2, [r7, #8]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	4a1f      	ldr	r2, [pc, #124]	@ (80055ec <prvHeapInit+0xac>)
 8005570:	4413      	add	r3, r2
 8005572:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005578:	4a1d      	ldr	r2, [pc, #116]	@ (80055f0 <prvHeapInit+0xb0>)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800557e:	4b1c      	ldr	r3, [pc, #112]	@ (80055f0 <prvHeapInit+0xb0>)
 8005580:	2200      	movs	r2, #0
 8005582:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	4413      	add	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800558c:	2208      	movs	r2, #8
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	1a9b      	subs	r3, r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0307 	bic.w	r3, r3, #7
 800559a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4a15      	ldr	r2, [pc, #84]	@ (80055f4 <prvHeapInit+0xb4>)
 80055a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055a2:	4b14      	ldr	r3, [pc, #80]	@ (80055f4 <prvHeapInit+0xb4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2200      	movs	r2, #0
 80055a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055aa:	4b12      	ldr	r3, [pc, #72]	@ (80055f4 <prvHeapInit+0xb4>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2200      	movs	r2, #0
 80055b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	1ad2      	subs	r2, r2, r3
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055c0:	4b0c      	ldr	r3, [pc, #48]	@ (80055f4 <prvHeapInit+0xb4>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4a0a      	ldr	r2, [pc, #40]	@ (80055f8 <prvHeapInit+0xb8>)
 80055ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	4a09      	ldr	r2, [pc, #36]	@ (80055fc <prvHeapInit+0xbc>)
 80055d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055d8:	4b09      	ldr	r3, [pc, #36]	@ (8005600 <prvHeapInit+0xc0>)
 80055da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80055de:	601a      	str	r2, [r3, #0]
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	20000db4 	.word	0x20000db4
 80055f0:	200049b4 	.word	0x200049b4
 80055f4:	200049bc 	.word	0x200049bc
 80055f8:	200049c4 	.word	0x200049c4
 80055fc:	200049c0 	.word	0x200049c0
 8005600:	200049d0 	.word	0x200049d0

08005604 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800560c:	4b28      	ldr	r3, [pc, #160]	@ (80056b0 <prvInsertBlockIntoFreeList+0xac>)
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	e002      	b.n	8005618 <prvInsertBlockIntoFreeList+0x14>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	429a      	cmp	r2, r3
 8005620:	d8f7      	bhi.n	8005612 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	4413      	add	r3, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	429a      	cmp	r2, r3
 8005632:	d108      	bne.n	8005646 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	441a      	add	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	441a      	add	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d118      	bne.n	800568c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4b15      	ldr	r3, [pc, #84]	@ (80056b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d00d      	beq.n	8005682 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	441a      	add	r2, r3
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	601a      	str	r2, [r3, #0]
 8005680:	e008      	b.n	8005694 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005682:	4b0c      	ldr	r3, [pc, #48]	@ (80056b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	601a      	str	r2, [r3, #0]
 800568a:	e003      	b.n	8005694 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	d002      	beq.n	80056a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056a2:	bf00      	nop
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	200049b4 	.word	0x200049b4
 80056b4:	200049bc 	.word	0x200049bc

080056b8 <memset>:
 80056b8:	4402      	add	r2, r0
 80056ba:	4603      	mov	r3, r0
 80056bc:	4293      	cmp	r3, r2
 80056be:	d100      	bne.n	80056c2 <memset+0xa>
 80056c0:	4770      	bx	lr
 80056c2:	f803 1b01 	strb.w	r1, [r3], #1
 80056c6:	e7f9      	b.n	80056bc <memset+0x4>

080056c8 <__libc_init_array>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005700 <__libc_init_array+0x38>)
 80056cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005704 <__libc_init_array+0x3c>)
 80056ce:	1b64      	subs	r4, r4, r5
 80056d0:	10a4      	asrs	r4, r4, #2
 80056d2:	2600      	movs	r6, #0
 80056d4:	42a6      	cmp	r6, r4
 80056d6:	d109      	bne.n	80056ec <__libc_init_array+0x24>
 80056d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005708 <__libc_init_array+0x40>)
 80056da:	4c0c      	ldr	r4, [pc, #48]	@ (800570c <__libc_init_array+0x44>)
 80056dc:	f000 f826 	bl	800572c <_init>
 80056e0:	1b64      	subs	r4, r4, r5
 80056e2:	10a4      	asrs	r4, r4, #2
 80056e4:	2600      	movs	r6, #0
 80056e6:	42a6      	cmp	r6, r4
 80056e8:	d105      	bne.n	80056f6 <__libc_init_array+0x2e>
 80056ea:	bd70      	pop	{r4, r5, r6, pc}
 80056ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f0:	4798      	blx	r3
 80056f2:	3601      	adds	r6, #1
 80056f4:	e7ee      	b.n	80056d4 <__libc_init_array+0xc>
 80056f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056fa:	4798      	blx	r3
 80056fc:	3601      	adds	r6, #1
 80056fe:	e7f2      	b.n	80056e6 <__libc_init_array+0x1e>
 8005700:	080057e4 	.word	0x080057e4
 8005704:	080057e4 	.word	0x080057e4
 8005708:	080057e4 	.word	0x080057e4
 800570c:	080057e8 	.word	0x080057e8

08005710 <memcpy>:
 8005710:	440a      	add	r2, r1
 8005712:	4291      	cmp	r1, r2
 8005714:	f100 33ff 	add.w	r3, r0, #4294967295
 8005718:	d100      	bne.n	800571c <memcpy+0xc>
 800571a:	4770      	bx	lr
 800571c:	b510      	push	{r4, lr}
 800571e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005726:	4291      	cmp	r1, r2
 8005728:	d1f9      	bne.n	800571e <memcpy+0xe>
 800572a:	bd10      	pop	{r4, pc}

0800572c <_init>:
 800572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572e:	bf00      	nop
 8005730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005732:	bc08      	pop	{r3}
 8005734:	469e      	mov	lr, r3
 8005736:	4770      	bx	lr

08005738 <_fini>:
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	bf00      	nop
 800573c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573e:	bc08      	pop	{r3}
 8005740:	469e      	mov	lr, r3
 8005742:	4770      	bx	lr

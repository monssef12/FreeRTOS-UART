
freertos_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005544  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080056e4  080056e4  000066e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800577c  0800577c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  0800577c  0800577c  0000677c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005784  08005784  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005784  08005784  00006784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005788  08005788  00006788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800578c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c4  20000010  0800579c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049d4  0800579c  000079d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c82  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ba5  00000000  00000000  00018cc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0001b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b66  00000000  00000000  0001c740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000341a  00000000  00000000  0001d2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ccd  00000000  00000000  000206c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f60a  00000000  00000000  0003138d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0997  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d50  00000000  00000000  000c09dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c472c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056cc 	.word	0x080056cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080056cc 	.word	0x080056cc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b96a 	b.w	80004dc <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	460c      	mov	r4, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14e      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022c:	4694      	mov	ip, r2
 800022e:	458c      	cmp	ip, r1
 8000230:	4686      	mov	lr, r0
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	d962      	bls.n	80002fe <__udivmoddi4+0xde>
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0320 	rsb	r3, r2, #32
 800023e:	4091      	lsls	r1, r2
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	fa0c fc02 	lsl.w	ip, ip, r2
 8000248:	4319      	orrs	r1, r3
 800024a:	fa00 fe02 	lsl.w	lr, r0, r2
 800024e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000252:	fa1f f68c 	uxth.w	r6, ip
 8000256:	fbb1 f4f7 	udiv	r4, r1, r7
 800025a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025e:	fb07 1114 	mls	r1, r7, r4, r1
 8000262:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000266:	fb04 f106 	mul.w	r1, r4, r6
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f104 30ff 	add.w	r0, r4, #4294967295
 8000276:	f080 8112 	bcs.w	800049e <__udivmoddi4+0x27e>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 810f 	bls.w	800049e <__udivmoddi4+0x27e>
 8000280:	3c02      	subs	r4, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a59      	subs	r1, r3, r1
 8000286:	fa1f f38e 	uxth.w	r3, lr
 800028a:	fbb1 f0f7 	udiv	r0, r1, r7
 800028e:	fb07 1110 	mls	r1, r7, r0, r1
 8000292:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000296:	fb00 f606 	mul.w	r6, r0, r6
 800029a:	429e      	cmp	r6, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x94>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a6:	f080 80fc 	bcs.w	80004a2 <__udivmoddi4+0x282>
 80002aa:	429e      	cmp	r6, r3
 80002ac:	f240 80f9 	bls.w	80004a2 <__udivmoddi4+0x282>
 80002b0:	4463      	add	r3, ip
 80002b2:	3802      	subs	r0, #2
 80002b4:	1b9b      	subs	r3, r3, r6
 80002b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ba:	2100      	movs	r1, #0
 80002bc:	b11d      	cbz	r5, 80002c6 <__udivmoddi4+0xa6>
 80002be:	40d3      	lsrs	r3, r2
 80002c0:	2200      	movs	r2, #0
 80002c2:	e9c5 3200 	strd	r3, r2, [r5]
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d905      	bls.n	80002da <__udivmoddi4+0xba>
 80002ce:	b10d      	cbz	r5, 80002d4 <__udivmoddi4+0xb4>
 80002d0:	e9c5 0100 	strd	r0, r1, [r5]
 80002d4:	2100      	movs	r1, #0
 80002d6:	4608      	mov	r0, r1
 80002d8:	e7f5      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d146      	bne.n	8000370 <__udivmoddi4+0x150>
 80002e2:	42a3      	cmp	r3, r4
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xcc>
 80002e6:	4290      	cmp	r0, r2
 80002e8:	f0c0 80f0 	bcc.w	80004cc <__udivmoddi4+0x2ac>
 80002ec:	1a86      	subs	r6, r0, r2
 80002ee:	eb64 0303 	sbc.w	r3, r4, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	2d00      	cmp	r5, #0
 80002f6:	d0e6      	beq.n	80002c6 <__udivmoddi4+0xa6>
 80002f8:	e9c5 6300 	strd	r6, r3, [r5]
 80002fc:	e7e3      	b.n	80002c6 <__udivmoddi4+0xa6>
 80002fe:	2a00      	cmp	r2, #0
 8000300:	f040 8090 	bne.w	8000424 <__udivmoddi4+0x204>
 8000304:	eba1 040c 	sub.w	r4, r1, ip
 8000308:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800030c:	fa1f f78c 	uxth.w	r7, ip
 8000310:	2101      	movs	r1, #1
 8000312:	fbb4 f6f8 	udiv	r6, r4, r8
 8000316:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031a:	fb08 4416 	mls	r4, r8, r6, r4
 800031e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000322:	fb07 f006 	mul.w	r0, r7, r6
 8000326:	4298      	cmp	r0, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x11c>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x11a>
 8000334:	4298      	cmp	r0, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2b4>
 800033a:	4626      	mov	r6, r4
 800033c:	1a1c      	subs	r4, r3, r0
 800033e:	fa1f f38e 	uxth.w	r3, lr
 8000342:	fbb4 f0f8 	udiv	r0, r4, r8
 8000346:	fb08 4410 	mls	r4, r8, r0, r4
 800034a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034e:	fb00 f707 	mul.w	r7, r0, r7
 8000352:	429f      	cmp	r7, r3
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x148>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f100 34ff 	add.w	r4, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x146>
 8000360:	429f      	cmp	r7, r3
 8000362:	f200 80b0 	bhi.w	80004c6 <__udivmoddi4+0x2a6>
 8000366:	4620      	mov	r0, r4
 8000368:	1bdb      	subs	r3, r3, r7
 800036a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0x9c>
 8000370:	f1c1 0620 	rsb	r6, r1, #32
 8000374:	408b      	lsls	r3, r1
 8000376:	fa22 f706 	lsr.w	r7, r2, r6
 800037a:	431f      	orrs	r7, r3
 800037c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000380:	fa04 f301 	lsl.w	r3, r4, r1
 8000384:	ea43 030c 	orr.w	r3, r3, ip
 8000388:	40f4      	lsrs	r4, r6
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	0c38      	lsrs	r0, r7, #16
 8000390:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000394:	fbb4 fef0 	udiv	lr, r4, r0
 8000398:	fa1f fc87 	uxth.w	ip, r7
 800039c:	fb00 441e 	mls	r4, r0, lr, r4
 80003a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a4:	fb0e f90c 	mul.w	r9, lr, ip
 80003a8:	45a1      	cmp	r9, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	d90a      	bls.n	80003c6 <__udivmoddi4+0x1a6>
 80003b0:	193c      	adds	r4, r7, r4
 80003b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b6:	f080 8084 	bcs.w	80004c2 <__udivmoddi4+0x2a2>
 80003ba:	45a1      	cmp	r9, r4
 80003bc:	f240 8081 	bls.w	80004c2 <__udivmoddi4+0x2a2>
 80003c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	eba4 0409 	sub.w	r4, r4, r9
 80003ca:	fa1f f983 	uxth.w	r9, r3
 80003ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d2:	fb00 4413 	mls	r4, r0, r3, r4
 80003d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003da:	fb03 fc0c 	mul.w	ip, r3, ip
 80003de:	45a4      	cmp	ip, r4
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x1d2>
 80003e2:	193c      	adds	r4, r7, r4
 80003e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e8:	d267      	bcs.n	80004ba <__udivmoddi4+0x29a>
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d965      	bls.n	80004ba <__udivmoddi4+0x29a>
 80003ee:	3b02      	subs	r3, #2
 80003f0:	443c      	add	r4, r7
 80003f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f6:	fba0 9302 	umull	r9, r3, r0, r2
 80003fa:	eba4 040c 	sub.w	r4, r4, ip
 80003fe:	429c      	cmp	r4, r3
 8000400:	46ce      	mov	lr, r9
 8000402:	469c      	mov	ip, r3
 8000404:	d351      	bcc.n	80004aa <__udivmoddi4+0x28a>
 8000406:	d04e      	beq.n	80004a6 <__udivmoddi4+0x286>
 8000408:	b155      	cbz	r5, 8000420 <__udivmoddi4+0x200>
 800040a:	ebb8 030e 	subs.w	r3, r8, lr
 800040e:	eb64 040c 	sbc.w	r4, r4, ip
 8000412:	fa04 f606 	lsl.w	r6, r4, r6
 8000416:	40cb      	lsrs	r3, r1
 8000418:	431e      	orrs	r6, r3
 800041a:	40cc      	lsrs	r4, r1
 800041c:	e9c5 6400 	strd	r6, r4, [r5]
 8000420:	2100      	movs	r1, #0
 8000422:	e750      	b.n	80002c6 <__udivmoddi4+0xa6>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f103 	lsr.w	r1, r0, r3
 800042c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000430:	fa24 f303 	lsr.w	r3, r4, r3
 8000434:	4094      	lsls	r4, r2
 8000436:	430c      	orrs	r4, r1
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000440:	fa1f f78c 	uxth.w	r7, ip
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3110 	mls	r1, r8, r0, r3
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000452:	fb00 f107 	mul.w	r1, r0, r7
 8000456:	4299      	cmp	r1, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x24c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000462:	d22c      	bcs.n	80004be <__udivmoddi4+0x29e>
 8000464:	4299      	cmp	r1, r3
 8000466:	d92a      	bls.n	80004be <__udivmoddi4+0x29e>
 8000468:	3802      	subs	r0, #2
 800046a:	4463      	add	r3, ip
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb3 f1f8 	udiv	r1, r3, r8
 8000474:	fb08 3311 	mls	r3, r8, r1, r3
 8000478:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800047c:	fb01 f307 	mul.w	r3, r1, r7
 8000480:	42a3      	cmp	r3, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x276>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f101 36ff 	add.w	r6, r1, #4294967295
 800048c:	d213      	bcs.n	80004b6 <__udivmoddi4+0x296>
 800048e:	42a3      	cmp	r3, r4
 8000490:	d911      	bls.n	80004b6 <__udivmoddi4+0x296>
 8000492:	3902      	subs	r1, #2
 8000494:	4464      	add	r4, ip
 8000496:	1ae4      	subs	r4, r4, r3
 8000498:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800049c:	e739      	b.n	8000312 <__udivmoddi4+0xf2>
 800049e:	4604      	mov	r4, r0
 80004a0:	e6f0      	b.n	8000284 <__udivmoddi4+0x64>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e706      	b.n	80002b4 <__udivmoddi4+0x94>
 80004a6:	45c8      	cmp	r8, r9
 80004a8:	d2ae      	bcs.n	8000408 <__udivmoddi4+0x1e8>
 80004aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7a8      	b.n	8000408 <__udivmoddi4+0x1e8>
 80004b6:	4631      	mov	r1, r6
 80004b8:	e7ed      	b.n	8000496 <__udivmoddi4+0x276>
 80004ba:	4603      	mov	r3, r0
 80004bc:	e799      	b.n	80003f2 <__udivmoddi4+0x1d2>
 80004be:	4630      	mov	r0, r6
 80004c0:	e7d4      	b.n	800046c <__udivmoddi4+0x24c>
 80004c2:	46d6      	mov	lr, sl
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1a6>
 80004c6:	4463      	add	r3, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e74d      	b.n	8000368 <__udivmoddi4+0x148>
 80004cc:	4606      	mov	r6, r0
 80004ce:	4623      	mov	r3, r4
 80004d0:	4608      	mov	r0, r1
 80004d2:	e70f      	b.n	80002f4 <__udivmoddi4+0xd4>
 80004d4:	3e02      	subs	r6, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	e730      	b.n	800033c <__udivmoddi4+0x11c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b5b0      	push	{r4, r5, r7, lr}
 80004e2:	b090      	sub	sp, #64	@ 0x40
 80004e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fa69 	bl	80009bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f871 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f8f9 	bl	80006e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f2:	f000 f8cd 	bl	8000690 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char hello[] = "UART Echo Ready.\r\n";
 80004f6:	4b2d      	ldr	r3, [pc, #180]	@ (80005ac <main+0xcc>)
 80004f8:	f107 0420 	add.w	r4, r7, #32
 80004fc:	461d      	mov	r5, r3
 80004fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000502:	682b      	ldr	r3, [r5, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	8022      	strh	r2, [r4, #0]
 8000508:	3402      	adds	r4, #2
 800050a:	0c1b      	lsrs	r3, r3, #16
 800050c:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart1, (uint8_t*)hello, strlen(hello), 100);
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff fe64 	bl	80001e0 <strlen>
 8000518:	4603      	mov	r3, r0
 800051a:	b29a      	uxth	r2, r3
 800051c:	f107 0120 	add.w	r1, r7, #32
 8000520:	2364      	movs	r3, #100	@ 0x64
 8000522:	4823      	ldr	r0, [pc, #140]	@ (80005b0 <main+0xd0>)
 8000524:	f001 fa8c 	bl	8001a40 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000528:	f002 fada 	bl	8002ae0 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  uartQueue = xQueueCreate(QueueLength, sizeof(uint8_t));  // Create queue
 800052c:	2200      	movs	r2, #0
 800052e:	2101      	movs	r1, #1
 8000530:	2040      	movs	r0, #64	@ 0x40
 8000532:	f002 fd9c 	bl	800306e <xQueueGenericCreate>
 8000536:	4603      	mov	r3, r0
 8000538:	4a1e      	ldr	r2, [pc, #120]	@ (80005b4 <main+0xd4>)
 800053a:	6013      	str	r3, [r2, #0]
  char test_str[] = "hello send is working !\r\n";
 800053c:	4b1e      	ldr	r3, [pc, #120]	@ (80005b8 <main+0xd8>)
 800053e:	1d3c      	adds	r4, r7, #4
 8000540:	461d      	mov	r5, r3
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054a:	c403      	stmia	r4!, {r0, r1}
 800054c:	8022      	strh	r2, [r4, #0]
  for (uint32_t i = 0; i < strlen(test_str); i++) {
 800054e:	2300      	movs	r3, #0
 8000550:	637b      	str	r3, [r7, #52]	@ 0x34
 8000552:	e00b      	b.n	800056c <main+0x8c>
      xQueueSend(uartQueue, &test_str[i], 0);  // Fill queue
 8000554:	4b17      	ldr	r3, [pc, #92]	@ (80005b4 <main+0xd4>)
 8000556:	6818      	ldr	r0, [r3, #0]
 8000558:	1d3a      	adds	r2, r7, #4
 800055a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800055c:	18d1      	adds	r1, r2, r3
 800055e:	2300      	movs	r3, #0
 8000560:	2200      	movs	r2, #0
 8000562:	f002 fde3 	bl	800312c <xQueueGenericSend>
  for (uint32_t i = 0; i < strlen(test_str); i++) {
 8000566:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000568:	3301      	adds	r3, #1
 800056a:	637b      	str	r3, [r7, #52]	@ 0x34
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff fe36 	bl	80001e0 <strlen>
 8000574:	4602      	mov	r2, r0
 8000576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000578:	4293      	cmp	r3, r2
 800057a:	d3eb      	bcc.n	8000554 <main+0x74>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800057c:	4a0f      	ldr	r2, [pc, #60]	@ (80005bc <main+0xdc>)
 800057e:	2100      	movs	r1, #0
 8000580:	480f      	ldr	r0, [pc, #60]	@ (80005c0 <main+0xe0>)
 8000582:	f002 faf7 	bl	8002b74 <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a0e      	ldr	r2, [pc, #56]	@ (80005c4 <main+0xe4>)
 800058a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(StartUartSend, "UART_TX", 256, NULL, 2, NULL);
 800058c:	2300      	movs	r3, #0
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	2302      	movs	r3, #2
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800059a:	490b      	ldr	r1, [pc, #44]	@ (80005c8 <main+0xe8>)
 800059c:	480b      	ldr	r0, [pc, #44]	@ (80005cc <main+0xec>)
 800059e:	f003 fa15 	bl	80039cc <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a2:	f002 fac1 	bl	8002b28 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a6:	bf00      	nop
 80005a8:	e7fd      	b.n	80005a6 <main+0xc6>
 80005aa:	bf00      	nop
 80005ac:	080056f8 	.word	0x080056f8
 80005b0:	2000002c 	.word	0x2000002c
 80005b4:	20000078 	.word	0x20000078
 80005b8:	0800570c 	.word	0x0800570c
 80005bc:	08005740 	.word	0x08005740
 80005c0:	080007b9 	.word	0x080007b9
 80005c4:	20000074 	.word	0x20000074
 80005c8:	080056f0 	.word	0x080056f0
 80005cc:	08000719 	.word	0x08000719

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	@ 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0320 	add.w	r3, r7, #32
 80005da:	2230      	movs	r2, #48	@ 0x30
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f005 f83a 	bl	8005658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
 80005f8:	4b23      	ldr	r3, [pc, #140]	@ (8000688 <SystemClock_Config+0xb8>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005fc:	4a22      	ldr	r2, [pc, #136]	@ (8000688 <SystemClock_Config+0xb8>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	@ 0x40
 8000604:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <SystemClock_Config+0xb8>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	4b1d      	ldr	r3, [pc, #116]	@ (800068c <SystemClock_Config+0xbc>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800061c:	4a1b      	ldr	r2, [pc, #108]	@ (800068c <SystemClock_Config+0xbc>)
 800061e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b19      	ldr	r3, [pc, #100]	@ (800068c <SystemClock_Config+0xbc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063c:	2300      	movs	r3, #0
 800063e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fd53 	bl	80010f0 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000650:	f000 f8c4 	bl	80007dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f000 ffb6 	bl	80015e0 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800067a:	f000 f8af 	bl	80007dc <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	@ 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <MX_USART1_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_USART1_UART_Init+0x4c>)
 80006c8:	f001 f96a 	bl	80019a0 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 f883 	bl	80007dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000002c 	.word	0x2000002c
 80006e0:	40011000 	.word	0x40011000

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <MX_GPIO_Init+0x30>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a08      	ldr	r2, [pc, #32]	@ (8000714 <MX_GPIO_Init+0x30>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <MX_GPIO_Init+0x30>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <StartUartSend>:

/* USER CODE BEGIN 4 */

void StartUartSend(void* args){
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    uint8_t tx_char;
    for(;;)
    {
        // Wait for character from queue
        if (xQueueReceive(uartQueue, &tx_char, portMAX_DELAY) == pdPASS)
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <StartUartSend+0x34>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f107 010f 	add.w	r1, r7, #15
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fe9d 	bl	800346c <xQueueReceive>
 8000732:	4603      	mov	r3, r0
 8000734:	2b01      	cmp	r3, #1
 8000736:	d1f3      	bne.n	8000720 <StartUartSend+0x8>
        {
            HAL_UART_Transmit(&huart1, &tx_char, 1, HAL_MAX_DELAY);
 8000738:	f107 010f 	add.w	r1, r7, #15
 800073c:	f04f 33ff 	mov.w	r3, #4294967295
 8000740:	2201      	movs	r2, #1
 8000742:	4803      	ldr	r0, [pc, #12]	@ (8000750 <StartUartSend+0x38>)
 8000744:	f001 f97c 	bl	8001a40 <HAL_UART_Transmit>
        if (xQueueReceive(uartQueue, &tx_char, portMAX_DELAY) == pdPASS)
 8000748:	e7ea      	b.n	8000720 <StartUartSend+0x8>
 800074a:	bf00      	nop
 800074c:	20000078 	.word	0x20000078
 8000750:	2000002c 	.word	0x2000002c

08000754 <HAL_UART_RxCpltCallback>:
    }
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a10      	ldr	r2, [pc, #64]	@ (80007a4 <HAL_UART_RxCpltCallback+0x50>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d119      	bne.n	800079a <HAL_UART_RxCpltCallback+0x46>
    {
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
        xQueueSendFromISR(uartQueue, &rx_char, &xHigherPriorityTaskWoken);
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <HAL_UART_RxCpltCallback+0x54>)
 800076c:	6818      	ldr	r0, [r3, #0]
 800076e:	f107 020c 	add.w	r2, r7, #12
 8000772:	2300      	movs	r3, #0
 8000774:	490d      	ldr	r1, [pc, #52]	@ (80007ac <HAL_UART_RxCpltCallback+0x58>)
 8000776:	f002 fddb 	bl	8003330 <xQueueGenericSendFromISR>

        // Re-enable UART RX interrupt
        HAL_UART_Receive_IT(&huart1, &rx_char, 1);
 800077a:	2201      	movs	r2, #1
 800077c:	490b      	ldr	r1, [pc, #44]	@ (80007ac <HAL_UART_RxCpltCallback+0x58>)
 800077e:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <HAL_UART_RxCpltCallback+0x5c>)
 8000780:	f001 f9e9 	bl	8001b56 <HAL_UART_Receive_IT>

        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d007      	beq.n	800079a <HAL_UART_RxCpltCallback+0x46>
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <HAL_UART_RxCpltCallback+0x60>)
 800078c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	f3bf 8f4f 	dsb	sy
 8000796:	f3bf 8f6f 	isb	sy
    }
}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40011000 	.word	0x40011000
 80007a8:	20000078 	.word	0x20000078
 80007ac:	2000007c 	.word	0x2000007c
 80007b0:	2000002c 	.word	0x2000002c
 80007b4:	e000ed04 	.word	0xe000ed04

080007b8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    HAL_UART_Receive_IT(&huart1, &rx_char, 1);
 80007c0:	2201      	movs	r2, #1
 80007c2:	4904      	ldr	r1, [pc, #16]	@ (80007d4 <StartDefaultTask+0x1c>)
 80007c4:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <StartDefaultTask+0x20>)
 80007c6:	f001 f9c6 	bl	8001b56 <HAL_UART_Receive_IT>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f002 fa64 	bl	8002c98 <osDelay>
 80007d0:	e7fb      	b.n	80007ca <StartDefaultTask+0x12>
 80007d2:	bf00      	nop
 80007d4:	2000007c 	.word	0x2000007c
 80007d8:	2000002c 	.word	0x2000002c

080007dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e0:	b672      	cpsid	i
}
 80007e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <Error_Handler+0x8>

080007e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	4b12      	ldr	r3, [pc, #72]	@ (800083c <HAL_MspInit+0x54>)
 80007f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f6:	4a11      	ldr	r2, [pc, #68]	@ (800083c <HAL_MspInit+0x54>)
 80007f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007fe:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <HAL_MspInit+0x54>)
 8000800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000802:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <HAL_MspInit+0x54>)
 8000810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000812:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <HAL_MspInit+0x54>)
 8000814:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000818:	6413      	str	r3, [r2, #64]	@ 0x40
 800081a:	4b08      	ldr	r3, [pc, #32]	@ (800083c <HAL_MspInit+0x54>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	210f      	movs	r1, #15
 800082a:	f06f 0001 	mvn.w	r0, #1
 800082e:	f000 fa12 	bl	8000c56 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	@ 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a1d      	ldr	r2, [pc, #116]	@ (80008d4 <HAL_UART_MspInit+0x94>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d134      	bne.n	80008cc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b1c      	ldr	r3, [pc, #112]	@ (80008d8 <HAL_UART_MspInit+0x98>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800086a:	4a1b      	ldr	r2, [pc, #108]	@ (80008d8 <HAL_UART_MspInit+0x98>)
 800086c:	f043 0310 	orr.w	r3, r3, #16
 8000870:	6453      	str	r3, [r2, #68]	@ 0x44
 8000872:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <HAL_UART_MspInit+0x98>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <HAL_UART_MspInit+0x98>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a14      	ldr	r2, [pc, #80]	@ (80008d8 <HAL_UART_MspInit+0x98>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <HAL_UART_MspInit+0x98>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800089a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ac:	2307      	movs	r3, #7
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4809      	ldr	r0, [pc, #36]	@ (80008dc <HAL_UART_MspInit+0x9c>)
 80008b8:	f000 fa96 	bl	8000de8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2105      	movs	r1, #5
 80008c0:	2025      	movs	r0, #37	@ 0x25
 80008c2:	f000 f9c8 	bl	8000c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008c6:	2025      	movs	r0, #37	@ 0x25
 80008c8:	f000 f9e1 	bl	8000c8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	@ 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40011000 	.word	0x40011000
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <NMI_Handler+0x4>

080008e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <MemManage_Handler+0x4>

080008f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <UsageFault_Handler+0x4>

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 f8a1 	bl	8000a60 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800091e:	f003 fe1f 	bl	8004560 <xTaskGetSchedulerState>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	d001      	beq.n	800092c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000928:	f004 fc16 	bl	8005158 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000934:	4802      	ldr	r0, [pc, #8]	@ (8000940 <USART1_IRQHandler+0x10>)
 8000936:	f001 f933 	bl	8001ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2000002c 	.word	0x2000002c

08000944 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000948:	4b06      	ldr	r3, [pc, #24]	@ (8000964 <SystemInit+0x20>)
 800094a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800094e:	4a05      	ldr	r2, [pc, #20]	@ (8000964 <SystemInit+0x20>)
 8000950:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000954:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000968:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800096c:	f7ff ffea 	bl	8000944 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000970:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000972:	490d      	ldr	r1, [pc, #52]	@ (80009a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000974:	4a0d      	ldr	r2, [pc, #52]	@ (80009ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000978:	e002      	b.n	8000980 <LoopCopyDataInit>

0800097a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800097a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800097c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097e:	3304      	adds	r3, #4

08000980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000984:	d3f9      	bcc.n	800097a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000986:	4a0a      	ldr	r2, [pc, #40]	@ (80009b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000988:	4c0a      	ldr	r4, [pc, #40]	@ (80009b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800098c:	e001      	b.n	8000992 <LoopFillZerobss>

0800098e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000990:	3204      	adds	r2, #4

08000992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000994:	d3fb      	bcc.n	800098e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000996:	f004 fe67 	bl	8005668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800099a:	f7ff fda1 	bl	80004e0 <main>
  bx  lr    
 800099e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009ac:	0800578c 	.word	0x0800578c
  ldr r2, =_sbss
 80009b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009b4:	200049d4 	.word	0x200049d4

080009b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC_IRQHandler>
	...

080009bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009c0:	4b0e      	ldr	r3, [pc, #56]	@ (80009fc <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0d      	ldr	r2, [pc, #52]	@ (80009fc <HAL_Init+0x40>)
 80009c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009cc:	4b0b      	ldr	r3, [pc, #44]	@ (80009fc <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0a      	ldr	r2, [pc, #40]	@ (80009fc <HAL_Init+0x40>)
 80009d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d8:	4b08      	ldr	r3, [pc, #32]	@ (80009fc <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a07      	ldr	r2, [pc, #28]	@ (80009fc <HAL_Init+0x40>)
 80009de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e4:	2003      	movs	r0, #3
 80009e6:	f000 f92b 	bl	8000c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ea:	200f      	movs	r0, #15
 80009ec:	f000 f808 	bl	8000a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f0:	f7ff fefa 	bl	80007e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023c00 	.word	0x40023c00

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a08:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <HAL_InitTick+0x54>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <HAL_InitTick+0x58>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f000 f943 	bl	8000caa <HAL_SYSTICK_Config>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	e00e      	b.n	8000a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b0f      	cmp	r3, #15
 8000a32:	d80a      	bhi.n	8000a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a34:	2200      	movs	r2, #0
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	f000 f90b 	bl	8000c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a40:	4a06      	ldr	r2, [pc, #24]	@ (8000a5c <HAL_InitTick+0x5c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	e000      	b.n	8000a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000000 	.word	0x20000000
 8000a58:	20000008 	.word	0x20000008
 8000a5c:	20000004 	.word	0x20000004

08000a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <HAL_IncTick+0x20>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4b06      	ldr	r3, [pc, #24]	@ (8000a84 <HAL_IncTick+0x24>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4413      	add	r3, r2
 8000a70:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <HAL_IncTick+0x24>)
 8000a72:	6013      	str	r3, [r2, #0]
}
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000080 	.word	0x20000080

08000a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a8c:	4b03      	ldr	r3, [pc, #12]	@ (8000a9c <HAL_GetTick+0x14>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	20000080 	.word	0x20000080

08000aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	60d3      	str	r3, [r2, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aec:	4b04      	ldr	r3, [pc, #16]	@ (8000b00 <__NVIC_GetPriorityGrouping+0x18>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	f003 0307 	and.w	r3, r3, #7
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	e000ed00 	.word	0xe000ed00

08000b04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	db0b      	blt.n	8000b2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	f003 021f 	and.w	r2, r3, #31
 8000b1c:	4907      	ldr	r1, [pc, #28]	@ (8000b3c <__NVIC_EnableIRQ+0x38>)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	095b      	lsrs	r3, r3, #5
 8000b24:	2001      	movs	r0, #1
 8000b26:	fa00 f202 	lsl.w	r2, r0, r2
 8000b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	e000e100 	.word	0xe000e100

08000b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db0a      	blt.n	8000b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	490c      	ldr	r1, [pc, #48]	@ (8000b8c <__NVIC_SetPriority+0x4c>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b68:	e00a      	b.n	8000b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4908      	ldr	r1, [pc, #32]	@ (8000b90 <__NVIC_SetPriority+0x50>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	3b04      	subs	r3, #4
 8000b78:	0112      	lsls	r2, r2, #4
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	761a      	strb	r2, [r3, #24]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	@ 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f1c3 0307 	rsb	r3, r3, #7
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	bf28      	it	cs
 8000bb2:	2304      	movcs	r3, #4
 8000bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d902      	bls.n	8000bc4 <NVIC_EncodePriority+0x30>
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	e000      	b.n	8000bc6 <NVIC_EncodePriority+0x32>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	43d9      	mvns	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	4313      	orrs	r3, r2
         );
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3724      	adds	r7, #36	@ 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c0c:	d301      	bcc.n	8000c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00f      	b.n	8000c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <SysTick_Config+0x40>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1a:	210f      	movs	r1, #15
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f7ff ff8e 	bl	8000b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c24:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <SysTick_Config+0x40>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2a:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <SysTick_Config+0x40>)
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	e000e010 	.word	0xe000e010

08000c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff29 	bl	8000aa0 <__NVIC_SetPriorityGrouping>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c68:	f7ff ff3e 	bl	8000ae8 <__NVIC_GetPriorityGrouping>
 8000c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	6978      	ldr	r0, [r7, #20]
 8000c74:	f7ff ff8e 	bl	8000b94 <NVIC_EncodePriority>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff5d 	bl	8000b40 <__NVIC_SetPriority>
}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f7ff ff31 	bl	8000b04 <__NVIC_EnableIRQ>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b082      	sub	sp, #8
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff ffa2 	bl	8000bfc <SysTick_Config>
 8000cb8:	4603      	mov	r3, r0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b084      	sub	sp, #16
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff feda 	bl	8000a88 <HAL_GetTick>
 8000cd4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d008      	beq.n	8000cf4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2280      	movs	r2, #128	@ 0x80
 8000ce6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e052      	b.n	8000d9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 0216 	bic.w	r2, r2, #22
 8000d02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	695a      	ldr	r2, [r3, #20]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d103      	bne.n	8000d24 <HAL_DMA_Abort+0x62>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d007      	beq.n	8000d34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f022 0208 	bic.w	r2, r2, #8
 8000d32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f022 0201 	bic.w	r2, r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d44:	e013      	b.n	8000d6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d46:	f7ff fe9f 	bl	8000a88 <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	2b05      	cmp	r3, #5
 8000d52:	d90c      	bls.n	8000d6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2220      	movs	r2, #32
 8000d58:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	e015      	b.n	8000d9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1e4      	bne.n	8000d46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000d80:	223f      	movs	r2, #63	@ 0x3f
 8000d82:	409a      	lsls	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d004      	beq.n	8000dc0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2280      	movs	r2, #128	@ 0x80
 8000dba:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e00c      	b.n	8000dda <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2205      	movs	r2, #5
 8000dc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f022 0201 	bic.w	r2, r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	@ 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	e159      	b.n	80010b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f040 8148 	bne.w	80010b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d005      	beq.n	8000e3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d130      	bne.n	8000e9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	2203      	movs	r2, #3
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	68da      	ldr	r2, [r3, #12]
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e70:	2201      	movs	r2, #1
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	091b      	lsrs	r3, r3, #4
 8000e86:	f003 0201 	and.w	r2, r3, #1
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b03      	cmp	r3, #3
 8000ea6:	d017      	beq.n	8000ed8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	689a      	ldr	r2, [r3, #8]
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d123      	bne.n	8000f2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	08da      	lsrs	r2, r3, #3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3208      	adds	r2, #8
 8000eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	691a      	ldr	r2, [r3, #16]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	08da      	lsrs	r2, r3, #3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3208      	adds	r2, #8
 8000f26:	69b9      	ldr	r1, [r7, #24]
 8000f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	2203      	movs	r2, #3
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 0203 	and.w	r2, r3, #3
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	fa02 f303 	lsl.w	r3, r2, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80a2 	beq.w	80010b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b57      	ldr	r3, [pc, #348]	@ (80010d0 <HAL_GPIO_Init+0x2e8>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f76:	4a56      	ldr	r2, [pc, #344]	@ (80010d0 <HAL_GPIO_Init+0x2e8>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f7e:	4b54      	ldr	r3, [pc, #336]	@ (80010d0 <HAL_GPIO_Init+0x2e8>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f8a:	4a52      	ldr	r2, [pc, #328]	@ (80010d4 <HAL_GPIO_Init+0x2ec>)
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	220f      	movs	r2, #15
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a49      	ldr	r2, [pc, #292]	@ (80010d8 <HAL_GPIO_Init+0x2f0>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d019      	beq.n	8000fea <HAL_GPIO_Init+0x202>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a48      	ldr	r2, [pc, #288]	@ (80010dc <HAL_GPIO_Init+0x2f4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d013      	beq.n	8000fe6 <HAL_GPIO_Init+0x1fe>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a47      	ldr	r2, [pc, #284]	@ (80010e0 <HAL_GPIO_Init+0x2f8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d00d      	beq.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a46      	ldr	r2, [pc, #280]	@ (80010e4 <HAL_GPIO_Init+0x2fc>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d007      	beq.n	8000fde <HAL_GPIO_Init+0x1f6>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a45      	ldr	r2, [pc, #276]	@ (80010e8 <HAL_GPIO_Init+0x300>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d101      	bne.n	8000fda <HAL_GPIO_Init+0x1f2>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	e008      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fda:	2307      	movs	r3, #7
 8000fdc:	e006      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e004      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <HAL_GPIO_Init+0x204>
 8000fea:	2300      	movs	r3, #0
 8000fec:	69fa      	ldr	r2, [r7, #28]
 8000fee:	f002 0203 	and.w	r2, r2, #3
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	4093      	lsls	r3, r2
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ffc:	4935      	ldr	r1, [pc, #212]	@ (80010d4 <HAL_GPIO_Init+0x2ec>)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3302      	adds	r3, #2
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100a:	4b38      	ldr	r3, [pc, #224]	@ (80010ec <HAL_GPIO_Init+0x304>)
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800102e:	4a2f      	ldr	r2, [pc, #188]	@ (80010ec <HAL_GPIO_Init+0x304>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001034:	4b2d      	ldr	r3, [pc, #180]	@ (80010ec <HAL_GPIO_Init+0x304>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001058:	4a24      	ldr	r2, [pc, #144]	@ (80010ec <HAL_GPIO_Init+0x304>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800105e:	4b23      	ldr	r3, [pc, #140]	@ (80010ec <HAL_GPIO_Init+0x304>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	43db      	mvns	r3, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4013      	ands	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001082:	4a1a      	ldr	r2, [pc, #104]	@ (80010ec <HAL_GPIO_Init+0x304>)
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <HAL_GPIO_Init+0x304>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ac:	4a0f      	ldr	r2, [pc, #60]	@ (80010ec <HAL_GPIO_Init+0x304>)
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	2b0f      	cmp	r3, #15
 80010bc:	f67f aea2 	bls.w	8000e04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3724      	adds	r7, #36	@ 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40013800 	.word	0x40013800
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40020400 	.word	0x40020400
 80010e0:	40020800 	.word	0x40020800
 80010e4:	40020c00 	.word	0x40020c00
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40013c00 	.word	0x40013c00

080010f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e267      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d075      	beq.n	80011fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800110e:	4b88      	ldr	r3, [pc, #544]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b04      	cmp	r3, #4
 8001118:	d00c      	beq.n	8001134 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111a:	4b85      	ldr	r3, [pc, #532]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001122:	2b08      	cmp	r3, #8
 8001124:	d112      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4b82      	ldr	r3, [pc, #520]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800112e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001132:	d10b      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	4b7e      	ldr	r3, [pc, #504]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d05b      	beq.n	80011f8 <HAL_RCC_OscConfig+0x108>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d157      	bne.n	80011f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e242      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001154:	d106      	bne.n	8001164 <HAL_RCC_OscConfig+0x74>
 8001156:	4b76      	ldr	r3, [pc, #472]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a75      	ldr	r2, [pc, #468]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e01d      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x98>
 800116e:	4b70      	ldr	r3, [pc, #448]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a6f      	ldr	r2, [pc, #444]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b6d      	ldr	r3, [pc, #436]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a6c      	ldr	r2, [pc, #432]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001188:	4b69      	ldr	r3, [pc, #420]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a68      	ldr	r2, [pc, #416]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 800118e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b66      	ldr	r3, [pc, #408]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a65      	ldr	r2, [pc, #404]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800119e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fc6e 	bl	8000a88 <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fc6a 	bl	8000a88 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	@ 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e207      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	4b5b      	ldr	r3, [pc, #364]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xc0>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fc5a 	bl	8000a88 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fc56 	bl	8000a88 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	@ 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1f3      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	4b51      	ldr	r3, [pc, #324]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0xe8>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d063      	beq.n	80012ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001206:	4b4a      	ldr	r3, [pc, #296]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001212:	4b47      	ldr	r3, [pc, #284]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800121a:	2b08      	cmp	r3, #8
 800121c:	d11c      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b44      	ldr	r3, [pc, #272]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d116      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	4b41      	ldr	r3, [pc, #260]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e1c7      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b3b      	ldr	r3, [pc, #236]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4937      	ldr	r1, [pc, #220]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	e03a      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	4b34      	ldr	r3, [pc, #208]	@ (8001334 <HAL_RCC_OscConfig+0x244>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001266:	f7ff fc0f 	bl	8000a88 <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800126e:	f7ff fc0b 	bl	8000a88 <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e1a8      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	4b2b      	ldr	r3, [pc, #172]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4925      	ldr	r1, [pc, #148]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
 80012a0:	e015      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a2:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <HAL_RCC_OscConfig+0x244>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fbee 	bl	8000a88 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fbea 	bl	8000a88 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e187      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d036      	beq.n	8001348 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d016      	beq.n	8001310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <HAL_RCC_OscConfig+0x248>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e8:	f7ff fbce 	bl	8000a88 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fbca 	bl	8000a88 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e167      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <HAL_RCC_OscConfig+0x240>)
 8001304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x200>
 800130e:	e01b      	b.n	8001348 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001310:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <HAL_RCC_OscConfig+0x248>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fbb7 	bl	8000a88 <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131c:	e00e      	b.n	800133c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fbb3 	bl	8000a88 <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d907      	bls.n	800133c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e150      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
 8001330:	40023800 	.word	0x40023800
 8001334:	42470000 	.word	0x42470000
 8001338:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	4b88      	ldr	r3, [pc, #544]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 800133e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1ea      	bne.n	800131e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 8097 	beq.w	8001484 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135a:	4b81      	ldr	r3, [pc, #516]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10f      	bne.n	8001386 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b7d      	ldr	r3, [pc, #500]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800136e:	4a7c      	ldr	r2, [pc, #496]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	@ 0x40
 8001376:	4b7a      	ldr	r3, [pc, #488]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001382:	2301      	movs	r3, #1
 8001384:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001386:	4b77      	ldr	r3, [pc, #476]	@ (8001564 <HAL_RCC_OscConfig+0x474>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138e:	2b00      	cmp	r3, #0
 8001390:	d118      	bne.n	80013c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001392:	4b74      	ldr	r3, [pc, #464]	@ (8001564 <HAL_RCC_OscConfig+0x474>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a73      	ldr	r2, [pc, #460]	@ (8001564 <HAL_RCC_OscConfig+0x474>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800139c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139e:	f7ff fb73 	bl	8000a88 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a6:	f7ff fb6f 	bl	8000a88 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e10c      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001564 <HAL_RCC_OscConfig+0x474>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x2ea>
 80013cc:	4b64      	ldr	r3, [pc, #400]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d0:	4a63      	ldr	r2, [pc, #396]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80013d8:	e01c      	b.n	8001414 <HAL_RCC_OscConfig+0x324>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x30c>
 80013e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ee:	4b5c      	ldr	r3, [pc, #368]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f2:	4a5b      	ldr	r2, [pc, #364]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0x324>
 80013fc:	4b58      	ldr	r3, [pc, #352]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 80013fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001400:	4a57      	ldr	r2, [pc, #348]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6713      	str	r3, [r2, #112]	@ 0x70
 8001408:	4b55      	ldr	r3, [pc, #340]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800140c:	4a54      	ldr	r2, [pc, #336]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 800140e:	f023 0304 	bic.w	r3, r3, #4
 8001412:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d015      	beq.n	8001448 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff fb34 	bl	8000a88 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001422:	e00a      	b.n	800143a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff fb30 	bl	8000a88 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e0cb      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143a:	4b49      	ldr	r3, [pc, #292]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 800143c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0ee      	beq.n	8001424 <HAL_RCC_OscConfig+0x334>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001448:	f7ff fb1e 	bl	8000a88 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144e:	e00a      	b.n	8001466 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001450:	f7ff fb1a 	bl	8000a88 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0b5      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001466:	4b3e      	ldr	r3, [pc, #248]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1ee      	bne.n	8001450 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001478:	4b39      	ldr	r3, [pc, #228]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	4a38      	ldr	r2, [pc, #224]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 800147e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001482:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80a1 	beq.w	80015d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800148e:	4b34      	ldr	r3, [pc, #208]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b08      	cmp	r3, #8
 8001498:	d05c      	beq.n	8001554 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d141      	bne.n	8001526 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b31      	ldr	r3, [pc, #196]	@ (8001568 <HAL_RCC_OscConfig+0x478>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff faee 	bl	8000a88 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff faea 	bl	8000a88 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e087      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	4b27      	ldr	r3, [pc, #156]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69da      	ldr	r2, [r3, #28]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014dc:	019b      	lsls	r3, r3, #6
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e4:	085b      	lsrs	r3, r3, #1
 80014e6:	3b01      	subs	r3, #1
 80014e8:	041b      	lsls	r3, r3, #16
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f0:	061b      	lsls	r3, r3, #24
 80014f2:	491b      	ldr	r1, [pc, #108]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <HAL_RCC_OscConfig+0x478>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fac3 	bl	8000a88 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fabf 	bl	8000a88 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e05c      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x416>
 8001524:	e054      	b.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <HAL_RCC_OscConfig+0x478>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff faac 	bl	8000a88 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff faa8 	bl	8000a88 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e045      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001546:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <HAL_RCC_OscConfig+0x470>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x444>
 8001552:	e03d      	b.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d107      	bne.n	800156c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e038      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
 8001560:	40023800 	.word	0x40023800
 8001564:	40007000 	.word	0x40007000
 8001568:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800156c:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <HAL_RCC_OscConfig+0x4ec>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d028      	beq.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001584:	429a      	cmp	r2, r3
 8001586:	d121      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d11a      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800159c:	4013      	ands	r3, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d111      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	3b01      	subs	r3, #1
 80015b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d107      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0cc      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015f4:	4b68      	ldr	r3, [pc, #416]	@ (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d90c      	bls.n	800161c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b65      	ldr	r3, [pc, #404]	@ (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b63      	ldr	r3, [pc, #396]	@ (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0b8      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001634:	4b59      	ldr	r3, [pc, #356]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a58      	ldr	r2, [pc, #352]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800163e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800164c:	4b53      	ldr	r3, [pc, #332]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4a52      	ldr	r2, [pc, #328]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001658:	4b50      	ldr	r3, [pc, #320]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	494d      	ldr	r1, [pc, #308]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d044      	beq.n	8001700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b47      	ldr	r3, [pc, #284]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d119      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e07f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d003      	beq.n	800169e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	2b03      	cmp	r3, #3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169e:	4b3f      	ldr	r3, [pc, #252]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e06f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	4b3b      	ldr	r3, [pc, #236]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e067      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016be:	4b37      	ldr	r3, [pc, #220]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f023 0203 	bic.w	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4934      	ldr	r1, [pc, #208]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d0:	f7ff f9da 	bl	8000a88 <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff f9d6 	bl	8000a88 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e04f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	4b2b      	ldr	r3, [pc, #172]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 020c 	and.w	r2, r3, #12
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1eb      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001700:	4b25      	ldr	r3, [pc, #148]	@ (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d20c      	bcs.n	8001728 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b22      	ldr	r3, [pc, #136]	@ (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e032      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4b19      	ldr	r3, [pc, #100]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4916      	ldr	r1, [pc, #88]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001752:	4b12      	ldr	r3, [pc, #72]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	490e      	ldr	r1, [pc, #56]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001766:	f000 f821 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 800176a:	4602      	mov	r2, r0
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	490a      	ldr	r1, [pc, #40]	@ (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	4a09      	ldr	r2, [pc, #36]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f93a 	bl	8000a00 <HAL_InitTick>

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00
 800179c:	40023800 	.word	0x40023800
 80017a0:	08005764 	.word	0x08005764
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b0:	b090      	sub	sp, #64	@ 0x40
 80017b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c4:	4b59      	ldr	r3, [pc, #356]	@ (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d00d      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x40>
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	f200 80a1 	bhi.w	8001918 <HAL_RCC_GetSysClockFreq+0x16c>
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x34>
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017de:	e09b      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4b53      	ldr	r3, [pc, #332]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x184>)
 80017e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017e4:	e09b      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e6:	4b53      	ldr	r3, [pc, #332]	@ (8001934 <HAL_RCC_GetSysClockFreq+0x188>)
 80017e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017ea:	e098      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ec:	4b4f      	ldr	r3, [pc, #316]	@ (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f6:	4b4d      	ldr	r3, [pc, #308]	@ (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d028      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001802:	4b4a      	ldr	r3, [pc, #296]	@ (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	2200      	movs	r2, #0
 800180a:	623b      	str	r3, [r7, #32]
 800180c:	627a      	str	r2, [r7, #36]	@ 0x24
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001814:	2100      	movs	r1, #0
 8001816:	4b47      	ldr	r3, [pc, #284]	@ (8001934 <HAL_RCC_GetSysClockFreq+0x188>)
 8001818:	fb03 f201 	mul.w	r2, r3, r1
 800181c:	2300      	movs	r3, #0
 800181e:	fb00 f303 	mul.w	r3, r0, r3
 8001822:	4413      	add	r3, r2
 8001824:	4a43      	ldr	r2, [pc, #268]	@ (8001934 <HAL_RCC_GetSysClockFreq+0x188>)
 8001826:	fba0 1202 	umull	r1, r2, r0, r2
 800182a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800182c:	460a      	mov	r2, r1
 800182e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001830:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001832:	4413      	add	r3, r2
 8001834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001838:	2200      	movs	r2, #0
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	61fa      	str	r2, [r7, #28]
 800183e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001842:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001846:	f7fe fcd3 	bl	80001f0 <__aeabi_uldivmod>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4613      	mov	r3, r2
 8001850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001852:	e053      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001854:	4b35      	ldr	r3, [pc, #212]	@ (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	2200      	movs	r2, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	617a      	str	r2, [r7, #20]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001866:	f04f 0b00 	mov.w	fp, #0
 800186a:	4652      	mov	r2, sl
 800186c:	465b      	mov	r3, fp
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	0159      	lsls	r1, r3, #5
 8001878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187c:	0150      	lsls	r0, r2, #5
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	ebb2 080a 	subs.w	r8, r2, sl
 8001886:	eb63 090b 	sbc.w	r9, r3, fp
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001896:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800189a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800189e:	ebb2 0408 	subs.w	r4, r2, r8
 80018a2:	eb63 0509 	sbc.w	r5, r3, r9
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	00eb      	lsls	r3, r5, #3
 80018b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b4:	00e2      	lsls	r2, r4, #3
 80018b6:	4614      	mov	r4, r2
 80018b8:	461d      	mov	r5, r3
 80018ba:	eb14 030a 	adds.w	r3, r4, sl
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	eb45 030b 	adc.w	r3, r5, fp
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018d2:	4629      	mov	r1, r5
 80018d4:	028b      	lsls	r3, r1, #10
 80018d6:	4621      	mov	r1, r4
 80018d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018dc:	4621      	mov	r1, r4
 80018de:	028a      	lsls	r2, r1, #10
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018e6:	2200      	movs	r2, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	60fa      	str	r2, [r7, #12]
 80018ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018f0:	f7fe fc7e 	bl	80001f0 <__aeabi_uldivmod>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4613      	mov	r3, r2
 80018fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80018fc:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	0c1b      	lsrs	r3, r3, #16
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	3301      	adds	r3, #1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800190c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800190e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001916:	e002      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x184>)
 800191a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800191c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001920:	4618      	mov	r0, r3
 8001922:	3740      	adds	r7, #64	@ 0x40
 8001924:	46bd      	mov	sp, r7
 8001926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	00f42400 	.word	0x00f42400
 8001934:	017d7840 	.word	0x017d7840

08001938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800193c:	4b03      	ldr	r3, [pc, #12]	@ (800194c <HAL_RCC_GetHCLKFreq+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000000 	.word	0x20000000

08001950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001954:	f7ff fff0 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001958:	4602      	mov	r2, r0
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	0a9b      	lsrs	r3, r3, #10
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	4903      	ldr	r1, [pc, #12]	@ (8001974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001966:	5ccb      	ldrb	r3, [r1, r3]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	08005774 	.word	0x08005774

08001978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800197c:	f7ff ffdc 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001980:	4602      	mov	r2, r0
 8001982:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	0b5b      	lsrs	r3, r3, #13
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	4903      	ldr	r1, [pc, #12]	@ (800199c <HAL_RCC_GetPCLK2Freq+0x24>)
 800198e:	5ccb      	ldrb	r3, [r1, r3]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	08005774 	.word	0x08005774

080019a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e042      	b.n	8001a38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7fe ff3a 	bl	8000840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2224      	movs	r2, #36	@ 0x24
 80019d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 fdd3 	bl	8002590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80019f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	@ 0x28
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d175      	bne.n	8001b4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <HAL_UART_Transmit+0x2c>
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e06e      	b.n	8001b4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2221      	movs	r2, #33	@ 0x21
 8001a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a7e:	f7ff f803 	bl	8000a88 <HAL_GetTick>
 8001a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	88fa      	ldrh	r2, [r7, #6]
 8001a88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	88fa      	ldrh	r2, [r7, #6]
 8001a8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a98:	d108      	bne.n	8001aac <HAL_UART_Transmit+0x6c>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d104      	bne.n	8001aac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	61bb      	str	r3, [r7, #24]
 8001aaa:	e003      	b.n	8001ab4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ab4:	e02e      	b.n	8001b14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2200      	movs	r2, #0
 8001abe:	2180      	movs	r1, #128	@ 0x80
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fb37 	bl	8002134 <UART_WaitOnFlagUntilTimeout>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e03a      	b.n	8001b4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10b      	bne.n	8001af6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	3302      	adds	r3, #2
 8001af2:	61bb      	str	r3, [r7, #24]
 8001af4:	e007      	b.n	8001b06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	781a      	ldrb	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	3301      	adds	r3, #1
 8001b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1cb      	bne.n	8001ab6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2200      	movs	r2, #0
 8001b26:	2140      	movs	r1, #64	@ 0x40
 8001b28:	68f8      	ldr	r0, [r7, #12]
 8001b2a:	f000 fb03 	bl	8002134 <UART_WaitOnFlagUntilTimeout>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e006      	b.n	8001b4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2220      	movs	r2, #32
 8001b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e000      	b.n	8001b4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b4c:	2302      	movs	r3, #2
  }
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3720      	adds	r7, #32
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	60f8      	str	r0, [r7, #12]
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	4613      	mov	r3, r2
 8001b62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	d112      	bne.n	8001b96 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_UART_Receive_IT+0x26>
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e00b      	b.n	8001b98 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 fb2a 	bl	80021e6 <UART_Start_Receive_IT>
 8001b92:	4603      	mov	r3, r0
 8001b94:	e000      	b.n	8001b98 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001b96:	2302      	movs	r3, #2
  }
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001bde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10f      	bne.n	8001c06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bea:	f003 0320 	and.w	r3, r3, #32
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_UART_IRQHandler+0x66>
 8001bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001bf6:	f003 0320 	and.w	r3, r3, #32
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 fc07 	bl	8002412 <UART_Receive_IT>
      return;
 8001c04:	e273      	b.n	80020ee <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 80de 	beq.w	8001dcc <HAL_UART_IRQHandler+0x22c>
 8001c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d106      	bne.n	8001c2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c20:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80d1 	beq.w	8001dcc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00b      	beq.n	8001c4e <HAL_UART_IRQHandler+0xae>
 8001c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00b      	beq.n	8001c72 <HAL_UART_IRQHandler+0xd2>
 8001c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	f043 0202 	orr.w	r2, r3, #2
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_UART_IRQHandler+0xf6>
 8001c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f043 0204 	orr.w	r2, r3, #4
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d011      	beq.n	8001cc6 <HAL_UART_IRQHandler+0x126>
 8001ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ca6:	f003 0320 	and.w	r3, r3, #32
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cbe:	f043 0208 	orr.w	r2, r3, #8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f000 820a 	beq.w	80020e4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cd4:	f003 0320 	and.w	r3, r3, #32
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_UART_IRQHandler+0x14e>
 8001cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f000 fb92 	bl	8002412 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf8:	2b40      	cmp	r3, #64	@ 0x40
 8001cfa:	bf0c      	ite	eq
 8001cfc:	2301      	moveq	r3, #1
 8001cfe:	2300      	movne	r3, #0
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0a:	f003 0308 	and.w	r3, r3, #8
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d103      	bne.n	8001d1a <HAL_UART_IRQHandler+0x17a>
 8001d12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d04f      	beq.n	8001dba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 fa9d 	bl	800225a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d2a:	2b40      	cmp	r3, #64	@ 0x40
 8001d2c:	d141      	bne.n	8001db2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	3314      	adds	r3, #20
 8001d34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d38:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d3c:	e853 3f00 	ldrex	r3, [r3]
 8001d40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001d44:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3314      	adds	r3, #20
 8001d56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001d5a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001d5e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001d66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001d6a:	e841 2300 	strex	r3, r2, [r1]
 8001d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001d72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1d9      	bne.n	8001d2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d013      	beq.n	8001daa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d86:	4a8a      	ldr	r2, [pc, #552]	@ (8001fb0 <HAL_UART_IRQHandler+0x410>)
 8001d88:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff f807 	bl	8000da2 <HAL_DMA_Abort_IT>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d016      	beq.n	8001dc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001da4:	4610      	mov	r0, r2
 8001da6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001da8:	e00e      	b.n	8001dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f9ac 	bl	8002108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001db0:	e00a      	b.n	8001dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f9a8 	bl	8002108 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001db8:	e006      	b.n	8001dc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f9a4 	bl	8002108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001dc6:	e18d      	b.n	80020e4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dc8:	bf00      	nop
    return;
 8001dca:	e18b      	b.n	80020e4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	f040 8167 	bne.w	80020a4 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 8160 	beq.w	80020a4 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8001de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 8159 	beq.w	80020a4 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e12:	2b40      	cmp	r3, #64	@ 0x40
 8001e14:	f040 80ce 	bne.w	8001fb4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80a9 	beq.w	8001f80 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001e32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001e36:	429a      	cmp	r2, r3
 8001e38:	f080 80a2 	bcs.w	8001f80 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001e42:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e4e:	f000 8088 	beq.w	8001f62 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	330c      	adds	r3, #12
 8001e58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e60:	e853 3f00 	ldrex	r3, [r3]
 8001e64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001e68:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	330c      	adds	r3, #12
 8001e7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001e7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001e82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e86:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001e8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001e8e:	e841 2300 	strex	r3, r2, [r1]
 8001e92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001e96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1d9      	bne.n	8001e52 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	3314      	adds	r3, #20
 8001ea4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ea8:	e853 3f00 	ldrex	r3, [r3]
 8001eac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001eae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	3314      	adds	r3, #20
 8001ebe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ec2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001ec6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ec8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001eca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001ece:	e841 2300 	strex	r3, r2, [r1]
 8001ed2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001ed4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1e1      	bne.n	8001e9e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	3314      	adds	r3, #20
 8001ee0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ee4:	e853 3f00 	ldrex	r3, [r3]
 8001ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001eea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3314      	adds	r3, #20
 8001efa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001efe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001f04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001f06:	e841 2300 	strex	r3, r2, [r1]
 8001f0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d1e3      	bne.n	8001eda <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	330c      	adds	r3, #12
 8001f26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f2a:	e853 3f00 	ldrex	r3, [r3]
 8001f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001f30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f32:	f023 0310 	bic.w	r3, r3, #16
 8001f36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	330c      	adds	r3, #12
 8001f40:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001f44:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001f46:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f48:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f4a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f4c:	e841 2300 	strex	r3, r2, [r1]
 8001f50:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001f52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1e3      	bne.n	8001f20 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe feb0 	bl	8000cc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2202      	movs	r2, #2
 8001f66:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	4619      	mov	r1, r3
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f8cf 	bl	800211c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8001f7e:	e0b3      	b.n	80020e8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	f040 80ad 	bne.w	80020e8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f98:	f040 80a6 	bne.w	80020e8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f8b7 	bl	800211c <HAL_UARTEx_RxEventCallback>
      return;
 8001fae:	e09b      	b.n	80020e8 <HAL_UART_IRQHandler+0x548>
 8001fb0:	08002321 	.word	0x08002321
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 808e 	beq.w	80020ec <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8001fd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 8089 	beq.w	80020ec <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	330c      	adds	r3, #12
 8001fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fe4:	e853 3f00 	ldrex	r3, [r3]
 8001fe8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	330c      	adds	r3, #12
 8001ffa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001ffe:	647a      	str	r2, [r7, #68]	@ 0x44
 8002000:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002002:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002004:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002006:	e841 2300 	strex	r3, r2, [r1]
 800200a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800200c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1e3      	bne.n	8001fda <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	3314      	adds	r3, #20
 8002018:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	e853 3f00 	ldrex	r3, [r3]
 8002020:	623b      	str	r3, [r7, #32]
   return(result);
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	3314      	adds	r3, #20
 8002032:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002036:	633a      	str	r2, [r7, #48]	@ 0x30
 8002038:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800203a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800203c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800203e:	e841 2300 	strex	r3, r2, [r1]
 8002042:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1e3      	bne.n	8002012 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2220      	movs	r2, #32
 800204e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	330c      	adds	r3, #12
 800205e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	e853 3f00 	ldrex	r3, [r3]
 8002066:	60fb      	str	r3, [r7, #12]
   return(result);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f023 0310 	bic.w	r3, r3, #16
 800206e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	330c      	adds	r3, #12
 8002078:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800207c:	61fa      	str	r2, [r7, #28]
 800207e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002080:	69b9      	ldr	r1, [r7, #24]
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	e841 2300 	strex	r3, r2, [r1]
 8002088:	617b      	str	r3, [r7, #20]
   return(result);
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1e3      	bne.n	8002058 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002096:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800209a:	4619      	mov	r1, r3
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f83d 	bl	800211c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020a2:	e023      	b.n	80020ec <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <HAL_UART_IRQHandler+0x524>
 80020b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f940 	bl	8002342 <UART_Transmit_IT>
    return;
 80020c2:	e014      	b.n	80020ee <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00e      	beq.n	80020ee <HAL_UART_IRQHandler+0x54e>
 80020d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f980 	bl	80023e2 <UART_EndTransmit_IT>
    return;
 80020e2:	e004      	b.n	80020ee <HAL_UART_IRQHandler+0x54e>
    return;
 80020e4:	bf00      	nop
 80020e6:	e002      	b.n	80020ee <HAL_UART_IRQHandler+0x54e>
      return;
 80020e8:	bf00      	nop
 80020ea:	e000      	b.n	80020ee <HAL_UART_IRQHandler+0x54e>
      return;
 80020ec:	bf00      	nop
  }
}
 80020ee:	37e8      	adds	r7, #232	@ 0xe8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	4613      	mov	r3, r2
 8002142:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002144:	e03b      	b.n	80021be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214c:	d037      	beq.n	80021be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214e:	f7fe fc9b 	bl	8000a88 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	6a3a      	ldr	r2, [r7, #32]
 800215a:	429a      	cmp	r2, r3
 800215c:	d302      	bcc.n	8002164 <UART_WaitOnFlagUntilTimeout+0x30>
 800215e:	6a3b      	ldr	r3, [r7, #32]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e03a      	b.n	80021de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	2b00      	cmp	r3, #0
 8002174:	d023      	beq.n	80021be <UART_WaitOnFlagUntilTimeout+0x8a>
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b80      	cmp	r3, #128	@ 0x80
 800217a:	d020      	beq.n	80021be <UART_WaitOnFlagUntilTimeout+0x8a>
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b40      	cmp	r3, #64	@ 0x40
 8002180:	d01d      	beq.n	80021be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b08      	cmp	r3, #8
 800218e:	d116      	bne.n	80021be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f857 	bl	800225a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2208      	movs	r2, #8
 80021b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e00f      	b.n	80021de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4013      	ands	r3, r2
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	bf0c      	ite	eq
 80021ce:	2301      	moveq	r3, #1
 80021d0:	2300      	movne	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d0b4      	beq.n	8002146 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b085      	sub	sp, #20
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	60f8      	str	r0, [r7, #12]
 80021ee:	60b9      	str	r1, [r7, #8]
 80021f0:	4613      	mov	r3, r2
 80021f2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	88fa      	ldrh	r2, [r7, #6]
 80021fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	88fa      	ldrh	r2, [r7, #6]
 8002204:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2222      	movs	r2, #34	@ 0x22
 8002210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800222a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0201 	orr.w	r2, r2, #1
 800223a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0220 	orr.w	r2, r2, #32
 800224a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800225a:	b480      	push	{r7}
 800225c:	b095      	sub	sp, #84	@ 0x54
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	330c      	adds	r3, #12
 8002268:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800226c:	e853 3f00 	ldrex	r3, [r3]
 8002270:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002274:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002278:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	330c      	adds	r3, #12
 8002280:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002282:	643a      	str	r2, [r7, #64]	@ 0x40
 8002284:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002286:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002288:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800228a:	e841 2300 	strex	r3, r2, [r1]
 800228e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1e5      	bne.n	8002262 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	3314      	adds	r3, #20
 800229c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229e:	6a3b      	ldr	r3, [r7, #32]
 80022a0:	e853 3f00 	ldrex	r3, [r3]
 80022a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3314      	adds	r3, #20
 80022b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80022b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022be:	e841 2300 	strex	r3, r2, [r1]
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80022c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1e5      	bne.n	8002296 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d119      	bne.n	8002306 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	330c      	adds	r3, #12
 80022d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	e853 3f00 	ldrex	r3, [r3]
 80022e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f023 0310 	bic.w	r3, r3, #16
 80022e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	330c      	adds	r3, #12
 80022f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022f2:	61ba      	str	r2, [r7, #24]
 80022f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f6:	6979      	ldr	r1, [r7, #20]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	e841 2300 	strex	r3, r2, [r1]
 80022fe:	613b      	str	r3, [r7, #16]
   return(result);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1e5      	bne.n	80022d2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002314:	bf00      	nop
 8002316:	3754      	adds	r7, #84	@ 0x54
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800232c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f7ff fee7 	bl	8002108 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b21      	cmp	r3, #33	@ 0x21
 8002354:	d13e      	bne.n	80023d4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800235e:	d114      	bne.n	800238a <UART_Transmit_IT+0x48>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d110      	bne.n	800238a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	881b      	ldrh	r3, [r3, #0]
 8002372:	461a      	mov	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800237c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	1c9a      	adds	r2, r3, #2
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	621a      	str	r2, [r3, #32]
 8002388:	e008      	b.n	800239c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	1c59      	adds	r1, r3, #1
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6211      	str	r1, [r2, #32]
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	3b01      	subs	r3, #1
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4619      	mov	r1, r3
 80023aa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10f      	bne.n	80023d0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023ce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	e000      	b.n	80023d6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023d4:	2302      	movs	r3, #2
  }
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3714      	adds	r7, #20
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023f8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2220      	movs	r2, #32
 80023fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff fe76 	bl	80020f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b08c      	sub	sp, #48	@ 0x30
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800241a:	2300      	movs	r3, #0
 800241c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800241e:	2300      	movs	r3, #0
 8002420:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b22      	cmp	r3, #34	@ 0x22
 800242c:	f040 80aa 	bne.w	8002584 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002438:	d115      	bne.n	8002466 <UART_Receive_IT+0x54>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d111      	bne.n	8002466 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002446:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	b29b      	uxth	r3, r3
 8002450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002454:	b29a      	uxth	r2, r3
 8002456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002458:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245e:	1c9a      	adds	r2, r3, #2
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	@ 0x28
 8002464:	e024      	b.n	80024b0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002474:	d007      	beq.n	8002486 <UART_Receive_IT+0x74>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10a      	bne.n	8002494 <UART_Receive_IT+0x82>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	b2da      	uxtb	r2, r3
 800248e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002490:	701a      	strb	r2, [r3, #0]
 8002492:	e008      	b.n	80024a6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4619      	mov	r1, r3
 80024be:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d15d      	bne.n	8002580 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0220 	bic.w	r2, r2, #32
 80024d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 0201 	bic.w	r2, r2, #1
 80024f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2220      	movs	r2, #32
 80024f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002506:	2b01      	cmp	r3, #1
 8002508:	d135      	bne.n	8002576 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	330c      	adds	r3, #12
 8002516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	e853 3f00 	ldrex	r3, [r3]
 800251e:	613b      	str	r3, [r7, #16]
   return(result);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	f023 0310 	bic.w	r3, r3, #16
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	330c      	adds	r3, #12
 800252e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002530:	623a      	str	r2, [r7, #32]
 8002532:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002534:	69f9      	ldr	r1, [r7, #28]
 8002536:	6a3a      	ldr	r2, [r7, #32]
 8002538:	e841 2300 	strex	r3, r2, [r1]
 800253c:	61bb      	str	r3, [r7, #24]
   return(result);
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1e5      	bne.n	8002510 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b10      	cmp	r3, #16
 8002550:	d10a      	bne.n	8002568 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800256c:	4619      	mov	r1, r3
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fdd4 	bl	800211c <HAL_UARTEx_RxEventCallback>
 8002574:	e002      	b.n	800257c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7fe f8ec 	bl	8000754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	e002      	b.n	8002586 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	e000      	b.n	8002586 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002584:	2302      	movs	r3, #2
  }
}
 8002586:	4618      	mov	r0, r3
 8002588:	3730      	adds	r7, #48	@ 0x30
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002594:	b0c0      	sub	sp, #256	@ 0x100
 8002596:	af00      	add	r7, sp, #0
 8002598:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ac:	68d9      	ldr	r1, [r3, #12]
 80025ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	ea40 0301 	orr.w	r3, r0, r1
 80025b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80025e8:	f021 010c 	bic.w	r1, r1, #12
 80025ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80025f6:	430b      	orrs	r3, r1
 80025f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260a:	6999      	ldr	r1, [r3, #24]
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	ea40 0301 	orr.w	r3, r0, r1
 8002616:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b8f      	ldr	r3, [pc, #572]	@ (800285c <UART_SetConfig+0x2cc>)
 8002620:	429a      	cmp	r2, r3
 8002622:	d005      	beq.n	8002630 <UART_SetConfig+0xa0>
 8002624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4b8d      	ldr	r3, [pc, #564]	@ (8002860 <UART_SetConfig+0x2d0>)
 800262c:	429a      	cmp	r2, r3
 800262e:	d104      	bne.n	800263a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002630:	f7ff f9a2 	bl	8001978 <HAL_RCC_GetPCLK2Freq>
 8002634:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002638:	e003      	b.n	8002642 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800263a:	f7ff f989 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 800263e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800264c:	f040 810c 	bne.w	8002868 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002654:	2200      	movs	r2, #0
 8002656:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800265a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800265e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002662:	4622      	mov	r2, r4
 8002664:	462b      	mov	r3, r5
 8002666:	1891      	adds	r1, r2, r2
 8002668:	65b9      	str	r1, [r7, #88]	@ 0x58
 800266a:	415b      	adcs	r3, r3
 800266c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800266e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002672:	4621      	mov	r1, r4
 8002674:	eb12 0801 	adds.w	r8, r2, r1
 8002678:	4629      	mov	r1, r5
 800267a:	eb43 0901 	adc.w	r9, r3, r1
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800268a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800268e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002692:	4690      	mov	r8, r2
 8002694:	4699      	mov	r9, r3
 8002696:	4623      	mov	r3, r4
 8002698:	eb18 0303 	adds.w	r3, r8, r3
 800269c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026a0:	462b      	mov	r3, r5
 80026a2:	eb49 0303 	adc.w	r3, r9, r3
 80026a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026be:	460b      	mov	r3, r1
 80026c0:	18db      	adds	r3, r3, r3
 80026c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80026c4:	4613      	mov	r3, r2
 80026c6:	eb42 0303 	adc.w	r3, r2, r3
 80026ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80026cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80026d4:	f7fd fd8c 	bl	80001f0 <__aeabi_uldivmod>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4b61      	ldr	r3, [pc, #388]	@ (8002864 <UART_SetConfig+0x2d4>)
 80026de:	fba3 2302 	umull	r2, r3, r3, r2
 80026e2:	095b      	lsrs	r3, r3, #5
 80026e4:	011c      	lsls	r4, r3, #4
 80026e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026ea:	2200      	movs	r2, #0
 80026ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80026f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80026f8:	4642      	mov	r2, r8
 80026fa:	464b      	mov	r3, r9
 80026fc:	1891      	adds	r1, r2, r2
 80026fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002700:	415b      	adcs	r3, r3
 8002702:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002704:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002708:	4641      	mov	r1, r8
 800270a:	eb12 0a01 	adds.w	sl, r2, r1
 800270e:	4649      	mov	r1, r9
 8002710:	eb43 0b01 	adc.w	fp, r3, r1
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	f04f 0300 	mov.w	r3, #0
 800271c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002720:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002724:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002728:	4692      	mov	sl, r2
 800272a:	469b      	mov	fp, r3
 800272c:	4643      	mov	r3, r8
 800272e:	eb1a 0303 	adds.w	r3, sl, r3
 8002732:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002736:	464b      	mov	r3, r9
 8002738:	eb4b 0303 	adc.w	r3, fp, r3
 800273c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800274c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002750:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002754:	460b      	mov	r3, r1
 8002756:	18db      	adds	r3, r3, r3
 8002758:	643b      	str	r3, [r7, #64]	@ 0x40
 800275a:	4613      	mov	r3, r2
 800275c:	eb42 0303 	adc.w	r3, r2, r3
 8002760:	647b      	str	r3, [r7, #68]	@ 0x44
 8002762:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002766:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800276a:	f7fd fd41 	bl	80001f0 <__aeabi_uldivmod>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4611      	mov	r1, r2
 8002774:	4b3b      	ldr	r3, [pc, #236]	@ (8002864 <UART_SetConfig+0x2d4>)
 8002776:	fba3 2301 	umull	r2, r3, r3, r1
 800277a:	095b      	lsrs	r3, r3, #5
 800277c:	2264      	movs	r2, #100	@ 0x64
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	1acb      	subs	r3, r1, r3
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800278a:	4b36      	ldr	r3, [pc, #216]	@ (8002864 <UART_SetConfig+0x2d4>)
 800278c:	fba3 2302 	umull	r2, r3, r3, r2
 8002790:	095b      	lsrs	r3, r3, #5
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002798:	441c      	add	r4, r3
 800279a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800279e:	2200      	movs	r2, #0
 80027a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027ac:	4642      	mov	r2, r8
 80027ae:	464b      	mov	r3, r9
 80027b0:	1891      	adds	r1, r2, r2
 80027b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027b4:	415b      	adcs	r3, r3
 80027b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027bc:	4641      	mov	r1, r8
 80027be:	1851      	adds	r1, r2, r1
 80027c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80027c2:	4649      	mov	r1, r9
 80027c4:	414b      	adcs	r3, r1
 80027c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80027d4:	4659      	mov	r1, fp
 80027d6:	00cb      	lsls	r3, r1, #3
 80027d8:	4651      	mov	r1, sl
 80027da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027de:	4651      	mov	r1, sl
 80027e0:	00ca      	lsls	r2, r1, #3
 80027e2:	4610      	mov	r0, r2
 80027e4:	4619      	mov	r1, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	4642      	mov	r2, r8
 80027ea:	189b      	adds	r3, r3, r2
 80027ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027f0:	464b      	mov	r3, r9
 80027f2:	460a      	mov	r2, r1
 80027f4:	eb42 0303 	adc.w	r3, r2, r3
 80027f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002808:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800280c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002810:	460b      	mov	r3, r1
 8002812:	18db      	adds	r3, r3, r3
 8002814:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002816:	4613      	mov	r3, r2
 8002818:	eb42 0303 	adc.w	r3, r2, r3
 800281c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800281e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002822:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002826:	f7fd fce3 	bl	80001f0 <__aeabi_uldivmod>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	4b0d      	ldr	r3, [pc, #52]	@ (8002864 <UART_SetConfig+0x2d4>)
 8002830:	fba3 1302 	umull	r1, r3, r3, r2
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	2164      	movs	r1, #100	@ 0x64
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	3332      	adds	r3, #50	@ 0x32
 8002842:	4a08      	ldr	r2, [pc, #32]	@ (8002864 <UART_SetConfig+0x2d4>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	f003 0207 	and.w	r2, r3, #7
 800284e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4422      	add	r2, r4
 8002856:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002858:	e106      	b.n	8002a68 <UART_SetConfig+0x4d8>
 800285a:	bf00      	nop
 800285c:	40011000 	.word	0x40011000
 8002860:	40011400 	.word	0x40011400
 8002864:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800286c:	2200      	movs	r2, #0
 800286e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002872:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002876:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800287a:	4642      	mov	r2, r8
 800287c:	464b      	mov	r3, r9
 800287e:	1891      	adds	r1, r2, r2
 8002880:	6239      	str	r1, [r7, #32]
 8002882:	415b      	adcs	r3, r3
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
 8002886:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800288a:	4641      	mov	r1, r8
 800288c:	1854      	adds	r4, r2, r1
 800288e:	4649      	mov	r1, r9
 8002890:	eb43 0501 	adc.w	r5, r3, r1
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	00eb      	lsls	r3, r5, #3
 800289e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028a2:	00e2      	lsls	r2, r4, #3
 80028a4:	4614      	mov	r4, r2
 80028a6:	461d      	mov	r5, r3
 80028a8:	4643      	mov	r3, r8
 80028aa:	18e3      	adds	r3, r4, r3
 80028ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028b0:	464b      	mov	r3, r9
 80028b2:	eb45 0303 	adc.w	r3, r5, r3
 80028b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028ca:	f04f 0200 	mov.w	r2, #0
 80028ce:	f04f 0300 	mov.w	r3, #0
 80028d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028d6:	4629      	mov	r1, r5
 80028d8:	008b      	lsls	r3, r1, #2
 80028da:	4621      	mov	r1, r4
 80028dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028e0:	4621      	mov	r1, r4
 80028e2:	008a      	lsls	r2, r1, #2
 80028e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80028e8:	f7fd fc82 	bl	80001f0 <__aeabi_uldivmod>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4b60      	ldr	r3, [pc, #384]	@ (8002a74 <UART_SetConfig+0x4e4>)
 80028f2:	fba3 2302 	umull	r2, r3, r3, r2
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	011c      	lsls	r4, r3, #4
 80028fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028fe:	2200      	movs	r2, #0
 8002900:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002904:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002908:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800290c:	4642      	mov	r2, r8
 800290e:	464b      	mov	r3, r9
 8002910:	1891      	adds	r1, r2, r2
 8002912:	61b9      	str	r1, [r7, #24]
 8002914:	415b      	adcs	r3, r3
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800291c:	4641      	mov	r1, r8
 800291e:	1851      	adds	r1, r2, r1
 8002920:	6139      	str	r1, [r7, #16]
 8002922:	4649      	mov	r1, r9
 8002924:	414b      	adcs	r3, r1
 8002926:	617b      	str	r3, [r7, #20]
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002934:	4659      	mov	r1, fp
 8002936:	00cb      	lsls	r3, r1, #3
 8002938:	4651      	mov	r1, sl
 800293a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800293e:	4651      	mov	r1, sl
 8002940:	00ca      	lsls	r2, r1, #3
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	4603      	mov	r3, r0
 8002948:	4642      	mov	r2, r8
 800294a:	189b      	adds	r3, r3, r2
 800294c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002950:	464b      	mov	r3, r9
 8002952:	460a      	mov	r2, r1
 8002954:	eb42 0303 	adc.w	r3, r2, r3
 8002958:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800295c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002966:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002974:	4649      	mov	r1, r9
 8002976:	008b      	lsls	r3, r1, #2
 8002978:	4641      	mov	r1, r8
 800297a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800297e:	4641      	mov	r1, r8
 8002980:	008a      	lsls	r2, r1, #2
 8002982:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002986:	f7fd fc33 	bl	80001f0 <__aeabi_uldivmod>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4611      	mov	r1, r2
 8002990:	4b38      	ldr	r3, [pc, #224]	@ (8002a74 <UART_SetConfig+0x4e4>)
 8002992:	fba3 2301 	umull	r2, r3, r3, r1
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2264      	movs	r2, #100	@ 0x64
 800299a:	fb02 f303 	mul.w	r3, r2, r3
 800299e:	1acb      	subs	r3, r1, r3
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	3332      	adds	r3, #50	@ 0x32
 80029a4:	4a33      	ldr	r2, [pc, #204]	@ (8002a74 <UART_SetConfig+0x4e4>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	095b      	lsrs	r3, r3, #5
 80029ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029b0:	441c      	add	r4, r3
 80029b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029b6:	2200      	movs	r2, #0
 80029b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80029ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80029bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029c0:	4642      	mov	r2, r8
 80029c2:	464b      	mov	r3, r9
 80029c4:	1891      	adds	r1, r2, r2
 80029c6:	60b9      	str	r1, [r7, #8]
 80029c8:	415b      	adcs	r3, r3
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029d0:	4641      	mov	r1, r8
 80029d2:	1851      	adds	r1, r2, r1
 80029d4:	6039      	str	r1, [r7, #0]
 80029d6:	4649      	mov	r1, r9
 80029d8:	414b      	adcs	r3, r1
 80029da:	607b      	str	r3, [r7, #4]
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029e8:	4659      	mov	r1, fp
 80029ea:	00cb      	lsls	r3, r1, #3
 80029ec:	4651      	mov	r1, sl
 80029ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029f2:	4651      	mov	r1, sl
 80029f4:	00ca      	lsls	r2, r1, #3
 80029f6:	4610      	mov	r0, r2
 80029f8:	4619      	mov	r1, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	4642      	mov	r2, r8
 80029fe:	189b      	adds	r3, r3, r2
 8002a00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a02:	464b      	mov	r3, r9
 8002a04:	460a      	mov	r2, r1
 8002a06:	eb42 0303 	adc.w	r3, r2, r3
 8002a0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a16:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a24:	4649      	mov	r1, r9
 8002a26:	008b      	lsls	r3, r1, #2
 8002a28:	4641      	mov	r1, r8
 8002a2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a2e:	4641      	mov	r1, r8
 8002a30:	008a      	lsls	r2, r1, #2
 8002a32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a36:	f7fd fbdb 	bl	80001f0 <__aeabi_uldivmod>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <UART_SetConfig+0x4e4>)
 8002a40:	fba3 1302 	umull	r1, r3, r3, r2
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	2164      	movs	r1, #100	@ 0x64
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	3332      	adds	r3, #50	@ 0x32
 8002a52:	4a08      	ldr	r2, [pc, #32]	@ (8002a74 <UART_SetConfig+0x4e4>)
 8002a54:	fba2 2303 	umull	r2, r3, r2, r3
 8002a58:	095b      	lsrs	r3, r3, #5
 8002a5a:	f003 020f 	and.w	r2, r3, #15
 8002a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4422      	add	r2, r4
 8002a66:	609a      	str	r2, [r3, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a74:	51eb851f 	.word	0x51eb851f

08002a78 <__NVIC_SetPriority>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	db0a      	blt.n	8002aa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	490c      	ldr	r1, [pc, #48]	@ (8002ac4 <__NVIC_SetPriority+0x4c>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	0112      	lsls	r2, r2, #4
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002aa0:	e00a      	b.n	8002ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4908      	ldr	r1, [pc, #32]	@ (8002ac8 <__NVIC_SetPriority+0x50>)
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	3b04      	subs	r3, #4
 8002ab0:	0112      	lsls	r2, r2, #4
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	761a      	strb	r2, [r3, #24]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000e100 	.word	0xe000e100
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	f06f 0004 	mvn.w	r0, #4
 8002ad6:	f7ff ffcf 	bl	8002a78 <__NVIC_SetPriority>
#endif
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ae6:	f3ef 8305 	mrs	r3, IPSR
 8002aea:	603b      	str	r3, [r7, #0]
  return(result);
 8002aec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002af2:	f06f 0305 	mvn.w	r3, #5
 8002af6:	607b      	str	r3, [r7, #4]
 8002af8:	e00c      	b.n	8002b14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002afa:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <osKernelInitialize+0x44>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d105      	bne.n	8002b0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002b02:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <osKernelInitialize+0x44>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	e002      	b.n	8002b14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b14:	687b      	ldr	r3, [r7, #4]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000084 	.word	0x20000084

08002b28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b2e:	f3ef 8305 	mrs	r3, IPSR
 8002b32:	603b      	str	r3, [r7, #0]
  return(result);
 8002b34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002b3a:	f06f 0305 	mvn.w	r3, #5
 8002b3e:	607b      	str	r3, [r7, #4]
 8002b40:	e010      	b.n	8002b64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b42:	4b0b      	ldr	r3, [pc, #44]	@ (8002b70 <osKernelStart+0x48>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d109      	bne.n	8002b5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002b4a:	f7ff ffbf 	bl	8002acc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002b4e:	4b08      	ldr	r3, [pc, #32]	@ (8002b70 <osKernelStart+0x48>)
 8002b50:	2202      	movs	r2, #2
 8002b52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b54:	f001 f8b6 	bl	8003cc4 <vTaskStartScheduler>
      stat = osOK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	e002      	b.n	8002b64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b64:	687b      	ldr	r3, [r7, #4]
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000084 	.word	0x20000084

08002b74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08e      	sub	sp, #56	@ 0x38
 8002b78:	af04      	add	r7, sp, #16
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b84:	f3ef 8305 	mrs	r3, IPSR
 8002b88:	617b      	str	r3, [r7, #20]
  return(result);
 8002b8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d17e      	bne.n	8002c8e <osThreadNew+0x11a>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d07b      	beq.n	8002c8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002b96:	2380      	movs	r3, #128	@ 0x80
 8002b98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002b9a:	2318      	movs	r3, #24
 8002b9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d045      	beq.n	8002c3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <osThreadNew+0x48>
        name = attr->name;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <osThreadNew+0x6e>
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	2b38      	cmp	r3, #56	@ 0x38
 8002bd4:	d805      	bhi.n	8002be2 <osThreadNew+0x6e>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <osThreadNew+0x72>
        return (NULL);
 8002be2:	2300      	movs	r3, #0
 8002be4:	e054      	b.n	8002c90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00e      	beq.n	8002c1c <osThreadNew+0xa8>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b5b      	cmp	r3, #91	@ 0x5b
 8002c04:	d90a      	bls.n	8002c1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <osThreadNew+0xa8>
        mem = 1;
 8002c16:	2301      	movs	r3, #1
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	e010      	b.n	8002c3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10c      	bne.n	8002c3e <osThreadNew+0xca>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d108      	bne.n	8002c3e <osThreadNew+0xca>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d104      	bne.n	8002c3e <osThreadNew+0xca>
          mem = 0;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	e001      	b.n	8002c3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d110      	bne.n	8002c66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c4c:	9202      	str	r2, [sp, #8]
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	6a3a      	ldr	r2, [r7, #32]
 8002c58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fe56 	bl	800390c <xTaskCreateStatic>
 8002c60:	4603      	mov	r3, r0
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	e013      	b.n	8002c8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d110      	bne.n	8002c8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	f107 0310 	add.w	r3, r7, #16
 8002c74:	9301      	str	r3, [sp, #4]
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 fea4 	bl	80039cc <xTaskCreate>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d001      	beq.n	8002c8e <osThreadNew+0x11a>
            hTask = NULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c8e:	693b      	ldr	r3, [r7, #16]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3728      	adds	r7, #40	@ 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ca0:	f3ef 8305 	mrs	r3, IPSR
 8002ca4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ca6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <osDelay+0x1c>
    stat = osErrorISR;
 8002cac:	f06f 0305 	mvn.w	r3, #5
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	e007      	b.n	8002cc4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 ffca 	bl	8003c58 <vTaskDelay>
    }
  }

  return (stat);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4a07      	ldr	r2, [pc, #28]	@ (8002cfc <vApplicationGetIdleTaskMemory+0x2c>)
 8002ce0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	4a06      	ldr	r2, [pc, #24]	@ (8002d00 <vApplicationGetIdleTaskMemory+0x30>)
 8002ce6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2280      	movs	r2, #128	@ 0x80
 8002cec:	601a      	str	r2, [r3, #0]
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000088 	.word	0x20000088
 8002d00:	200000e4 	.word	0x200000e4

08002d04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4a07      	ldr	r2, [pc, #28]	@ (8002d30 <vApplicationGetTimerTaskMemory+0x2c>)
 8002d14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	4a06      	ldr	r2, [pc, #24]	@ (8002d34 <vApplicationGetTimerTaskMemory+0x30>)
 8002d1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d22:	601a      	str	r2, [r3, #0]
}
 8002d24:	bf00      	nop
 8002d26:	3714      	adds	r7, #20
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	200002e4 	.word	0x200002e4
 8002d34:	20000340 	.word	0x20000340

08002d38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f103 0208 	add.w	r2, r3, #8
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f103 0208 	add.w	r2, r3, #8
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f103 0208 	add.w	r2, r3, #8
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	601a      	str	r2, [r3, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b085      	sub	sp, #20
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df0:	d103      	bne.n	8002dfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	e00c      	b.n	8002e14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3308      	adds	r3, #8
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	e002      	b.n	8002e08 <vListInsert+0x2e>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d2f6      	bcs.n	8002e02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	601a      	str	r2, [r3, #0]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6892      	ldr	r2, [r2, #8]
 8002e62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6852      	ldr	r2, [r2, #4]
 8002e6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d103      	bne.n	8002e80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	1e5a      	subs	r2, r3, #1
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10b      	bne.n	8002ecc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002ecc:	f002 f8b4 	bl	8005038 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed8:	68f9      	ldr	r1, [r7, #12]
 8002eda:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002edc:	fb01 f303 	mul.w	r3, r1, r3
 8002ee0:	441a      	add	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efc:	3b01      	subs	r3, #1
 8002efe:	68f9      	ldr	r1, [r7, #12]
 8002f00:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f02:	fb01 f303 	mul.w	r3, r1, r3
 8002f06:	441a      	add	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	22ff      	movs	r2, #255	@ 0xff
 8002f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	22ff      	movs	r2, #255	@ 0xff
 8002f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d114      	bne.n	8002f4c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01a      	beq.n	8002f60 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3310      	adds	r3, #16
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 f956 	bl	80041e0 <xTaskRemoveFromEventList>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d012      	beq.n	8002f60 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f70 <xQueueGenericReset+0xd0>)
 8002f3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	e009      	b.n	8002f60 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3310      	adds	r3, #16
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fef1 	bl	8002d38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	3324      	adds	r3, #36	@ 0x24
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff feec 	bl	8002d38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002f60:	f002 f89c 	bl	800509c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002f64:	2301      	movs	r3, #1
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	e000ed04 	.word	0xe000ed04

08002f74 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b08e      	sub	sp, #56	@ 0x38
 8002f78:	af02      	add	r7, sp, #8
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10b      	bne.n	8002fa0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f9a:	bf00      	nop
 8002f9c:	bf00      	nop
 8002f9e:	e7fd      	b.n	8002f9c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10b      	bne.n	8002fbe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	e7fd      	b.n	8002fba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d002      	beq.n	8002fca <xQueueGenericCreateStatic+0x56>
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <xQueueGenericCreateStatic+0x5a>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <xQueueGenericCreateStatic+0x5c>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10b      	bne.n	8002fec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	623b      	str	r3, [r7, #32]
}
 8002fe6:	bf00      	nop
 8002fe8:	bf00      	nop
 8002fea:	e7fd      	b.n	8002fe8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <xQueueGenericCreateStatic+0x84>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <xQueueGenericCreateStatic+0x88>
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e000      	b.n	8002ffe <xQueueGenericCreateStatic+0x8a>
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10b      	bne.n	800301a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003006:	f383 8811 	msr	BASEPRI, r3
 800300a:	f3bf 8f6f 	isb	sy
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	61fb      	str	r3, [r7, #28]
}
 8003014:	bf00      	nop
 8003016:	bf00      	nop
 8003018:	e7fd      	b.n	8003016 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800301a:	2350      	movs	r3, #80	@ 0x50
 800301c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	2b50      	cmp	r3, #80	@ 0x50
 8003022:	d00b      	beq.n	800303c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	61bb      	str	r3, [r7, #24]
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800303c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00d      	beq.n	8003064 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003050:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	4613      	mov	r3, r2
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f840 	bl	80030e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003066:	4618      	mov	r0, r3
 8003068:	3730      	adds	r7, #48	@ 0x30
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800306e:	b580      	push	{r7, lr}
 8003070:	b08a      	sub	sp, #40	@ 0x28
 8003072:	af02      	add	r7, sp, #8
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	4613      	mov	r3, r2
 800307a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10b      	bne.n	800309a <xQueueGenericCreate+0x2c>
	__asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003086:	f383 8811 	msr	BASEPRI, r3
 800308a:	f3bf 8f6f 	isb	sy
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	613b      	str	r3, [r7, #16]
}
 8003094:	bf00      	nop
 8003096:	bf00      	nop
 8003098:	e7fd      	b.n	8003096 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	68ba      	ldr	r2, [r7, #8]
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	3350      	adds	r3, #80	@ 0x50
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 f8e7 	bl	800527c <pvPortMalloc>
 80030ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d011      	beq.n	80030da <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	3350      	adds	r3, #80	@ 0x50
 80030be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030c8:	79fa      	ldrb	r2, [r7, #7]
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	4613      	mov	r3, r2
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f805 	bl	80030e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030da:	69bb      	ldr	r3, [r7, #24]
	}
 80030dc:	4618      	mov	r0, r3
 80030de:	3720      	adds	r7, #32
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d103      	bne.n	8003100 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	e002      	b.n	8003106 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003112:	2101      	movs	r1, #1
 8003114:	69b8      	ldr	r0, [r7, #24]
 8003116:	f7ff fec3 	bl	8002ea0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003122:	bf00      	nop
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08e      	sub	sp, #56	@ 0x38
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800313a:	2300      	movs	r3, #0
 800313c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <xQueueGenericSend+0x34>
	__asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800315a:	bf00      	nop
 800315c:	bf00      	nop
 800315e:	e7fd      	b.n	800315c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <xQueueGenericSend+0x42>
 8003166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <xQueueGenericSend+0x46>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <xQueueGenericSend+0x48>
 8003172:	2300      	movs	r3, #0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <xQueueGenericSend+0x64>
	__asm volatile
 8003178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800317c:	f383 8811 	msr	BASEPRI, r3
 8003180:	f3bf 8f6f 	isb	sy
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800318a:	bf00      	nop
 800318c:	bf00      	nop
 800318e:	e7fd      	b.n	800318c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d103      	bne.n	800319e <xQueueGenericSend+0x72>
 8003196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800319a:	2b01      	cmp	r3, #1
 800319c:	d101      	bne.n	80031a2 <xQueueGenericSend+0x76>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <xQueueGenericSend+0x78>
 80031a2:	2300      	movs	r3, #0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <xQueueGenericSend+0x94>
	__asm volatile
 80031a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	623b      	str	r3, [r7, #32]
}
 80031ba:	bf00      	nop
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031c0:	f001 f9ce 	bl	8004560 <xTaskGetSchedulerState>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <xQueueGenericSend+0xa4>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <xQueueGenericSend+0xa8>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <xQueueGenericSend+0xaa>
 80031d4:	2300      	movs	r3, #0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10b      	bne.n	80031f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	61fb      	str	r3, [r7, #28]
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	e7fd      	b.n	80031ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031f2:	f001 ff21 	bl	8005038 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fe:	429a      	cmp	r2, r3
 8003200:	d302      	bcc.n	8003208 <xQueueGenericSend+0xdc>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d129      	bne.n	800325c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800320e:	f000 fa0f 	bl	8003630 <prvCopyDataToQueue>
 8003212:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	2b00      	cmp	r3, #0
 800321a:	d010      	beq.n	800323e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800321c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321e:	3324      	adds	r3, #36	@ 0x24
 8003220:	4618      	mov	r0, r3
 8003222:	f000 ffdd 	bl	80041e0 <xTaskRemoveFromEventList>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d013      	beq.n	8003254 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800322c:	4b3f      	ldr	r3, [pc, #252]	@ (800332c <xQueueGenericSend+0x200>)
 800322e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	e00a      	b.n	8003254 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800323e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d007      	beq.n	8003254 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003244:	4b39      	ldr	r3, [pc, #228]	@ (800332c <xQueueGenericSend+0x200>)
 8003246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003254:	f001 ff22 	bl	800509c <vPortExitCritical>
				return pdPASS;
 8003258:	2301      	movs	r3, #1
 800325a:	e063      	b.n	8003324 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d103      	bne.n	800326a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003262:	f001 ff1b 	bl	800509c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003266:	2300      	movs	r3, #0
 8003268:	e05c      	b.n	8003324 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800326a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800326c:	2b00      	cmp	r3, #0
 800326e:	d106      	bne.n	800327e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003270:	f107 0314 	add.w	r3, r7, #20
 8003274:	4618      	mov	r0, r3
 8003276:	f001 f817 	bl	80042a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800327a:	2301      	movs	r3, #1
 800327c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800327e:	f001 ff0d 	bl	800509c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003282:	f000 fd87 	bl	8003d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003286:	f001 fed7 	bl	8005038 <vPortEnterCritical>
 800328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003290:	b25b      	sxtb	r3, r3
 8003292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003296:	d103      	bne.n	80032a0 <xQueueGenericSend+0x174>
 8003298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032a6:	b25b      	sxtb	r3, r3
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d103      	bne.n	80032b6 <xQueueGenericSend+0x18a>
 80032ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032b6:	f001 fef1 	bl	800509c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032ba:	1d3a      	adds	r2, r7, #4
 80032bc:	f107 0314 	add.w	r3, r7, #20
 80032c0:	4611      	mov	r1, r2
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 f806 	bl	80042d4 <xTaskCheckForTimeOut>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d124      	bne.n	8003318 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032d0:	f000 faa6 	bl	8003820 <prvIsQueueFull>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d018      	beq.n	800330c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032dc:	3310      	adds	r3, #16
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4611      	mov	r1, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 ff2a 	bl	800413c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80032e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032ea:	f000 fa31 	bl	8003750 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80032ee:	f000 fd5f 	bl	8003db0 <xTaskResumeAll>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f47f af7c 	bne.w	80031f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80032fa:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <xQueueGenericSend+0x200>)
 80032fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	e772      	b.n	80031f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800330c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800330e:	f000 fa1f 	bl	8003750 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003312:	f000 fd4d 	bl	8003db0 <xTaskResumeAll>
 8003316:	e76c      	b.n	80031f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003318:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800331a:	f000 fa19 	bl	8003750 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800331e:	f000 fd47 	bl	8003db0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003322:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003324:	4618      	mov	r0, r3
 8003326:	3738      	adds	r7, #56	@ 0x38
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	e000ed04 	.word	0xe000ed04

08003330 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b090      	sub	sp, #64	@ 0x40
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10b      	bne.n	8003360 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800335a:	bf00      	nop
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d103      	bne.n	800336e <xQueueGenericSendFromISR+0x3e>
 8003366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <xQueueGenericSendFromISR+0x42>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <xQueueGenericSendFromISR+0x44>
 8003372:	2300      	movs	r3, #0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800338a:	bf00      	nop
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d103      	bne.n	800339e <xQueueGenericSendFromISR+0x6e>
 8003396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <xQueueGenericSendFromISR+0x72>
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <xQueueGenericSendFromISR+0x74>
 80033a2:	2300      	movs	r3, #0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10b      	bne.n	80033c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	623b      	str	r3, [r7, #32]
}
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
 80033be:	e7fd      	b.n	80033bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033c0:	f001 ff1a 	bl	80051f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033c4:	f3ef 8211 	mrs	r2, BASEPRI
 80033c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	61fa      	str	r2, [r7, #28]
 80033da:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80033dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80033de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80033e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d302      	bcc.n	80033f2 <xQueueGenericSendFromISR+0xc2>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d12f      	bne.n	8003452 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80033f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003400:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003402:	683a      	ldr	r2, [r7, #0]
 8003404:	68b9      	ldr	r1, [r7, #8]
 8003406:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003408:	f000 f912 	bl	8003630 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800340c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003414:	d112      	bne.n	800343c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d016      	beq.n	800344c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800341e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003420:	3324      	adds	r3, #36	@ 0x24
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fedc 	bl	80041e0 <xTaskRemoveFromEventList>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00e      	beq.n	800344c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00b      	beq.n	800344c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	e007      	b.n	800344c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800343c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003440:	3301      	adds	r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	b25a      	sxtb	r2, r3
 8003446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800344c:	2301      	movs	r3, #1
 800344e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003450:	e001      	b.n	8003456 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003452:	2300      	movs	r3, #0
 8003454:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003458:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003460:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003462:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003464:	4618      	mov	r0, r3
 8003466:	3740      	adds	r7, #64	@ 0x40
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08c      	sub	sp, #48	@ 0x30
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003478:	2300      	movs	r3, #0
 800347a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10b      	bne.n	800349e <xQueueReceive+0x32>
	__asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348a:	f383 8811 	msr	BASEPRI, r3
 800348e:	f3bf 8f6f 	isb	sy
 8003492:	f3bf 8f4f 	dsb	sy
 8003496:	623b      	str	r3, [r7, #32]
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	e7fd      	b.n	800349a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d103      	bne.n	80034ac <xQueueReceive+0x40>
 80034a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <xQueueReceive+0x44>
 80034ac:	2301      	movs	r3, #1
 80034ae:	e000      	b.n	80034b2 <xQueueReceive+0x46>
 80034b0:	2300      	movs	r3, #0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <xQueueReceive+0x62>
	__asm volatile
 80034b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ba:	f383 8811 	msr	BASEPRI, r3
 80034be:	f3bf 8f6f 	isb	sy
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	61fb      	str	r3, [r7, #28]
}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	e7fd      	b.n	80034ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034ce:	f001 f847 	bl	8004560 <xTaskGetSchedulerState>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <xQueueReceive+0x72>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <xQueueReceive+0x76>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <xQueueReceive+0x78>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10b      	bne.n	8003500 <xQueueReceive+0x94>
	__asm volatile
 80034e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	61bb      	str	r3, [r7, #24]
}
 80034fa:	bf00      	nop
 80034fc:	bf00      	nop
 80034fe:	e7fd      	b.n	80034fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003500:	f001 fd9a 	bl	8005038 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003508:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800350a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01f      	beq.n	8003550 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003514:	f000 f8f6 	bl	8003704 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	1e5a      	subs	r2, r3, #1
 800351c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800351e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00f      	beq.n	8003548 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352a:	3310      	adds	r3, #16
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fe57 	bl	80041e0 <xTaskRemoveFromEventList>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003538:	4b3c      	ldr	r3, [pc, #240]	@ (800362c <xQueueReceive+0x1c0>)
 800353a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003548:	f001 fda8 	bl	800509c <vPortExitCritical>
				return pdPASS;
 800354c:	2301      	movs	r3, #1
 800354e:	e069      	b.n	8003624 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003556:	f001 fda1 	bl	800509c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800355a:	2300      	movs	r3, #0
 800355c:	e062      	b.n	8003624 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d106      	bne.n	8003572 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003564:	f107 0310 	add.w	r3, r7, #16
 8003568:	4618      	mov	r0, r3
 800356a:	f000 fe9d 	bl	80042a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800356e:	2301      	movs	r3, #1
 8003570:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003572:	f001 fd93 	bl	800509c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003576:	f000 fc0d 	bl	8003d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800357a:	f001 fd5d 	bl	8005038 <vPortEnterCritical>
 800357e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003580:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003584:	b25b      	sxtb	r3, r3
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358a:	d103      	bne.n	8003594 <xQueueReceive+0x128>
 800358c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003596:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800359a:	b25b      	sxtb	r3, r3
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d103      	bne.n	80035aa <xQueueReceive+0x13e>
 80035a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035aa:	f001 fd77 	bl	800509c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035ae:	1d3a      	adds	r2, r7, #4
 80035b0:	f107 0310 	add.w	r3, r7, #16
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fe8c 	bl	80042d4 <xTaskCheckForTimeOut>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d123      	bne.n	800360a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035c4:	f000 f916 	bl	80037f4 <prvIsQueueEmpty>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d017      	beq.n	80035fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80035ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d0:	3324      	adds	r3, #36	@ 0x24
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 fdb0 	bl	800413c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80035dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035de:	f000 f8b7 	bl	8003750 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80035e2:	f000 fbe5 	bl	8003db0 <xTaskResumeAll>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d189      	bne.n	8003500 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80035ec:	4b0f      	ldr	r3, [pc, #60]	@ (800362c <xQueueReceive+0x1c0>)
 80035ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	f3bf 8f6f 	isb	sy
 80035fc:	e780      	b.n	8003500 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80035fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003600:	f000 f8a6 	bl	8003750 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003604:	f000 fbd4 	bl	8003db0 <xTaskResumeAll>
 8003608:	e77a      	b.n	8003500 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800360a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800360c:	f000 f8a0 	bl	8003750 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003610:	f000 fbce 	bl	8003db0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003614:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003616:	f000 f8ed 	bl	80037f4 <prvIsQueueEmpty>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	f43f af6f 	beq.w	8003500 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003622:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003624:	4618      	mov	r0, r3
 8003626:	3730      	adds	r7, #48	@ 0x30
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	e000ed04 	.word	0xe000ed04

08003630 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003644:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10d      	bne.n	800366a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d14d      	bne.n	80036f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	4618      	mov	r0, r3
 800365c:	f000 ff9e 	bl	800459c <xTaskPriorityDisinherit>
 8003660:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	e043      	b.n	80036f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d119      	bne.n	80036a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6858      	ldr	r0, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	461a      	mov	r2, r3
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	f002 f818 	bl	80056b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	441a      	add	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	429a      	cmp	r2, r3
 8003698:	d32b      	bcc.n	80036f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	605a      	str	r2, [r3, #4]
 80036a2:	e026      	b.n	80036f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	68d8      	ldr	r0, [r3, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	461a      	mov	r2, r3
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	f001 fffe 	bl	80056b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036bc:	425b      	negs	r3, r3
 80036be:	441a      	add	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d207      	bcs.n	80036e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	425b      	negs	r3, r3
 80036da:	441a      	add	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d105      	bne.n	80036f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d002      	beq.n	80036f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1c5a      	adds	r2, r3, #1
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80036fa:	697b      	ldr	r3, [r7, #20]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d018      	beq.n	8003748 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68da      	ldr	r2, [r3, #12]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	441a      	add	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	429a      	cmp	r2, r3
 800372e:	d303      	bcc.n	8003738 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68d9      	ldr	r1, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	461a      	mov	r2, r3
 8003742:	6838      	ldr	r0, [r7, #0]
 8003744:	f001 ffb4 	bl	80056b0 <memcpy>
	}
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003758:	f001 fc6e 	bl	8005038 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003762:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003764:	e011      	b.n	800378a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376a:	2b00      	cmp	r3, #0
 800376c:	d012      	beq.n	8003794 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	3324      	adds	r3, #36	@ 0x24
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fd34 	bl	80041e0 <xTaskRemoveFromEventList>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800377e:	f000 fe0d 	bl	800439c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	3b01      	subs	r3, #1
 8003786:	b2db      	uxtb	r3, r3
 8003788:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800378a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800378e:	2b00      	cmp	r3, #0
 8003790:	dce9      	bgt.n	8003766 <prvUnlockQueue+0x16>
 8003792:	e000      	b.n	8003796 <prvUnlockQueue+0x46>
					break;
 8003794:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	22ff      	movs	r2, #255	@ 0xff
 800379a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800379e:	f001 fc7d 	bl	800509c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037a2:	f001 fc49 	bl	8005038 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ae:	e011      	b.n	80037d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d012      	beq.n	80037de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3310      	adds	r3, #16
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fd0f 	bl	80041e0 <xTaskRemoveFromEventList>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037c8:	f000 fde8 	bl	800439c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037cc:	7bbb      	ldrb	r3, [r7, #14]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	dce9      	bgt.n	80037b0 <prvUnlockQueue+0x60>
 80037dc:	e000      	b.n	80037e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	22ff      	movs	r2, #255	@ 0xff
 80037e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80037e8:	f001 fc58 	bl	800509c <vPortExitCritical>
}
 80037ec:	bf00      	nop
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037fc:	f001 fc1c 	bl	8005038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003804:	2b00      	cmp	r3, #0
 8003806:	d102      	bne.n	800380e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003808:	2301      	movs	r3, #1
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	e001      	b.n	8003812 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003812:	f001 fc43 	bl	800509c <vPortExitCritical>

	return xReturn;
 8003816:	68fb      	ldr	r3, [r7, #12]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003828:	f001 fc06 	bl	8005038 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003834:	429a      	cmp	r2, r3
 8003836:	d102      	bne.n	800383e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003838:	2301      	movs	r3, #1
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e001      	b.n	8003842 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003842:	f001 fc2b 	bl	800509c <vPortExitCritical>

	return xReturn;
 8003846:	68fb      	ldr	r3, [r7, #12]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800385a:	2300      	movs	r3, #0
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	e014      	b.n	800388a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003860:	4a0f      	ldr	r2, [pc, #60]	@ (80038a0 <vQueueAddToRegistry+0x50>)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800386c:	490c      	ldr	r1, [pc, #48]	@ (80038a0 <vQueueAddToRegistry+0x50>)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003876:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <vQueueAddToRegistry+0x50>)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003882:	e006      	b.n	8003892 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	3301      	adds	r3, #1
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b07      	cmp	r3, #7
 800388e:	d9e7      	bls.n	8003860 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20000740 	.word	0x20000740

080038a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038b4:	f001 fbc0 	bl	8005038 <vPortEnterCritical>
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038be:	b25b      	sxtb	r3, r3
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d103      	bne.n	80038ce <vQueueWaitForMessageRestricted+0x2a>
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038d4:	b25b      	sxtb	r3, r3
 80038d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038da:	d103      	bne.n	80038e4 <vQueueWaitForMessageRestricted+0x40>
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038e4:	f001 fbda 	bl	800509c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d106      	bne.n	80038fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	3324      	adds	r3, #36	@ 0x24
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fc45 	bl	8004188 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80038fe:	6978      	ldr	r0, [r7, #20]
 8003900:	f7ff ff26 	bl	8003750 <prvUnlockQueue>
	}
 8003904:	bf00      	nop
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08e      	sub	sp, #56	@ 0x38
 8003910:	af04      	add	r7, sp, #16
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800391a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10b      	bne.n	8003938 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	623b      	str	r3, [r7, #32]
}
 8003932:	bf00      	nop
 8003934:	bf00      	nop
 8003936:	e7fd      	b.n	8003934 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10b      	bne.n	8003956 <xTaskCreateStatic+0x4a>
	__asm volatile
 800393e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	61fb      	str	r3, [r7, #28]
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	e7fd      	b.n	8003952 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003956:	235c      	movs	r3, #92	@ 0x5c
 8003958:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b5c      	cmp	r3, #92	@ 0x5c
 800395e:	d00b      	beq.n	8003978 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003964:	f383 8811 	msr	BASEPRI, r3
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	f3bf 8f4f 	dsb	sy
 8003970:	61bb      	str	r3, [r7, #24]
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	e7fd      	b.n	8003974 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003978:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800397a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01e      	beq.n	80039be <xTaskCreateStatic+0xb2>
 8003980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003982:	2b00      	cmp	r3, #0
 8003984:	d01b      	beq.n	80039be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003988:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800398a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800398e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003992:	2202      	movs	r2, #2
 8003994:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003998:	2300      	movs	r3, #0
 800399a:	9303      	str	r3, [sp, #12]
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	9302      	str	r3, [sp, #8]
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	68b9      	ldr	r1, [r7, #8]
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 f850 	bl	8003a56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039b8:	f000 f8de 	bl	8003b78 <prvAddNewTaskToReadyList>
 80039bc:	e001      	b.n	80039c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039c2:	697b      	ldr	r3, [r7, #20]
	}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3728      	adds	r7, #40	@ 0x28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08c      	sub	sp, #48	@ 0x30
 80039d0:	af04      	add	r7, sp, #16
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	4613      	mov	r3, r2
 80039da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 fc4b 	bl	800527c <pvPortMalloc>
 80039e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00e      	beq.n	8003a0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039ee:	205c      	movs	r0, #92	@ 0x5c
 80039f0:	f001 fc44 	bl	800527c <pvPortMalloc>
 80039f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a02:	e005      	b.n	8003a10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a04:	6978      	ldr	r0, [r7, #20]
 8003a06:	f001 fd07 	bl	8005418 <vPortFree>
 8003a0a:	e001      	b.n	8003a10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d017      	beq.n	8003a46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	2300      	movs	r3, #0
 8003a22:	9303      	str	r3, [sp, #12]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	9302      	str	r3, [sp, #8]
 8003a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f80e 	bl	8003a56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a3a:	69f8      	ldr	r0, [r7, #28]
 8003a3c:	f000 f89c 	bl	8003b78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a40:	2301      	movs	r3, #1
 8003a42:	61bb      	str	r3, [r7, #24]
 8003a44:	e002      	b.n	8003a4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a4c:	69bb      	ldr	r3, [r7, #24]
	}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3720      	adds	r7, #32
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b088      	sub	sp, #32
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	21a5      	movs	r1, #165	@ 0xa5
 8003a70:	f001 fdf2 	bl	8005658 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f023 0307 	bic.w	r3, r3, #7
 8003a8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00b      	beq.n	8003ab0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	617b      	str	r3, [r7, #20]
}
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01f      	beq.n	8003af6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	e012      	b.n	8003ae2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	7819      	ldrb	r1, [r3, #0]
 8003ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	3334      	adds	r3, #52	@ 0x34
 8003acc:	460a      	mov	r2, r1
 8003ace:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d006      	beq.n	8003aea <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	2b0f      	cmp	r3, #15
 8003ae6:	d9e9      	bls.n	8003abc <prvInitialiseNewTask+0x66>
 8003ae8:	e000      	b.n	8003aec <prvInitialiseNewTask+0x96>
			{
				break;
 8003aea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003af4:	e003      	b.n	8003afe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	2b37      	cmp	r3, #55	@ 0x37
 8003b02:	d901      	bls.n	8003b08 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b04:	2337      	movs	r3, #55	@ 0x37
 8003b06:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b12:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b16:	2200      	movs	r2, #0
 8003b18:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff f92a 	bl	8002d78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	3318      	adds	r3, #24
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7ff f925 	bl	8002d78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b42:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b46:	2200      	movs	r2, #0
 8003b48:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	68f9      	ldr	r1, [r7, #12]
 8003b56:	69b8      	ldr	r0, [r7, #24]
 8003b58:	f001 f93e 	bl	8004dd8 <pxPortInitialiseStack>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b6e:	bf00      	nop
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b80:	f001 fa5a 	bl	8005038 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b84:	4b2d      	ldr	r3, [pc, #180]	@ (8003c3c <prvAddNewTaskToReadyList+0xc4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8003c3c <prvAddNewTaskToReadyList+0xc4>)
 8003b8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8003c40 <prvAddNewTaskToReadyList+0xc8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b96:	4a2a      	ldr	r2, [pc, #168]	@ (8003c40 <prvAddNewTaskToReadyList+0xc8>)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b9c:	4b27      	ldr	r3, [pc, #156]	@ (8003c3c <prvAddNewTaskToReadyList+0xc4>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d110      	bne.n	8003bc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ba4:	f000 fc1e 	bl	80043e4 <prvInitialiseTaskLists>
 8003ba8:	e00d      	b.n	8003bc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003baa:	4b26      	ldr	r3, [pc, #152]	@ (8003c44 <prvAddNewTaskToReadyList+0xcc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bb2:	4b23      	ldr	r3, [pc, #140]	@ (8003c40 <prvAddNewTaskToReadyList+0xc8>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d802      	bhi.n	8003bc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c40 <prvAddNewTaskToReadyList+0xc8>)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bc6:	4b20      	ldr	r3, [pc, #128]	@ (8003c48 <prvAddNewTaskToReadyList+0xd0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8003c48 <prvAddNewTaskToReadyList+0xd0>)
 8003bce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8003c48 <prvAddNewTaskToReadyList+0xd0>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c4c <prvAddNewTaskToReadyList+0xd4>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d903      	bls.n	8003bec <prvAddNewTaskToReadyList+0x74>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be8:	4a18      	ldr	r2, [pc, #96]	@ (8003c4c <prvAddNewTaskToReadyList+0xd4>)
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4a15      	ldr	r2, [pc, #84]	@ (8003c50 <prvAddNewTaskToReadyList+0xd8>)
 8003bfa:	441a      	add	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4619      	mov	r1, r3
 8003c02:	4610      	mov	r0, r2
 8003c04:	f7ff f8c5 	bl	8002d92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c08:	f001 fa48 	bl	800509c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c44 <prvAddNewTaskToReadyList+0xcc>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00e      	beq.n	8003c32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c14:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <prvAddNewTaskToReadyList+0xc8>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d207      	bcs.n	8003c32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c22:	4b0c      	ldr	r3, [pc, #48]	@ (8003c54 <prvAddNewTaskToReadyList+0xdc>)
 8003c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c32:	bf00      	nop
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000c54 	.word	0x20000c54
 8003c40:	20000780 	.word	0x20000780
 8003c44:	20000c60 	.word	0x20000c60
 8003c48:	20000c70 	.word	0x20000c70
 8003c4c:	20000c5c 	.word	0x20000c5c
 8003c50:	20000784 	.word	0x20000784
 8003c54:	e000ed04 	.word	0xe000ed04

08003c58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d018      	beq.n	8003c9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c6a:	4b14      	ldr	r3, [pc, #80]	@ (8003cbc <vTaskDelay+0x64>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00b      	beq.n	8003c8a <vTaskDelay+0x32>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	60bb      	str	r3, [r7, #8]
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	e7fd      	b.n	8003c86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c8a:	f000 f883 	bl	8003d94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c8e:	2100      	movs	r1, #0
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fcf3 	bl	800467c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c96:	f000 f88b 	bl	8003db0 <xTaskResumeAll>
 8003c9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d107      	bne.n	8003cb2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003ca2:	4b07      	ldr	r3, [pc, #28]	@ (8003cc0 <vTaskDelay+0x68>)
 8003ca4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000c7c 	.word	0x20000c7c
 8003cc0:	e000ed04 	.word	0xe000ed04

08003cc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b08a      	sub	sp, #40	@ 0x28
 8003cc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cd2:	463a      	mov	r2, r7
 8003cd4:	1d39      	adds	r1, r7, #4
 8003cd6:	f107 0308 	add.w	r3, r7, #8
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fff8 	bl	8002cd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ce0:	6839      	ldr	r1, [r7, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	9202      	str	r2, [sp, #8]
 8003ce8:	9301      	str	r3, [sp, #4]
 8003cea:	2300      	movs	r3, #0
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	2300      	movs	r3, #0
 8003cf0:	460a      	mov	r2, r1
 8003cf2:	4922      	ldr	r1, [pc, #136]	@ (8003d7c <vTaskStartScheduler+0xb8>)
 8003cf4:	4822      	ldr	r0, [pc, #136]	@ (8003d80 <vTaskStartScheduler+0xbc>)
 8003cf6:	f7ff fe09 	bl	800390c <xTaskCreateStatic>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4a21      	ldr	r2, [pc, #132]	@ (8003d84 <vTaskStartScheduler+0xc0>)
 8003cfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d00:	4b20      	ldr	r3, [pc, #128]	@ (8003d84 <vTaskStartScheduler+0xc0>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	617b      	str	r3, [r7, #20]
 8003d0c:	e001      	b.n	8003d12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d102      	bne.n	8003d1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d18:	f000 fd04 	bl	8004724 <xTimerCreateTimerTask>
 8003d1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d116      	bne.n	8003d52 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	613b      	str	r3, [r7, #16]
}
 8003d36:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d38:	4b13      	ldr	r3, [pc, #76]	@ (8003d88 <vTaskStartScheduler+0xc4>)
 8003d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d40:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <vTaskStartScheduler+0xc8>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d46:	4b12      	ldr	r3, [pc, #72]	@ (8003d90 <vTaskStartScheduler+0xcc>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d4c:	f001 f8d0 	bl	8004ef0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d50:	e00f      	b.n	8003d72 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d10b      	bne.n	8003d72 <vTaskStartScheduler+0xae>
	__asm volatile
 8003d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	60fb      	str	r3, [r7, #12]
}
 8003d6c:	bf00      	nop
 8003d6e:	bf00      	nop
 8003d70:	e7fd      	b.n	8003d6e <vTaskStartScheduler+0xaa>
}
 8003d72:	bf00      	nop
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	08005728 	.word	0x08005728
 8003d80:	080043b5 	.word	0x080043b5
 8003d84:	20000c78 	.word	0x20000c78
 8003d88:	20000c74 	.word	0x20000c74
 8003d8c:	20000c60 	.word	0x20000c60
 8003d90:	20000c58 	.word	0x20000c58

08003d94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003d98:	4b04      	ldr	r3, [pc, #16]	@ (8003dac <vTaskSuspendAll+0x18>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	4a03      	ldr	r2, [pc, #12]	@ (8003dac <vTaskSuspendAll+0x18>)
 8003da0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003da2:	bf00      	nop
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	20000c7c 	.word	0x20000c7c

08003db0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dbe:	4b42      	ldr	r3, [pc, #264]	@ (8003ec8 <xTaskResumeAll+0x118>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <xTaskResumeAll+0x2e>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	603b      	str	r3, [r7, #0]
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	e7fd      	b.n	8003dda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dde:	f001 f92b 	bl	8005038 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003de2:	4b39      	ldr	r3, [pc, #228]	@ (8003ec8 <xTaskResumeAll+0x118>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3b01      	subs	r3, #1
 8003de8:	4a37      	ldr	r2, [pc, #220]	@ (8003ec8 <xTaskResumeAll+0x118>)
 8003dea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dec:	4b36      	ldr	r3, [pc, #216]	@ (8003ec8 <xTaskResumeAll+0x118>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d162      	bne.n	8003eba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003df4:	4b35      	ldr	r3, [pc, #212]	@ (8003ecc <xTaskResumeAll+0x11c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d05e      	beq.n	8003eba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dfc:	e02f      	b.n	8003e5e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dfe:	4b34      	ldr	r3, [pc, #208]	@ (8003ed0 <xTaskResumeAll+0x120>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3318      	adds	r3, #24
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff f81e 	bl	8002e4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3304      	adds	r3, #4
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff f819 	bl	8002e4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed4 <xTaskResumeAll+0x124>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d903      	bls.n	8003e2e <xTaskResumeAll+0x7e>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ed4 <xTaskResumeAll+0x124>)
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e32:	4613      	mov	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4a27      	ldr	r2, [pc, #156]	@ (8003ed8 <xTaskResumeAll+0x128>)
 8003e3c:	441a      	add	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4619      	mov	r1, r3
 8003e44:	4610      	mov	r0, r2
 8003e46:	f7fe ffa4 	bl	8002d92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4e:	4b23      	ldr	r3, [pc, #140]	@ (8003edc <xTaskResumeAll+0x12c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d302      	bcc.n	8003e5e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003e58:	4b21      	ldr	r3, [pc, #132]	@ (8003ee0 <xTaskResumeAll+0x130>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ed0 <xTaskResumeAll+0x120>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1cb      	bne.n	8003dfe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e6c:	f000 fb58 	bl	8004520 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003e70:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee4 <xTaskResumeAll+0x134>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d010      	beq.n	8003e9e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e7c:	f000 f846 	bl	8003f0c <xTaskIncrementTick>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003e86:	4b16      	ldr	r3, [pc, #88]	@ (8003ee0 <xTaskResumeAll+0x130>)
 8003e88:	2201      	movs	r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1f1      	bne.n	8003e7c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003e98:	4b12      	ldr	r3, [pc, #72]	@ (8003ee4 <xTaskResumeAll+0x134>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003e9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <xTaskResumeAll+0x130>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d009      	beq.n	8003eba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee8 <xTaskResumeAll+0x138>)
 8003eac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003eba:	f001 f8ef 	bl	800509c <vPortExitCritical>

	return xAlreadyYielded;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	20000c7c 	.word	0x20000c7c
 8003ecc:	20000c54 	.word	0x20000c54
 8003ed0:	20000c14 	.word	0x20000c14
 8003ed4:	20000c5c 	.word	0x20000c5c
 8003ed8:	20000784 	.word	0x20000784
 8003edc:	20000780 	.word	0x20000780
 8003ee0:	20000c68 	.word	0x20000c68
 8003ee4:	20000c64 	.word	0x20000c64
 8003ee8:	e000ed04 	.word	0xe000ed04

08003eec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003ef2:	4b05      	ldr	r3, [pc, #20]	@ (8003f08 <xTaskGetTickCount+0x1c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003ef8:	687b      	ldr	r3, [r7, #4]
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000c58 	.word	0x20000c58

08003f0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f16:	4b4f      	ldr	r3, [pc, #316]	@ (8004054 <xTaskIncrementTick+0x148>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f040 8090 	bne.w	8004040 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f20:	4b4d      	ldr	r3, [pc, #308]	@ (8004058 <xTaskIncrementTick+0x14c>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3301      	adds	r3, #1
 8003f26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f28:	4a4b      	ldr	r2, [pc, #300]	@ (8004058 <xTaskIncrementTick+0x14c>)
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d121      	bne.n	8003f78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f34:	4b49      	ldr	r3, [pc, #292]	@ (800405c <xTaskIncrementTick+0x150>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f42:	f383 8811 	msr	BASEPRI, r3
 8003f46:	f3bf 8f6f 	isb	sy
 8003f4a:	f3bf 8f4f 	dsb	sy
 8003f4e:	603b      	str	r3, [r7, #0]
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	e7fd      	b.n	8003f52 <xTaskIncrementTick+0x46>
 8003f56:	4b41      	ldr	r3, [pc, #260]	@ (800405c <xTaskIncrementTick+0x150>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	4b40      	ldr	r3, [pc, #256]	@ (8004060 <xTaskIncrementTick+0x154>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a3e      	ldr	r2, [pc, #248]	@ (800405c <xTaskIncrementTick+0x150>)
 8003f62:	6013      	str	r3, [r2, #0]
 8003f64:	4a3e      	ldr	r2, [pc, #248]	@ (8004060 <xTaskIncrementTick+0x154>)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6013      	str	r3, [r2, #0]
 8003f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8004064 <xTaskIncrementTick+0x158>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	4a3c      	ldr	r2, [pc, #240]	@ (8004064 <xTaskIncrementTick+0x158>)
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	f000 fad4 	bl	8004520 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f78:	4b3b      	ldr	r3, [pc, #236]	@ (8004068 <xTaskIncrementTick+0x15c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d349      	bcc.n	8004016 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f82:	4b36      	ldr	r3, [pc, #216]	@ (800405c <xTaskIncrementTick+0x150>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d104      	bne.n	8003f96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f8c:	4b36      	ldr	r3, [pc, #216]	@ (8004068 <xTaskIncrementTick+0x15c>)
 8003f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f92:	601a      	str	r2, [r3, #0]
					break;
 8003f94:	e03f      	b.n	8004016 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f96:	4b31      	ldr	r3, [pc, #196]	@ (800405c <xTaskIncrementTick+0x150>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d203      	bcs.n	8003fb6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fae:	4a2e      	ldr	r2, [pc, #184]	@ (8004068 <xTaskIncrementTick+0x15c>)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003fb4:	e02f      	b.n	8004016 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe ff46 	bl	8002e4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d004      	beq.n	8003fd2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	3318      	adds	r3, #24
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fe ff3d 	bl	8002e4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fd6:	4b25      	ldr	r3, [pc, #148]	@ (800406c <xTaskIncrementTick+0x160>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d903      	bls.n	8003fe6 <xTaskIncrementTick+0xda>
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe2:	4a22      	ldr	r2, [pc, #136]	@ (800406c <xTaskIncrementTick+0x160>)
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4a1f      	ldr	r2, [pc, #124]	@ (8004070 <xTaskIncrementTick+0x164>)
 8003ff4:	441a      	add	r2, r3
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	f7fe fec8 	bl	8002d92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004006:	4b1b      	ldr	r3, [pc, #108]	@ (8004074 <xTaskIncrementTick+0x168>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	429a      	cmp	r2, r3
 800400e:	d3b8      	bcc.n	8003f82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004010:	2301      	movs	r3, #1
 8004012:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004014:	e7b5      	b.n	8003f82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004016:	4b17      	ldr	r3, [pc, #92]	@ (8004074 <xTaskIncrementTick+0x168>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800401c:	4914      	ldr	r1, [pc, #80]	@ (8004070 <xTaskIncrementTick+0x164>)
 800401e:	4613      	mov	r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d901      	bls.n	8004032 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800402e:	2301      	movs	r3, #1
 8004030:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004032:	4b11      	ldr	r3, [pc, #68]	@ (8004078 <xTaskIncrementTick+0x16c>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d007      	beq.n	800404a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800403a:	2301      	movs	r3, #1
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e004      	b.n	800404a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004040:	4b0e      	ldr	r3, [pc, #56]	@ (800407c <xTaskIncrementTick+0x170>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3301      	adds	r3, #1
 8004046:	4a0d      	ldr	r2, [pc, #52]	@ (800407c <xTaskIncrementTick+0x170>)
 8004048:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800404a:	697b      	ldr	r3, [r7, #20]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	20000c7c 	.word	0x20000c7c
 8004058:	20000c58 	.word	0x20000c58
 800405c:	20000c0c 	.word	0x20000c0c
 8004060:	20000c10 	.word	0x20000c10
 8004064:	20000c6c 	.word	0x20000c6c
 8004068:	20000c74 	.word	0x20000c74
 800406c:	20000c5c 	.word	0x20000c5c
 8004070:	20000784 	.word	0x20000784
 8004074:	20000780 	.word	0x20000780
 8004078:	20000c68 	.word	0x20000c68
 800407c:	20000c64 	.word	0x20000c64

08004080 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004086:	4b28      	ldr	r3, [pc, #160]	@ (8004128 <vTaskSwitchContext+0xa8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800408e:	4b27      	ldr	r3, [pc, #156]	@ (800412c <vTaskSwitchContext+0xac>)
 8004090:	2201      	movs	r2, #1
 8004092:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004094:	e042      	b.n	800411c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004096:	4b25      	ldr	r3, [pc, #148]	@ (800412c <vTaskSwitchContext+0xac>)
 8004098:	2200      	movs	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800409c:	4b24      	ldr	r3, [pc, #144]	@ (8004130 <vTaskSwitchContext+0xb0>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	e011      	b.n	80040c8 <vTaskSwitchContext+0x48>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10b      	bne.n	80040c2 <vTaskSwitchContext+0x42>
	__asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	607b      	str	r3, [r7, #4]
}
 80040bc:	bf00      	nop
 80040be:	bf00      	nop
 80040c0:	e7fd      	b.n	80040be <vTaskSwitchContext+0x3e>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	60fb      	str	r3, [r7, #12]
 80040c8:	491a      	ldr	r1, [pc, #104]	@ (8004134 <vTaskSwitchContext+0xb4>)
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	440b      	add	r3, r1
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d0e3      	beq.n	80040a4 <vTaskSwitchContext+0x24>
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4a13      	ldr	r2, [pc, #76]	@ (8004134 <vTaskSwitchContext+0xb4>)
 80040e8:	4413      	add	r3, r2
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	685a      	ldr	r2, [r3, #4]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	3308      	adds	r3, #8
 80040fe:	429a      	cmp	r2, r3
 8004100:	d104      	bne.n	800410c <vTaskSwitchContext+0x8c>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	605a      	str	r2, [r3, #4]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	4a09      	ldr	r2, [pc, #36]	@ (8004138 <vTaskSwitchContext+0xb8>)
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	4a06      	ldr	r2, [pc, #24]	@ (8004130 <vTaskSwitchContext+0xb0>)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6013      	str	r3, [r2, #0]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	20000c7c 	.word	0x20000c7c
 800412c:	20000c68 	.word	0x20000c68
 8004130:	20000c5c 	.word	0x20000c5c
 8004134:	20000784 	.word	0x20000784
 8004138:	20000780 	.word	0x20000780

0800413c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10b      	bne.n	8004164 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	60fb      	str	r3, [r7, #12]
}
 800415e:	bf00      	nop
 8004160:	bf00      	nop
 8004162:	e7fd      	b.n	8004160 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004164:	4b07      	ldr	r3, [pc, #28]	@ (8004184 <vTaskPlaceOnEventList+0x48>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3318      	adds	r3, #24
 800416a:	4619      	mov	r1, r3
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7fe fe34 	bl	8002dda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004172:	2101      	movs	r1, #1
 8004174:	6838      	ldr	r0, [r7, #0]
 8004176:	f000 fa81 	bl	800467c <prvAddCurrentTaskToDelayedList>
}
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000780 	.word	0x20000780

08004188 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10b      	bne.n	80041b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	617b      	str	r3, [r7, #20]
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	e7fd      	b.n	80041ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041b2:	4b0a      	ldr	r3, [pc, #40]	@ (80041dc <vTaskPlaceOnEventListRestricted+0x54>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3318      	adds	r3, #24
 80041b8:	4619      	mov	r1, r3
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f7fe fde9 	bl	8002d92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80041c6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	68b8      	ldr	r0, [r7, #8]
 80041d0:	f000 fa54 	bl	800467c <prvAddCurrentTaskToDelayedList>
	}
 80041d4:	bf00      	nop
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20000780 	.word	0x20000780

080041e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	60fb      	str	r3, [r7, #12]
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	e7fd      	b.n	800420a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	3318      	adds	r3, #24
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe fe1a 	bl	8002e4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004218:	4b1d      	ldr	r3, [pc, #116]	@ (8004290 <xTaskRemoveFromEventList+0xb0>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d11d      	bne.n	800425c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	3304      	adds	r3, #4
 8004224:	4618      	mov	r0, r3
 8004226:	f7fe fe11 	bl	8002e4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800422e:	4b19      	ldr	r3, [pc, #100]	@ (8004294 <xTaskRemoveFromEventList+0xb4>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d903      	bls.n	800423e <xTaskRemoveFromEventList+0x5e>
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423a:	4a16      	ldr	r2, [pc, #88]	@ (8004294 <xTaskRemoveFromEventList+0xb4>)
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4a13      	ldr	r2, [pc, #76]	@ (8004298 <xTaskRemoveFromEventList+0xb8>)
 800424c:	441a      	add	r2, r3
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	3304      	adds	r3, #4
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f7fe fd9c 	bl	8002d92 <vListInsertEnd>
 800425a:	e005      	b.n	8004268 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	3318      	adds	r3, #24
 8004260:	4619      	mov	r1, r3
 8004262:	480e      	ldr	r0, [pc, #56]	@ (800429c <xTaskRemoveFromEventList+0xbc>)
 8004264:	f7fe fd95 	bl	8002d92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426c:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <xTaskRemoveFromEventList+0xc0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004272:	429a      	cmp	r2, r3
 8004274:	d905      	bls.n	8004282 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004276:	2301      	movs	r3, #1
 8004278:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800427a:	4b0a      	ldr	r3, [pc, #40]	@ (80042a4 <xTaskRemoveFromEventList+0xc4>)
 800427c:	2201      	movs	r2, #1
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	e001      	b.n	8004286 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004286:	697b      	ldr	r3, [r7, #20]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	20000c7c 	.word	0x20000c7c
 8004294:	20000c5c 	.word	0x20000c5c
 8004298:	20000784 	.word	0x20000784
 800429c:	20000c14 	.word	0x20000c14
 80042a0:	20000780 	.word	0x20000780
 80042a4:	20000c68 	.word	0x20000c68

080042a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042b0:	4b06      	ldr	r3, [pc, #24]	@ (80042cc <vTaskInternalSetTimeOutState+0x24>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042b8:	4b05      	ldr	r3, [pc, #20]	@ (80042d0 <vTaskInternalSetTimeOutState+0x28>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	605a      	str	r2, [r3, #4]
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	20000c6c 	.word	0x20000c6c
 80042d0:	20000c58 	.word	0x20000c58

080042d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	613b      	str	r3, [r7, #16]
}
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
 80042fa:	e7fd      	b.n	80042f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10b      	bne.n	800431a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	60fb      	str	r3, [r7, #12]
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop
 8004318:	e7fd      	b.n	8004316 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800431a:	f000 fe8d 	bl	8005038 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800431e:	4b1d      	ldr	r3, [pc, #116]	@ (8004394 <xTaskCheckForTimeOut+0xc0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004336:	d102      	bne.n	800433e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004338:	2300      	movs	r3, #0
 800433a:	61fb      	str	r3, [r7, #28]
 800433c:	e023      	b.n	8004386 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	4b15      	ldr	r3, [pc, #84]	@ (8004398 <xTaskCheckForTimeOut+0xc4>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d007      	beq.n	800435a <xTaskCheckForTimeOut+0x86>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	429a      	cmp	r2, r3
 8004352:	d302      	bcc.n	800435a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004354:	2301      	movs	r3, #1
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	e015      	b.n	8004386 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	429a      	cmp	r2, r3
 8004362:	d20b      	bcs.n	800437c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad2      	subs	r2, r2, r3
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff ff99 	bl	80042a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	e004      	b.n	8004386 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004382:	2301      	movs	r3, #1
 8004384:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004386:	f000 fe89 	bl	800509c <vPortExitCritical>

	return xReturn;
 800438a:	69fb      	ldr	r3, [r7, #28]
}
 800438c:	4618      	mov	r0, r3
 800438e:	3720      	adds	r7, #32
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	20000c58 	.word	0x20000c58
 8004398:	20000c6c 	.word	0x20000c6c

0800439c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043a0:	4b03      	ldr	r3, [pc, #12]	@ (80043b0 <vTaskMissedYield+0x14>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	601a      	str	r2, [r3, #0]
}
 80043a6:	bf00      	nop
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr
 80043b0:	20000c68 	.word	0x20000c68

080043b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043bc:	f000 f852 	bl	8004464 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043c0:	4b06      	ldr	r3, [pc, #24]	@ (80043dc <prvIdleTask+0x28>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d9f9      	bls.n	80043bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80043c8:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <prvIdleTask+0x2c>)
 80043ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ce:	601a      	str	r2, [r3, #0]
 80043d0:	f3bf 8f4f 	dsb	sy
 80043d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043d8:	e7f0      	b.n	80043bc <prvIdleTask+0x8>
 80043da:	bf00      	nop
 80043dc:	20000784 	.word	0x20000784
 80043e0:	e000ed04 	.word	0xe000ed04

080043e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043ea:	2300      	movs	r3, #0
 80043ec:	607b      	str	r3, [r7, #4]
 80043ee:	e00c      	b.n	800440a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4a12      	ldr	r2, [pc, #72]	@ (8004444 <prvInitialiseTaskLists+0x60>)
 80043fc:	4413      	add	r3, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fe fc9a 	bl	8002d38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3301      	adds	r3, #1
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b37      	cmp	r3, #55	@ 0x37
 800440e:	d9ef      	bls.n	80043f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004410:	480d      	ldr	r0, [pc, #52]	@ (8004448 <prvInitialiseTaskLists+0x64>)
 8004412:	f7fe fc91 	bl	8002d38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004416:	480d      	ldr	r0, [pc, #52]	@ (800444c <prvInitialiseTaskLists+0x68>)
 8004418:	f7fe fc8e 	bl	8002d38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800441c:	480c      	ldr	r0, [pc, #48]	@ (8004450 <prvInitialiseTaskLists+0x6c>)
 800441e:	f7fe fc8b 	bl	8002d38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004422:	480c      	ldr	r0, [pc, #48]	@ (8004454 <prvInitialiseTaskLists+0x70>)
 8004424:	f7fe fc88 	bl	8002d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004428:	480b      	ldr	r0, [pc, #44]	@ (8004458 <prvInitialiseTaskLists+0x74>)
 800442a:	f7fe fc85 	bl	8002d38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800442e:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <prvInitialiseTaskLists+0x78>)
 8004430:	4a05      	ldr	r2, [pc, #20]	@ (8004448 <prvInitialiseTaskLists+0x64>)
 8004432:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004434:	4b0a      	ldr	r3, [pc, #40]	@ (8004460 <prvInitialiseTaskLists+0x7c>)
 8004436:	4a05      	ldr	r2, [pc, #20]	@ (800444c <prvInitialiseTaskLists+0x68>)
 8004438:	601a      	str	r2, [r3, #0]
}
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	20000784 	.word	0x20000784
 8004448:	20000be4 	.word	0x20000be4
 800444c:	20000bf8 	.word	0x20000bf8
 8004450:	20000c14 	.word	0x20000c14
 8004454:	20000c28 	.word	0x20000c28
 8004458:	20000c40 	.word	0x20000c40
 800445c:	20000c0c 	.word	0x20000c0c
 8004460:	20000c10 	.word	0x20000c10

08004464 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800446a:	e019      	b.n	80044a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800446c:	f000 fde4 	bl	8005038 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004470:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <prvCheckTasksWaitingTermination+0x50>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3304      	adds	r3, #4
 800447c:	4618      	mov	r0, r3
 800447e:	f7fe fce5 	bl	8002e4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004482:	4b0d      	ldr	r3, [pc, #52]	@ (80044b8 <prvCheckTasksWaitingTermination+0x54>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	3b01      	subs	r3, #1
 8004488:	4a0b      	ldr	r2, [pc, #44]	@ (80044b8 <prvCheckTasksWaitingTermination+0x54>)
 800448a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800448c:	4b0b      	ldr	r3, [pc, #44]	@ (80044bc <prvCheckTasksWaitingTermination+0x58>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	3b01      	subs	r3, #1
 8004492:	4a0a      	ldr	r2, [pc, #40]	@ (80044bc <prvCheckTasksWaitingTermination+0x58>)
 8004494:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004496:	f000 fe01 	bl	800509c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f810 	bl	80044c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044a0:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <prvCheckTasksWaitingTermination+0x58>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e1      	bne.n	800446c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044a8:	bf00      	nop
 80044aa:	bf00      	nop
 80044ac:	3708      	adds	r7, #8
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20000c28 	.word	0x20000c28
 80044b8:	20000c54 	.word	0x20000c54
 80044bc:	20000c3c 	.word	0x20000c3c

080044c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d108      	bne.n	80044e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 ff9e 	bl	8005418 <vPortFree>
				vPortFree( pxTCB );
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 ff9b 	bl	8005418 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044e2:	e019      	b.n	8004518 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d103      	bne.n	80044f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 ff92 	bl	8005418 <vPortFree>
	}
 80044f4:	e010      	b.n	8004518 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d00b      	beq.n	8004518 <prvDeleteTCB+0x58>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	60fb      	str	r3, [r7, #12]
}
 8004512:	bf00      	nop
 8004514:	bf00      	nop
 8004516:	e7fd      	b.n	8004514 <prvDeleteTCB+0x54>
	}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004526:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <prvResetNextTaskUnblockTime+0x38>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d104      	bne.n	800453a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004530:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <prvResetNextTaskUnblockTime+0x3c>)
 8004532:	f04f 32ff 	mov.w	r2, #4294967295
 8004536:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004538:	e008      	b.n	800454c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800453a:	4b07      	ldr	r3, [pc, #28]	@ (8004558 <prvResetNextTaskUnblockTime+0x38>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4a04      	ldr	r2, [pc, #16]	@ (800455c <prvResetNextTaskUnblockTime+0x3c>)
 800454a:	6013      	str	r3, [r2, #0]
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	20000c0c 	.word	0x20000c0c
 800455c:	20000c74 	.word	0x20000c74

08004560 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004566:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <xTaskGetSchedulerState+0x34>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d102      	bne.n	8004574 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800456e:	2301      	movs	r3, #1
 8004570:	607b      	str	r3, [r7, #4]
 8004572:	e008      	b.n	8004586 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004574:	4b08      	ldr	r3, [pc, #32]	@ (8004598 <xTaskGetSchedulerState+0x38>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800457c:	2302      	movs	r3, #2
 800457e:	607b      	str	r3, [r7, #4]
 8004580:	e001      	b.n	8004586 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004582:	2300      	movs	r3, #0
 8004584:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004586:	687b      	ldr	r3, [r7, #4]
	}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	20000c60 	.word	0x20000c60
 8004598:	20000c7c 	.word	0x20000c7c

0800459c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d058      	beq.n	8004664 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004670 <xTaskPriorityDisinherit+0xd4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d00b      	beq.n	80045d4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	60fb      	str	r3, [r7, #12]
}
 80045ce:	bf00      	nop
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10b      	bne.n	80045f4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	60bb      	str	r3, [r7, #8]
}
 80045ee:	bf00      	nop
 80045f0:	bf00      	nop
 80045f2:	e7fd      	b.n	80045f0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f8:	1e5a      	subs	r2, r3, #1
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004606:	429a      	cmp	r2, r3
 8004608:	d02c      	beq.n	8004664 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800460e:	2b00      	cmp	r3, #0
 8004610:	d128      	bne.n	8004664 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	3304      	adds	r3, #4
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe fc18 	bl	8002e4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004628:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004634:	4b0f      	ldr	r3, [pc, #60]	@ (8004674 <xTaskPriorityDisinherit+0xd8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d903      	bls.n	8004644 <xTaskPriorityDisinherit+0xa8>
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004640:	4a0c      	ldr	r2, [pc, #48]	@ (8004674 <xTaskPriorityDisinherit+0xd8>)
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004648:	4613      	mov	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	4413      	add	r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4a09      	ldr	r2, [pc, #36]	@ (8004678 <xTaskPriorityDisinherit+0xdc>)
 8004652:	441a      	add	r2, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	3304      	adds	r3, #4
 8004658:	4619      	mov	r1, r3
 800465a:	4610      	mov	r0, r2
 800465c:	f7fe fb99 	bl	8002d92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004660:	2301      	movs	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004664:	697b      	ldr	r3, [r7, #20]
	}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	20000780 	.word	0x20000780
 8004674:	20000c5c 	.word	0x20000c5c
 8004678:	20000784 	.word	0x20000784

0800467c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004686:	4b21      	ldr	r3, [pc, #132]	@ (800470c <prvAddCurrentTaskToDelayedList+0x90>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800468c:	4b20      	ldr	r3, [pc, #128]	@ (8004710 <prvAddCurrentTaskToDelayedList+0x94>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	3304      	adds	r3, #4
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe fbda 	bl	8002e4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469e:	d10a      	bne.n	80046b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d007      	beq.n	80046b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004710 <prvAddCurrentTaskToDelayedList+0x94>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4819      	ldr	r0, [pc, #100]	@ (8004714 <prvAddCurrentTaskToDelayedList+0x98>)
 80046b0:	f7fe fb6f 	bl	8002d92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80046b4:	e026      	b.n	8004704 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4413      	add	r3, r2
 80046bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80046be:	4b14      	ldr	r3, [pc, #80]	@ (8004710 <prvAddCurrentTaskToDelayedList+0x94>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d209      	bcs.n	80046e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046ce:	4b12      	ldr	r3, [pc, #72]	@ (8004718 <prvAddCurrentTaskToDelayedList+0x9c>)
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004710 <prvAddCurrentTaskToDelayedList+0x94>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f7fe fb7d 	bl	8002dda <vListInsert>
}
 80046e0:	e010      	b.n	8004704 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046e2:	4b0e      	ldr	r3, [pc, #56]	@ (800471c <prvAddCurrentTaskToDelayedList+0xa0>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004710 <prvAddCurrentTaskToDelayedList+0x94>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f7fe fb73 	bl	8002dda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80046f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004720 <prvAddCurrentTaskToDelayedList+0xa4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d202      	bcs.n	8004704 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80046fe:	4a08      	ldr	r2, [pc, #32]	@ (8004720 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	6013      	str	r3, [r2, #0]
}
 8004704:	bf00      	nop
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20000c58 	.word	0x20000c58
 8004710:	20000780 	.word	0x20000780
 8004714:	20000c40 	.word	0x20000c40
 8004718:	20000c10 	.word	0x20000c10
 800471c:	20000c0c 	.word	0x20000c0c
 8004720:	20000c74 	.word	0x20000c74

08004724 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b08a      	sub	sp, #40	@ 0x28
 8004728:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800472e:	f000 fb13 	bl	8004d58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004732:	4b1d      	ldr	r3, [pc, #116]	@ (80047a8 <xTimerCreateTimerTask+0x84>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d021      	beq.n	800477e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004742:	1d3a      	adds	r2, r7, #4
 8004744:	f107 0108 	add.w	r1, r7, #8
 8004748:	f107 030c 	add.w	r3, r7, #12
 800474c:	4618      	mov	r0, r3
 800474e:	f7fe fad9 	bl	8002d04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	9202      	str	r2, [sp, #8]
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	2302      	movs	r3, #2
 800475e:	9300      	str	r3, [sp, #0]
 8004760:	2300      	movs	r3, #0
 8004762:	460a      	mov	r2, r1
 8004764:	4911      	ldr	r1, [pc, #68]	@ (80047ac <xTimerCreateTimerTask+0x88>)
 8004766:	4812      	ldr	r0, [pc, #72]	@ (80047b0 <xTimerCreateTimerTask+0x8c>)
 8004768:	f7ff f8d0 	bl	800390c <xTaskCreateStatic>
 800476c:	4603      	mov	r3, r0
 800476e:	4a11      	ldr	r2, [pc, #68]	@ (80047b4 <xTimerCreateTimerTask+0x90>)
 8004770:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004772:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <xTimerCreateTimerTask+0x90>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800477a:	2301      	movs	r3, #1
 800477c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10b      	bne.n	800479c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	613b      	str	r3, [r7, #16]
}
 8004796:	bf00      	nop
 8004798:	bf00      	nop
 800479a:	e7fd      	b.n	8004798 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800479c:	697b      	ldr	r3, [r7, #20]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000cb0 	.word	0x20000cb0
 80047ac:	08005730 	.word	0x08005730
 80047b0:	080048f1 	.word	0x080048f1
 80047b4:	20000cb4 	.word	0x20000cb4

080047b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	@ 0x28
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
 80047c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10b      	bne.n	80047e8 <xTimerGenericCommand+0x30>
	__asm volatile
 80047d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	623b      	str	r3, [r7, #32]
}
 80047e2:	bf00      	nop
 80047e4:	bf00      	nop
 80047e6:	e7fd      	b.n	80047e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80047e8:	4b19      	ldr	r3, [pc, #100]	@ (8004850 <xTimerGenericCommand+0x98>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d02a      	beq.n	8004846 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b05      	cmp	r3, #5
 8004800:	dc18      	bgt.n	8004834 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004802:	f7ff fead 	bl	8004560 <xTaskGetSchedulerState>
 8004806:	4603      	mov	r3, r0
 8004808:	2b02      	cmp	r3, #2
 800480a:	d109      	bne.n	8004820 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800480c:	4b10      	ldr	r3, [pc, #64]	@ (8004850 <xTimerGenericCommand+0x98>)
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	f107 0110 	add.w	r1, r7, #16
 8004814:	2300      	movs	r3, #0
 8004816:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004818:	f7fe fc88 	bl	800312c <xQueueGenericSend>
 800481c:	6278      	str	r0, [r7, #36]	@ 0x24
 800481e:	e012      	b.n	8004846 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004820:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <xTimerGenericCommand+0x98>)
 8004822:	6818      	ldr	r0, [r3, #0]
 8004824:	f107 0110 	add.w	r1, r7, #16
 8004828:	2300      	movs	r3, #0
 800482a:	2200      	movs	r2, #0
 800482c:	f7fe fc7e 	bl	800312c <xQueueGenericSend>
 8004830:	6278      	str	r0, [r7, #36]	@ 0x24
 8004832:	e008      	b.n	8004846 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004834:	4b06      	ldr	r3, [pc, #24]	@ (8004850 <xTimerGenericCommand+0x98>)
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	f107 0110 	add.w	r1, r7, #16
 800483c:	2300      	movs	r3, #0
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	f7fe fd76 	bl	8003330 <xQueueGenericSendFromISR>
 8004844:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004848:	4618      	mov	r0, r3
 800484a:	3728      	adds	r7, #40	@ 0x28
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000cb0 	.word	0x20000cb0

08004854 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af02      	add	r7, sp, #8
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800485e:	4b23      	ldr	r3, [pc, #140]	@ (80048ec <prvProcessExpiredTimer+0x98>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	3304      	adds	r3, #4
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe faed 	bl	8002e4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	2b00      	cmp	r3, #0
 800487e:	d023      	beq.n	80048c8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	699a      	ldr	r2, [r3, #24]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	18d1      	adds	r1, r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	6978      	ldr	r0, [r7, #20]
 800488e:	f000 f8d5 	bl	8004a3c <prvInsertTimerInActiveList>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d020      	beq.n	80048da <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004898:	2300      	movs	r3, #0
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	2300      	movs	r3, #0
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	2100      	movs	r1, #0
 80048a2:	6978      	ldr	r0, [r7, #20]
 80048a4:	f7ff ff88 	bl	80047b8 <xTimerGenericCommand>
 80048a8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d114      	bne.n	80048da <prvProcessExpiredTimer+0x86>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	60fb      	str	r3, [r7, #12]
}
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048ce:	f023 0301 	bic.w	r3, r3, #1
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	6978      	ldr	r0, [r7, #20]
 80048e0:	4798      	blx	r3
}
 80048e2:	bf00      	nop
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	20000ca8 	.word	0x20000ca8

080048f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048f8:	f107 0308 	add.w	r3, r7, #8
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 f859 	bl	80049b4 <prvGetNextExpireTime>
 8004902:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	4619      	mov	r1, r3
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f000 f805 	bl	8004918 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800490e:	f000 f8d7 	bl	8004ac0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004912:	bf00      	nop
 8004914:	e7f0      	b.n	80048f8 <prvTimerTask+0x8>
	...

08004918 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004922:	f7ff fa37 	bl	8003d94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004926:	f107 0308 	add.w	r3, r7, #8
 800492a:	4618      	mov	r0, r3
 800492c:	f000 f866 	bl	80049fc <prvSampleTimeNow>
 8004930:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d130      	bne.n	800499a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10a      	bne.n	8004954 <prvProcessTimerOrBlockTask+0x3c>
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	429a      	cmp	r2, r3
 8004944:	d806      	bhi.n	8004954 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004946:	f7ff fa33 	bl	8003db0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800494a:	68f9      	ldr	r1, [r7, #12]
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff ff81 	bl	8004854 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004952:	e024      	b.n	800499e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d008      	beq.n	800496c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800495a:	4b13      	ldr	r3, [pc, #76]	@ (80049a8 <prvProcessTimerOrBlockTask+0x90>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <prvProcessTimerOrBlockTask+0x50>
 8004964:	2301      	movs	r3, #1
 8004966:	e000      	b.n	800496a <prvProcessTimerOrBlockTask+0x52>
 8004968:	2300      	movs	r3, #0
 800496a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800496c:	4b0f      	ldr	r3, [pc, #60]	@ (80049ac <prvProcessTimerOrBlockTask+0x94>)
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	4619      	mov	r1, r3
 800497a:	f7fe ff93 	bl	80038a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800497e:	f7ff fa17 	bl	8003db0 <xTaskResumeAll>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004988:	4b09      	ldr	r3, [pc, #36]	@ (80049b0 <prvProcessTimerOrBlockTask+0x98>)
 800498a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	f3bf 8f6f 	isb	sy
}
 8004998:	e001      	b.n	800499e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800499a:	f7ff fa09 	bl	8003db0 <xTaskResumeAll>
}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000cac 	.word	0x20000cac
 80049ac:	20000cb0 	.word	0x20000cb0
 80049b0:	e000ed04 	.word	0xe000ed04

080049b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049bc:	4b0e      	ldr	r3, [pc, #56]	@ (80049f8 <prvGetNextExpireTime+0x44>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <prvGetNextExpireTime+0x16>
 80049c6:	2201      	movs	r2, #1
 80049c8:	e000      	b.n	80049cc <prvGetNextExpireTime+0x18>
 80049ca:	2200      	movs	r2, #0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049d8:	4b07      	ldr	r3, [pc, #28]	@ (80049f8 <prvGetNextExpireTime+0x44>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]
 80049e2:	e001      	b.n	80049e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80049e8:	68fb      	ldr	r3, [r7, #12]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	20000ca8 	.word	0x20000ca8

080049fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004a04:	f7ff fa72 	bl	8003eec <xTaskGetTickCount>
 8004a08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8004a38 <prvSampleTimeNow+0x3c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d205      	bcs.n	8004a20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004a14:	f000 f93a 	bl	8004c8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	e002      	b.n	8004a26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004a26:	4a04      	ldr	r2, [pc, #16]	@ (8004a38 <prvSampleTimeNow+0x3c>)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000cb8 	.word	0x20000cb8

08004a3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d812      	bhi.n	8004a88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	1ad2      	subs	r2, r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d302      	bcc.n	8004a76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004a70:	2301      	movs	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	e01b      	b.n	8004aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a76:	4b10      	ldr	r3, [pc, #64]	@ (8004ab8 <prvInsertTimerInActiveList+0x7c>)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4610      	mov	r0, r2
 8004a82:	f7fe f9aa 	bl	8002dda <vListInsert>
 8004a86:	e012      	b.n	8004aae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d206      	bcs.n	8004a9e <prvInsertTimerInActiveList+0x62>
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d302      	bcc.n	8004a9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	617b      	str	r3, [r7, #20]
 8004a9c:	e007      	b.n	8004aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a9e:	4b07      	ldr	r3, [pc, #28]	@ (8004abc <prvInsertTimerInActiveList+0x80>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	f7fe f996 	bl	8002dda <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004aae:	697b      	ldr	r3, [r7, #20]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000cac 	.word	0x20000cac
 8004abc:	20000ca8 	.word	0x20000ca8

08004ac0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08e      	sub	sp, #56	@ 0x38
 8004ac4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ac6:	e0ce      	b.n	8004c66 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	da19      	bge.n	8004b02 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ace:	1d3b      	adds	r3, r7, #4
 8004ad0:	3304      	adds	r3, #4
 8004ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10b      	bne.n	8004af2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ade:	f383 8811 	msr	BASEPRI, r3
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	f3bf 8f4f 	dsb	sy
 8004aea:	61fb      	str	r3, [r7, #28]
}
 8004aec:	bf00      	nop
 8004aee:	bf00      	nop
 8004af0:	e7fd      	b.n	8004aee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004af8:	6850      	ldr	r0, [r2, #4]
 8004afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004afc:	6892      	ldr	r2, [r2, #8]
 8004afe:	4611      	mov	r1, r2
 8004b00:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f2c0 80ae 	blt.w	8004c66 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d004      	beq.n	8004b20 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b18:	3304      	adds	r3, #4
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7fe f996 	bl	8002e4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b20:	463b      	mov	r3, r7
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff ff6a 	bl	80049fc <prvSampleTimeNow>
 8004b28:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b09      	cmp	r3, #9
 8004b2e:	f200 8097 	bhi.w	8004c60 <prvProcessReceivedCommands+0x1a0>
 8004b32:	a201      	add	r2, pc, #4	@ (adr r2, 8004b38 <prvProcessReceivedCommands+0x78>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004b61 	.word	0x08004b61
 8004b3c:	08004b61 	.word	0x08004b61
 8004b40:	08004b61 	.word	0x08004b61
 8004b44:	08004bd7 	.word	0x08004bd7
 8004b48:	08004beb 	.word	0x08004beb
 8004b4c:	08004c37 	.word	0x08004c37
 8004b50:	08004b61 	.word	0x08004b61
 8004b54:	08004b61 	.word	0x08004b61
 8004b58:	08004bd7 	.word	0x08004bd7
 8004b5c:	08004beb 	.word	0x08004beb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b66:	f043 0301 	orr.w	r3, r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	18d1      	adds	r1, r2, r3
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b80:	f7ff ff5c 	bl	8004a3c <prvInsertTimerInActiveList>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d06c      	beq.n	8004c64 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d061      	beq.n	8004c64 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	441a      	add	r2, r3
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	2300      	movs	r3, #0
 8004bae:	2100      	movs	r1, #0
 8004bb0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bb2:	f7ff fe01 	bl	80047b8 <xTimerGenericCommand>
 8004bb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004bb8:	6a3b      	ldr	r3, [r7, #32]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d152      	bne.n	8004c64 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc2:	f383 8811 	msr	BASEPRI, r3
 8004bc6:	f3bf 8f6f 	isb	sy
 8004bca:	f3bf 8f4f 	dsb	sy
 8004bce:	61bb      	str	r3, [r7, #24]
}
 8004bd0:	bf00      	nop
 8004bd2:	bf00      	nop
 8004bd4:	e7fd      	b.n	8004bd2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	b2da      	uxtb	r2, r3
 8004be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004be8:	e03d      	b.n	8004c66 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c00:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10b      	bne.n	8004c22 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	617b      	str	r3, [r7, #20]
}
 8004c1c:	bf00      	nop
 8004c1e:	bf00      	nop
 8004c20:	e7fd      	b.n	8004c1e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	18d1      	adds	r1, r2, r3
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c30:	f7ff ff04 	bl	8004a3c <prvInsertTimerInActiveList>
					break;
 8004c34:	e017      	b.n	8004c66 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d103      	bne.n	8004c4c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004c44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c46:	f000 fbe7 	bl	8005418 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004c4a:	e00c      	b.n	8004c66 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	b2da      	uxtb	r2, r3
 8004c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004c5e:	e002      	b.n	8004c66 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004c60:	bf00      	nop
 8004c62:	e000      	b.n	8004c66 <prvProcessReceivedCommands+0x1a6>
					break;
 8004c64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c66:	4b08      	ldr	r3, [pc, #32]	@ (8004c88 <prvProcessReceivedCommands+0x1c8>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	1d39      	adds	r1, r7, #4
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe fbfc 	bl	800346c <xQueueReceive>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f47f af26 	bne.w	8004ac8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	3730      	adds	r7, #48	@ 0x30
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000cb0 	.word	0x20000cb0

08004c8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c92:	e049      	b.n	8004d28 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c94:	4b2e      	ldr	r3, [pc, #184]	@ (8004d50 <prvSwitchTimerLists+0xc4>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d50 <prvSwitchTimerLists+0xc4>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3304      	adds	r3, #4
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fe f8cd 	bl	8002e4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d02f      	beq.n	8004d28 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4413      	add	r3, r2
 8004cd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004cd2:	68ba      	ldr	r2, [r7, #8]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d90e      	bls.n	8004cf8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8004d50 <prvSwitchTimerLists+0xc4>)
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	3304      	adds	r3, #4
 8004cee:	4619      	mov	r1, r3
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	f7fe f872 	bl	8002dda <vListInsert>
 8004cf6:	e017      	b.n	8004d28 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	2100      	movs	r1, #0
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7ff fd58 	bl	80047b8 <xTimerGenericCommand>
 8004d08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10b      	bne.n	8004d28 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	603b      	str	r3, [r7, #0]
}
 8004d22:	bf00      	nop
 8004d24:	bf00      	nop
 8004d26:	e7fd      	b.n	8004d24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d28:	4b09      	ldr	r3, [pc, #36]	@ (8004d50 <prvSwitchTimerLists+0xc4>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1b0      	bne.n	8004c94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004d32:	4b07      	ldr	r3, [pc, #28]	@ (8004d50 <prvSwitchTimerLists+0xc4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004d38:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <prvSwitchTimerLists+0xc8>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a04      	ldr	r2, [pc, #16]	@ (8004d50 <prvSwitchTimerLists+0xc4>)
 8004d3e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004d40:	4a04      	ldr	r2, [pc, #16]	@ (8004d54 <prvSwitchTimerLists+0xc8>)
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	6013      	str	r3, [r2, #0]
}
 8004d46:	bf00      	nop
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	20000ca8 	.word	0x20000ca8
 8004d54:	20000cac 	.word	0x20000cac

08004d58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004d5e:	f000 f96b 	bl	8005038 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004d62:	4b15      	ldr	r3, [pc, #84]	@ (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d120      	bne.n	8004dac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004d6a:	4814      	ldr	r0, [pc, #80]	@ (8004dbc <prvCheckForValidListAndQueue+0x64>)
 8004d6c:	f7fd ffe4 	bl	8002d38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004d70:	4813      	ldr	r0, [pc, #76]	@ (8004dc0 <prvCheckForValidListAndQueue+0x68>)
 8004d72:	f7fd ffe1 	bl	8002d38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004d76:	4b13      	ldr	r3, [pc, #76]	@ (8004dc4 <prvCheckForValidListAndQueue+0x6c>)
 8004d78:	4a10      	ldr	r2, [pc, #64]	@ (8004dbc <prvCheckForValidListAndQueue+0x64>)
 8004d7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004d7c:	4b12      	ldr	r3, [pc, #72]	@ (8004dc8 <prvCheckForValidListAndQueue+0x70>)
 8004d7e:	4a10      	ldr	r2, [pc, #64]	@ (8004dc0 <prvCheckForValidListAndQueue+0x68>)
 8004d80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004d82:	2300      	movs	r3, #0
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	4b11      	ldr	r3, [pc, #68]	@ (8004dcc <prvCheckForValidListAndQueue+0x74>)
 8004d88:	4a11      	ldr	r2, [pc, #68]	@ (8004dd0 <prvCheckForValidListAndQueue+0x78>)
 8004d8a:	2110      	movs	r1, #16
 8004d8c:	200a      	movs	r0, #10
 8004d8e:	f7fe f8f1 	bl	8002f74 <xQueueGenericCreateStatic>
 8004d92:	4603      	mov	r3, r0
 8004d94:	4a08      	ldr	r2, [pc, #32]	@ (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004d96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004d98:	4b07      	ldr	r3, [pc, #28]	@ (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004da0:	4b05      	ldr	r3, [pc, #20]	@ (8004db8 <prvCheckForValidListAndQueue+0x60>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	490b      	ldr	r1, [pc, #44]	@ (8004dd4 <prvCheckForValidListAndQueue+0x7c>)
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe fd52 	bl	8003850 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004dac:	f000 f976 	bl	800509c <vPortExitCritical>
}
 8004db0:	bf00      	nop
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000cb0 	.word	0x20000cb0
 8004dbc:	20000c80 	.word	0x20000c80
 8004dc0:	20000c94 	.word	0x20000c94
 8004dc4:	20000ca8 	.word	0x20000ca8
 8004dc8:	20000cac 	.word	0x20000cac
 8004dcc:	20000d5c 	.word	0x20000d5c
 8004dd0:	20000cbc 	.word	0x20000cbc
 8004dd4:	08005738 	.word	0x08005738

08004dd8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3b04      	subs	r3, #4
 8004de8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	3b04      	subs	r3, #4
 8004df6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f023 0201 	bic.w	r2, r3, #1
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3b04      	subs	r3, #4
 8004e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e08:	4a0c      	ldr	r2, [pc, #48]	@ (8004e3c <pxPortInitialiseStack+0x64>)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	3b14      	subs	r3, #20
 8004e12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3b04      	subs	r3, #4
 8004e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f06f 0202 	mvn.w	r2, #2
 8004e26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3b20      	subs	r3, #32
 8004e2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr
 8004e3c:	08004e41 	.word	0x08004e41

08004e40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004e4a:	4b13      	ldr	r3, [pc, #76]	@ (8004e98 <prvTaskExitError+0x58>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e52:	d00b      	beq.n	8004e6c <prvTaskExitError+0x2c>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	60fb      	str	r3, [r7, #12]
}
 8004e66:	bf00      	nop
 8004e68:	bf00      	nop
 8004e6a:	e7fd      	b.n	8004e68 <prvTaskExitError+0x28>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	60bb      	str	r3, [r7, #8]
}
 8004e7e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004e80:	bf00      	nop
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d0fc      	beq.n	8004e82 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004e88:	bf00      	nop
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	2000000c 	.word	0x2000000c
 8004e9c:	00000000 	.word	0x00000000

08004ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ea0:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <pxCurrentTCBConst2>)
 8004ea2:	6819      	ldr	r1, [r3, #0]
 8004ea4:	6808      	ldr	r0, [r1, #0]
 8004ea6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	f380 8809 	msr	PSP, r0
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8811 	msr	BASEPRI, r0
 8004eba:	4770      	bx	lr
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst2>:
 8004ec0:	20000780 	.word	0x20000780
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ec8:	4808      	ldr	r0, [pc, #32]	@ (8004eec <prvPortStartFirstTask+0x24>)
 8004eca:	6800      	ldr	r0, [r0, #0]
 8004ecc:	6800      	ldr	r0, [r0, #0]
 8004ece:	f380 8808 	msr	MSP, r0
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f380 8814 	msr	CONTROL, r0
 8004eda:	b662      	cpsie	i
 8004edc:	b661      	cpsie	f
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	df00      	svc	0
 8004ee8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004eea:	bf00      	nop
 8004eec:	e000ed08 	.word	0xe000ed08

08004ef0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b086      	sub	sp, #24
 8004ef4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ef6:	4b47      	ldr	r3, [pc, #284]	@ (8005014 <xPortStartScheduler+0x124>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a47      	ldr	r2, [pc, #284]	@ (8005018 <xPortStartScheduler+0x128>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10b      	bne.n	8004f18 <xPortStartScheduler+0x28>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	613b      	str	r3, [r7, #16]
}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	e7fd      	b.n	8004f14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004f18:	4b3e      	ldr	r3, [pc, #248]	@ (8005014 <xPortStartScheduler+0x124>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a3f      	ldr	r2, [pc, #252]	@ (800501c <xPortStartScheduler+0x12c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d10b      	bne.n	8004f3a <xPortStartScheduler+0x4a>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	60fb      	str	r3, [r7, #12]
}
 8004f34:	bf00      	nop
 8004f36:	bf00      	nop
 8004f38:	e7fd      	b.n	8004f36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f3a:	4b39      	ldr	r3, [pc, #228]	@ (8005020 <xPortStartScheduler+0x130>)
 8004f3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	22ff      	movs	r2, #255	@ 0xff
 8004f4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	4b31      	ldr	r3, [pc, #196]	@ (8005024 <xPortStartScheduler+0x134>)
 8004f60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f62:	4b31      	ldr	r3, [pc, #196]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f64:	2207      	movs	r2, #7
 8004f66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f68:	e009      	b.n	8004f7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004f6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	4a2d      	ldr	r2, [pc, #180]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f7e:	78fb      	ldrb	r3, [r7, #3]
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f86:	2b80      	cmp	r3, #128	@ 0x80
 8004f88:	d0ef      	beq.n	8004f6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004f8a:	4b27      	ldr	r3, [pc, #156]	@ (8005028 <xPortStartScheduler+0x138>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1c3 0307 	rsb	r3, r3, #7
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d00b      	beq.n	8004fae <xPortStartScheduler+0xbe>
	__asm volatile
 8004f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9a:	f383 8811 	msr	BASEPRI, r3
 8004f9e:	f3bf 8f6f 	isb	sy
 8004fa2:	f3bf 8f4f 	dsb	sy
 8004fa6:	60bb      	str	r3, [r7, #8]
}
 8004fa8:	bf00      	nop
 8004faa:	bf00      	nop
 8004fac:	e7fd      	b.n	8004faa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fae:	4b1e      	ldr	r3, [pc, #120]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	021b      	lsls	r3, r3, #8
 8004fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004fc0:	4a19      	ldr	r2, [pc, #100]	@ (8005028 <xPortStartScheduler+0x138>)
 8004fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	b2da      	uxtb	r2, r3
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004fcc:	4b17      	ldr	r3, [pc, #92]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a16      	ldr	r2, [pc, #88]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fd2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004fd8:	4b14      	ldr	r3, [pc, #80]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a13      	ldr	r2, [pc, #76]	@ (800502c <xPortStartScheduler+0x13c>)
 8004fde:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004fe4:	f000 f8da 	bl	800519c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004fe8:	4b11      	ldr	r3, [pc, #68]	@ (8005030 <xPortStartScheduler+0x140>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004fee:	f000 f8f9 	bl	80051e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ff2:	4b10      	ldr	r3, [pc, #64]	@ (8005034 <xPortStartScheduler+0x144>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8005034 <xPortStartScheduler+0x144>)
 8004ff8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004ffc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ffe:	f7ff ff63 	bl	8004ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005002:	f7ff f83d 	bl	8004080 <vTaskSwitchContext>
	prvTaskExitError();
 8005006:	f7ff ff1b 	bl	8004e40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3718      	adds	r7, #24
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	e000ed00 	.word	0xe000ed00
 8005018:	410fc271 	.word	0x410fc271
 800501c:	410fc270 	.word	0x410fc270
 8005020:	e000e400 	.word	0xe000e400
 8005024:	20000dac 	.word	0x20000dac
 8005028:	20000db0 	.word	0x20000db0
 800502c:	e000ed20 	.word	0xe000ed20
 8005030:	2000000c 	.word	0x2000000c
 8005034:	e000ef34 	.word	0xe000ef34

08005038 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	607b      	str	r3, [r7, #4]
}
 8005050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005052:	4b10      	ldr	r3, [pc, #64]	@ (8005094 <vPortEnterCritical+0x5c>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3301      	adds	r3, #1
 8005058:	4a0e      	ldr	r2, [pc, #56]	@ (8005094 <vPortEnterCritical+0x5c>)
 800505a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800505c:	4b0d      	ldr	r3, [pc, #52]	@ (8005094 <vPortEnterCritical+0x5c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d110      	bne.n	8005086 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005064:	4b0c      	ldr	r3, [pc, #48]	@ (8005098 <vPortEnterCritical+0x60>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00b      	beq.n	8005086 <vPortEnterCritical+0x4e>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	603b      	str	r3, [r7, #0]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <vPortEnterCritical+0x4a>
	}
}
 8005086:	bf00      	nop
 8005088:	370c      	adds	r7, #12
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	2000000c 	.word	0x2000000c
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050a2:	4b12      	ldr	r3, [pc, #72]	@ (80050ec <vPortExitCritical+0x50>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10b      	bne.n	80050c2 <vPortExitCritical+0x26>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	607b      	str	r3, [r7, #4]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050c2:	4b0a      	ldr	r3, [pc, #40]	@ (80050ec <vPortExitCritical+0x50>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	4a08      	ldr	r2, [pc, #32]	@ (80050ec <vPortExitCritical+0x50>)
 80050ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050cc:	4b07      	ldr	r3, [pc, #28]	@ (80050ec <vPortExitCritical+0x50>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d105      	bne.n	80050e0 <vPortExitCritical+0x44>
 80050d4:	2300      	movs	r3, #0
 80050d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	f383 8811 	msr	BASEPRI, r3
}
 80050de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	2000000c 	.word	0x2000000c

080050f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80050f0:	f3ef 8009 	mrs	r0, PSP
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	4b15      	ldr	r3, [pc, #84]	@ (8005150 <pxCurrentTCBConst>)
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	f01e 0f10 	tst.w	lr, #16
 8005100:	bf08      	it	eq
 8005102:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005106:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510a:	6010      	str	r0, [r2, #0]
 800510c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005110:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005114:	f380 8811 	msr	BASEPRI, r0
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f7fe ffae 	bl	8004080 <vTaskSwitchContext>
 8005124:	f04f 0000 	mov.w	r0, #0
 8005128:	f380 8811 	msr	BASEPRI, r0
 800512c:	bc09      	pop	{r0, r3}
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	6808      	ldr	r0, [r1, #0]
 8005132:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005136:	f01e 0f10 	tst.w	lr, #16
 800513a:	bf08      	it	eq
 800513c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005140:	f380 8809 	msr	PSP, r0
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	f3af 8000 	nop.w

08005150 <pxCurrentTCBConst>:
 8005150:	20000780 	.word	0x20000780
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop

08005158 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	607b      	str	r3, [r7, #4]
}
 8005170:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005172:	f7fe fecb 	bl	8003f0c <xTaskIncrementTick>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800517c:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <xPortSysTickHandler+0x40>)
 800517e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	2300      	movs	r3, #0
 8005186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f383 8811 	msr	BASEPRI, r3
}
 800518e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005190:	bf00      	nop
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80051a0:	4b0b      	ldr	r3, [pc, #44]	@ (80051d0 <vPortSetupTimerInterrupt+0x34>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80051a6:	4b0b      	ldr	r3, [pc, #44]	@ (80051d4 <vPortSetupTimerInterrupt+0x38>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80051ac:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <vPortSetupTimerInterrupt+0x3c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0a      	ldr	r2, [pc, #40]	@ (80051dc <vPortSetupTimerInterrupt+0x40>)
 80051b2:	fba2 2303 	umull	r2, r3, r2, r3
 80051b6:	099b      	lsrs	r3, r3, #6
 80051b8:	4a09      	ldr	r2, [pc, #36]	@ (80051e0 <vPortSetupTimerInterrupt+0x44>)
 80051ba:	3b01      	subs	r3, #1
 80051bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051be:	4b04      	ldr	r3, [pc, #16]	@ (80051d0 <vPortSetupTimerInterrupt+0x34>)
 80051c0:	2207      	movs	r2, #7
 80051c2:	601a      	str	r2, [r3, #0]
}
 80051c4:	bf00      	nop
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	e000e010 	.word	0xe000e010
 80051d4:	e000e018 	.word	0xe000e018
 80051d8:	20000000 	.word	0x20000000
 80051dc:	10624dd3 	.word	0x10624dd3
 80051e0:	e000e014 	.word	0xe000e014

080051e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80051e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80051f4 <vPortEnableVFP+0x10>
 80051e8:	6801      	ldr	r1, [r0, #0]
 80051ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80051ee:	6001      	str	r1, [r0, #0]
 80051f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80051f2:	bf00      	nop
 80051f4:	e000ed88 	.word	0xe000ed88

080051f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051fe:	f3ef 8305 	mrs	r3, IPSR
 8005202:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b0f      	cmp	r3, #15
 8005208:	d915      	bls.n	8005236 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800520a:	4a18      	ldr	r2, [pc, #96]	@ (800526c <vPortValidateInterruptPriority+0x74>)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4413      	add	r3, r2
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005214:	4b16      	ldr	r3, [pc, #88]	@ (8005270 <vPortValidateInterruptPriority+0x78>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	7afa      	ldrb	r2, [r7, #11]
 800521a:	429a      	cmp	r2, r3
 800521c:	d20b      	bcs.n	8005236 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	607b      	str	r3, [r7, #4]
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	e7fd      	b.n	8005232 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005236:	4b0f      	ldr	r3, [pc, #60]	@ (8005274 <vPortValidateInterruptPriority+0x7c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800523e:	4b0e      	ldr	r3, [pc, #56]	@ (8005278 <vPortValidateInterruptPriority+0x80>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d90b      	bls.n	800525e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	603b      	str	r3, [r7, #0]
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	e7fd      	b.n	800525a <vPortValidateInterruptPriority+0x62>
	}
 800525e:	bf00      	nop
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	e000e3f0 	.word	0xe000e3f0
 8005270:	20000dac 	.word	0x20000dac
 8005274:	e000ed0c 	.word	0xe000ed0c
 8005278:	20000db0 	.word	0x20000db0

0800527c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b08a      	sub	sp, #40	@ 0x28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005284:	2300      	movs	r3, #0
 8005286:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005288:	f7fe fd84 	bl	8003d94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800528c:	4b5c      	ldr	r3, [pc, #368]	@ (8005400 <pvPortMalloc+0x184>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d101      	bne.n	8005298 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005294:	f000 f924 	bl	80054e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005298:	4b5a      	ldr	r3, [pc, #360]	@ (8005404 <pvPortMalloc+0x188>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4013      	ands	r3, r2
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f040 8095 	bne.w	80053d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01e      	beq.n	80052ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80052ac:	2208      	movs	r2, #8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f003 0307 	and.w	r3, r3, #7
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d015      	beq.n	80052ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f023 0307 	bic.w	r3, r3, #7
 80052c4:	3308      	adds	r3, #8
 80052c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <pvPortMalloc+0x6e>
	__asm volatile
 80052d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d6:	f383 8811 	msr	BASEPRI, r3
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	617b      	str	r3, [r7, #20]
}
 80052e4:	bf00      	nop
 80052e6:	bf00      	nop
 80052e8:	e7fd      	b.n	80052e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d06f      	beq.n	80053d0 <pvPortMalloc+0x154>
 80052f0:	4b45      	ldr	r3, [pc, #276]	@ (8005408 <pvPortMalloc+0x18c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d86a      	bhi.n	80053d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052fa:	4b44      	ldr	r3, [pc, #272]	@ (800540c <pvPortMalloc+0x190>)
 80052fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052fe:	4b43      	ldr	r3, [pc, #268]	@ (800540c <pvPortMalloc+0x190>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005304:	e004      	b.n	8005310 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005308:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	429a      	cmp	r2, r3
 8005318:	d903      	bls.n	8005322 <pvPortMalloc+0xa6>
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1f1      	bne.n	8005306 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005322:	4b37      	ldr	r3, [pc, #220]	@ (8005400 <pvPortMalloc+0x184>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005328:	429a      	cmp	r2, r3
 800532a:	d051      	beq.n	80053d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2208      	movs	r2, #8
 8005332:	4413      	add	r3, r2
 8005334:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	1ad2      	subs	r2, r2, r3
 8005346:	2308      	movs	r3, #8
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	429a      	cmp	r2, r3
 800534c:	d920      	bls.n	8005390 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800534e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4413      	add	r3, r2
 8005354:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00b      	beq.n	8005378 <pvPortMalloc+0xfc>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	613b      	str	r3, [r7, #16]
}
 8005372:	bf00      	nop
 8005374:	bf00      	nop
 8005376:	e7fd      	b.n	8005374 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	1ad2      	subs	r2, r2, r3
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800538a:	69b8      	ldr	r0, [r7, #24]
 800538c:	f000 f90a 	bl	80055a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005390:	4b1d      	ldr	r3, [pc, #116]	@ (8005408 <pvPortMalloc+0x18c>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	4a1b      	ldr	r2, [pc, #108]	@ (8005408 <pvPortMalloc+0x18c>)
 800539c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800539e:	4b1a      	ldr	r3, [pc, #104]	@ (8005408 <pvPortMalloc+0x18c>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005410 <pvPortMalloc+0x194>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d203      	bcs.n	80053b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053aa:	4b17      	ldr	r3, [pc, #92]	@ (8005408 <pvPortMalloc+0x18c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a18      	ldr	r2, [pc, #96]	@ (8005410 <pvPortMalloc+0x194>)
 80053b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	4b13      	ldr	r3, [pc, #76]	@ (8005404 <pvPortMalloc+0x188>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80053c6:	4b13      	ldr	r3, [pc, #76]	@ (8005414 <pvPortMalloc+0x198>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3301      	adds	r3, #1
 80053cc:	4a11      	ldr	r2, [pc, #68]	@ (8005414 <pvPortMalloc+0x198>)
 80053ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80053d0:	f7fe fcee 	bl	8003db0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00b      	beq.n	80053f6 <pvPortMalloc+0x17a>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	60fb      	str	r3, [r7, #12]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <pvPortMalloc+0x176>
	return pvReturn;
 80053f6:	69fb      	ldr	r3, [r7, #28]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3728      	adds	r7, #40	@ 0x28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	200049bc 	.word	0x200049bc
 8005404:	200049d0 	.word	0x200049d0
 8005408:	200049c0 	.word	0x200049c0
 800540c:	200049b4 	.word	0x200049b4
 8005410:	200049c4 	.word	0x200049c4
 8005414:	200049c8 	.word	0x200049c8

08005418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d04f      	beq.n	80054ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800542a:	2308      	movs	r3, #8
 800542c:	425b      	negs	r3, r3
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4413      	add	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	4b25      	ldr	r3, [pc, #148]	@ (80054d4 <vPortFree+0xbc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4013      	ands	r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10b      	bne.n	800545e <vPortFree+0x46>
	__asm volatile
 8005446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544a:	f383 8811 	msr	BASEPRI, r3
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f3bf 8f4f 	dsb	sy
 8005456:	60fb      	str	r3, [r7, #12]
}
 8005458:	bf00      	nop
 800545a:	bf00      	nop
 800545c:	e7fd      	b.n	800545a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <vPortFree+0x66>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	60bb      	str	r3, [r7, #8]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	685a      	ldr	r2, [r3, #4]
 8005482:	4b14      	ldr	r3, [pc, #80]	@ (80054d4 <vPortFree+0xbc>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4013      	ands	r3, r2
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01e      	beq.n	80054ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11a      	bne.n	80054ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	4b0e      	ldr	r3, [pc, #56]	@ (80054d4 <vPortFree+0xbc>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	43db      	mvns	r3, r3
 800549e:	401a      	ands	r2, r3
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054a4:	f7fe fc76 	bl	8003d94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	4b0a      	ldr	r3, [pc, #40]	@ (80054d8 <vPortFree+0xc0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4413      	add	r3, r2
 80054b2:	4a09      	ldr	r2, [pc, #36]	@ (80054d8 <vPortFree+0xc0>)
 80054b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80054b6:	6938      	ldr	r0, [r7, #16]
 80054b8:	f000 f874 	bl	80055a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80054bc:	4b07      	ldr	r3, [pc, #28]	@ (80054dc <vPortFree+0xc4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3301      	adds	r3, #1
 80054c2:	4a06      	ldr	r2, [pc, #24]	@ (80054dc <vPortFree+0xc4>)
 80054c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80054c6:	f7fe fc73 	bl	8003db0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80054ca:	bf00      	nop
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	200049d0 	.word	0x200049d0
 80054d8:	200049c0 	.word	0x200049c0
 80054dc:	200049cc 	.word	0x200049cc

080054e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80054e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80054ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80054ec:	4b27      	ldr	r3, [pc, #156]	@ (800558c <prvHeapInit+0xac>)
 80054ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00c      	beq.n	8005514 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3307      	adds	r3, #7
 80054fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0307 	bic.w	r3, r3, #7
 8005506:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	4a1f      	ldr	r2, [pc, #124]	@ (800558c <prvHeapInit+0xac>)
 8005510:	4413      	add	r3, r2
 8005512:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005518:	4a1d      	ldr	r2, [pc, #116]	@ (8005590 <prvHeapInit+0xb0>)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800551e:	4b1c      	ldr	r3, [pc, #112]	@ (8005590 <prvHeapInit+0xb0>)
 8005520:	2200      	movs	r2, #0
 8005522:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	4413      	add	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800552c:	2208      	movs	r2, #8
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	1a9b      	subs	r3, r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0307 	bic.w	r3, r3, #7
 800553a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a15      	ldr	r2, [pc, #84]	@ (8005594 <prvHeapInit+0xb4>)
 8005540:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005542:	4b14      	ldr	r3, [pc, #80]	@ (8005594 <prvHeapInit+0xb4>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2200      	movs	r2, #0
 8005548:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800554a:	4b12      	ldr	r3, [pc, #72]	@ (8005594 <prvHeapInit+0xb4>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	1ad2      	subs	r2, r2, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005560:	4b0c      	ldr	r3, [pc, #48]	@ (8005594 <prvHeapInit+0xb4>)
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a0a      	ldr	r2, [pc, #40]	@ (8005598 <prvHeapInit+0xb8>)
 800556e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	4a09      	ldr	r2, [pc, #36]	@ (800559c <prvHeapInit+0xbc>)
 8005576:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005578:	4b09      	ldr	r3, [pc, #36]	@ (80055a0 <prvHeapInit+0xc0>)
 800557a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800557e:	601a      	str	r2, [r3, #0]
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	20000db4 	.word	0x20000db4
 8005590:	200049b4 	.word	0x200049b4
 8005594:	200049bc 	.word	0x200049bc
 8005598:	200049c4 	.word	0x200049c4
 800559c:	200049c0 	.word	0x200049c0
 80055a0:	200049d0 	.word	0x200049d0

080055a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055ac:	4b28      	ldr	r3, [pc, #160]	@ (8005650 <prvInsertBlockIntoFreeList+0xac>)
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	e002      	b.n	80055b8 <prvInsertBlockIntoFreeList+0x14>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d8f7      	bhi.n	80055b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	4413      	add	r3, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d108      	bne.n	80055e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	441a      	add	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	441a      	add	r2, r3
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d118      	bne.n	800562c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b15      	ldr	r3, [pc, #84]	@ (8005654 <prvInsertBlockIntoFreeList+0xb0>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d00d      	beq.n	8005622 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	441a      	add	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	e008      	b.n	8005634 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005622:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <prvInsertBlockIntoFreeList+0xb0>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	e003      	b.n	8005634 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	429a      	cmp	r2, r3
 800563a:	d002      	beq.n	8005642 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005642:	bf00      	nop
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	200049b4 	.word	0x200049b4
 8005654:	200049bc 	.word	0x200049bc

08005658 <memset>:
 8005658:	4402      	add	r2, r0
 800565a:	4603      	mov	r3, r0
 800565c:	4293      	cmp	r3, r2
 800565e:	d100      	bne.n	8005662 <memset+0xa>
 8005660:	4770      	bx	lr
 8005662:	f803 1b01 	strb.w	r1, [r3], #1
 8005666:	e7f9      	b.n	800565c <memset+0x4>

08005668 <__libc_init_array>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	4d0d      	ldr	r5, [pc, #52]	@ (80056a0 <__libc_init_array+0x38>)
 800566c:	4c0d      	ldr	r4, [pc, #52]	@ (80056a4 <__libc_init_array+0x3c>)
 800566e:	1b64      	subs	r4, r4, r5
 8005670:	10a4      	asrs	r4, r4, #2
 8005672:	2600      	movs	r6, #0
 8005674:	42a6      	cmp	r6, r4
 8005676:	d109      	bne.n	800568c <__libc_init_array+0x24>
 8005678:	4d0b      	ldr	r5, [pc, #44]	@ (80056a8 <__libc_init_array+0x40>)
 800567a:	4c0c      	ldr	r4, [pc, #48]	@ (80056ac <__libc_init_array+0x44>)
 800567c:	f000 f826 	bl	80056cc <_init>
 8005680:	1b64      	subs	r4, r4, r5
 8005682:	10a4      	asrs	r4, r4, #2
 8005684:	2600      	movs	r6, #0
 8005686:	42a6      	cmp	r6, r4
 8005688:	d105      	bne.n	8005696 <__libc_init_array+0x2e>
 800568a:	bd70      	pop	{r4, r5, r6, pc}
 800568c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005690:	4798      	blx	r3
 8005692:	3601      	adds	r6, #1
 8005694:	e7ee      	b.n	8005674 <__libc_init_array+0xc>
 8005696:	f855 3b04 	ldr.w	r3, [r5], #4
 800569a:	4798      	blx	r3
 800569c:	3601      	adds	r6, #1
 800569e:	e7f2      	b.n	8005686 <__libc_init_array+0x1e>
 80056a0:	08005784 	.word	0x08005784
 80056a4:	08005784 	.word	0x08005784
 80056a8:	08005784 	.word	0x08005784
 80056ac:	08005788 	.word	0x08005788

080056b0 <memcpy>:
 80056b0:	440a      	add	r2, r1
 80056b2:	4291      	cmp	r1, r2
 80056b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056b8:	d100      	bne.n	80056bc <memcpy+0xc>
 80056ba:	4770      	bx	lr
 80056bc:	b510      	push	{r4, lr}
 80056be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056c6:	4291      	cmp	r1, r2
 80056c8:	d1f9      	bne.n	80056be <memcpy+0xe>
 80056ca:	bd10      	pop	{r4, pc}

080056cc <_init>:
 80056cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ce:	bf00      	nop
 80056d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056d2:	bc08      	pop	{r3}
 80056d4:	469e      	mov	lr, r3
 80056d6:	4770      	bx	lr

080056d8 <_fini>:
 80056d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056da:	bf00      	nop
 80056dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056de:	bc08      	pop	{r3}
 80056e0:	469e      	mov	lr, r3
 80056e2:	4770      	bx	lr
